<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/devtools/containeranalysis/v1beta1/build/build.proto

namespace Grafeas\V1beta1\Build;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Message encapsulating the signature of the verified build.
 *
 * Generated from protobuf message <code>grafeas.v1beta1.build.BuildSignature</code>
 */
class BuildSignature extends \Google\Protobuf\Internal\Message
{
    /**
     * Public key of the builder which can be used to verify that the related
     * findings are valid and unchanged. If `key_type` is empty, this defaults
     * to PEM encoded public keys.
     * This field may be empty if `key_id` references an external key.
     * For Cloud Build based signatures, this is a PEM encoded public
     * key. To verify the Cloud Build signature, place the contents of
     * this field into a file (public.pem). The signature field is base64-decoded
     * into its binary representation in signature.bin, and the provenance bytes
     * from `BuildDetails` are base64-decoded into a binary representation in
     * signed.bin. OpenSSL can then verify the signature:
     * `openssl sha256 -verify public.pem -signature signature.bin signed.bin`
     *
     * Generated from protobuf field <code>string public_key = 1;</code>
     */
    protected $public_key = '';
    /**
     * Required. Signature of the related `BuildProvenance`. In JSON, this is
     * base-64 encoded.
     *
     * Generated from protobuf field <code>bytes signature = 2;</code>
     */
    protected $signature = '';
    /**
     * An ID for the key used to sign. This could be either an ID for the key
     * stored in `public_key` (such as the ID or fingerprint for a PGP key, or the
     * CN for a cert), or a reference to an external key (such as a reference to a
     * key in Cloud Key Management Service).
     *
     * Generated from protobuf field <code>string key_id = 3;</code>
     */
    protected $key_id = '';
    /**
     * The type of the key, either stored in `public_key` or referenced in
     * `key_id`.
     *
     * Generated from protobuf field <code>.grafeas.v1beta1.build.BuildSignature.KeyType key_type = 4;</code>
     */
    protected $key_type = 0;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type string $public_key
     *           Public key of the builder which can be used to verify that the related
     *           findings are valid and unchanged. If `key_type` is empty, this defaults
     *           to PEM encoded public keys.
     *           This field may be empty if `key_id` references an external key.
     *           For Cloud Build based signatures, this is a PEM encoded public
     *           key. To verify the Cloud Build signature, place the contents of
     *           this field into a file (public.pem). The signature field is base64-decoded
     *           into its binary representation in signature.bin, and the provenance bytes
     *           from `BuildDetails` are base64-decoded into a binary representation in
     *           signed.bin. OpenSSL can then verify the signature:
     *           `openssl sha256 -verify public.pem -signature signature.bin signed.bin`
     *     @type string $signature
     *           Required. Signature of the related `BuildProvenance`. In JSON, this is
     *           base-64 encoded.
     *     @type string $key_id
     *           An ID for the key used to sign. This could be either an ID for the key
     *           stored in `public_key` (such as the ID or fingerprint for a PGP key, or the
     *           CN for a cert), or a reference to an external key (such as a reference to a
     *           key in Cloud Key Management Service).
     *     @type int $key_type
     *           The type of the key, either stored in `public_key` or referenced in
     *           `key_id`.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Google\Devtools\Containeranalysis\V1Beta1\Build\Build::initOnce();
        parent::__construct($data);
    }

    /**
     * Public key of the builder which can be used to verify that the related
     * findings are valid and unchanged. If `key_type` is empty, this defaults
     * to PEM encoded public keys.
     * This field may be empty if `key_id` references an external key.
     * For Cloud Build based signatures, this is a PEM encoded public
     * key. To verify the Cloud Build signature, place the contents of
     * this field into a file (public.pem). The signature field is base64-decoded
     * into its binary representation in signature.bin, and the provenance bytes
     * from `BuildDetails` are base64-decoded into a binary representation in
     * signed.bin. OpenSSL can then verify the signature:
     * `openssl sha256 -verify public.pem -signature signature.bin signed.bin`
     *
     * Generated from protobuf field <code>string public_key = 1;</code>
     * @return string
     */
    public function getPublicKey()
    {
        return $this->public_key;
    }

    /**
     * Public key of the builder which can be used to verify that the related
     * findings are valid and unchanged. If `key_type` is empty, this defaults
     * to PEM encoded public keys.
     * This field may be empty if `key_id` references an external key.
     * For Cloud Build based signatures, this is a PEM encoded public
     * key. To verify the Cloud Build signature, place the contents of
     * this field into a file (public.pem). The signature field is base64-decoded
     * into its binary representation in signature.bin, and the provenance bytes
     * from `BuildDetails` are base64-decoded into a binary representation in
     * signed.bin. OpenSSL can then verify the signature:
     * `openssl sha256 -verify public.pem -signature signature.bin signed.bin`
     *
     * Generated from protobuf field <code>string public_key = 1;</code>
     * @param string $var
     * @return $this
     */
    public function setPublicKey($var)
    {
        GPBUtil::checkString($var, True);
        $this->public_key = $var;

        return $this;
    }

    /**
     * Required. Signature of the related `BuildProvenance`. In JSON, this is
     * base-64 encoded.
     *
     * Generated from protobuf field <code>bytes signature = 2;</code>
     * @return string
     */
    public function getSignature()
    {
        return $this->signature;
    }

    /**
     * Required. Signature of the related `BuildProvenance`. In JSON, this is
     * base-64 encoded.
     *
     * Generated from protobuf field <code>bytes signature = 2;</code>
     * @param string $var
     * @return $this
     */
    public function setSignature($var)
    {
        GPBUtil::checkString($var, False);
        $this->signature = $var;

        return $this;
    }

    /**
     * An ID for the key used to sign. This could be either an ID for the key
     * stored in `public_key` (such as the ID or fingerprint for a PGP key, or the
     * CN for a cert), or a reference to an external key (such as a reference to a
     * key in Cloud Key Management Service).
     *
     * Generated from protobuf field <code>string key_id = 3;</code>
     * @return string
     */
    public function getKeyId()
    {
        return $this->key_id;
    }

    /**
     * An ID for the key used to sign. This could be either an ID for the key
     * stored in `public_key` (such as the ID or fingerprint for a PGP key, or the
     * CN for a cert), or a reference to an external key (such as a reference to a
     * key in Cloud Key Management Service).
     *
     * Generated from protobuf field <code>string key_id = 3;</code>
     * @param string $var
     * @return $this
     */
    public function setKeyId($var)
    {
        GPBUtil::checkString($var, True);
        $this->key_id = $var;

        return $this;
    }

    /**
     * The type of the key, either stored in `public_key` or referenced in
     * `key_id`.
     *
     * Generated from protobuf field <code>.grafeas.v1beta1.build.BuildSignature.KeyType key_type = 4;</code>
     * @return int
     */
    public function getKeyType()
    {
        return $this->key_type;
    }

    /**
     * The type of the key, either stored in `public_key` or referenced in
     * `key_id`.
     *
     * Generated from protobuf field <code>.grafeas.v1beta1.build.BuildSignature.KeyType key_type = 4;</code>
     * @param int $var
     * @return $this
     */
    public function setKeyType($var)
    {
        GPBUtil::checkEnum($var, \Grafeas\V1beta1\Build\BuildSignature_KeyType::class);
        $this->key_type = $var;

        return $this;
    }

}

