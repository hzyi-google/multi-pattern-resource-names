# Generated by the protocol buffer compiler.  DO NOT EDIT!
# Source: google/devtools/containeranalysis/v1alpha1/containeranalysis.proto for package 'google.devtools.containeranalysis.v1alpha1'
# Original file comments:
# Copyright 2018 Google Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

require 'grpc'
require 'google/devtools/containeranalysis/v1alpha1/containeranalysis_pb'

module Google
  module Devtools
    module Containeranalysis
      module V1alpha1
        module ContainerAnalysis
          # Retrieves the results of vulnerability scanning of cloud components such as
          # container images. The Container Analysis API is an implementation of the
          # [Grafeas](grafeas.io) API.
          #
          # The vulnerability results are stored as a series of Occurrences.
          # An `Occurrence` contains information about a specific vulnerability in a
          # resource. An `Occurrence` references a `Note`. A `Note` contains details
          # about the vulnerability and is stored in a stored in a separate project.
          # Multiple `Occurrences` can reference the same `Note`. For example, an SSL
          # vulnerability could affect multiple packages in an image. In this case,
          # there would be one `Note` for the vulnerability and an `Occurrence` for
          # each package with the vulnerability referencing that `Note`.
          class Service

            include GRPC::GenericService

            self.marshal_class_method = :encode
            self.unmarshal_class_method = :decode
            self.service_name = 'google.devtools.containeranalysis.v1alpha1.ContainerAnalysis'

            # Returns the requested `Occurrence`.
            rpc :GetOccurrence, GetOccurrenceRequest, Occurrence
            # Lists active `Occurrences` for a given project matching the filters.
            rpc :ListOccurrences, ListOccurrencesRequest, ListOccurrencesResponse
            # Deletes the given `Occurrence` from the system. Use this when
            # an `Occurrence` is no longer applicable for the given resource.
            rpc :DeleteOccurrence, DeleteOccurrenceRequest, Google::Protobuf::Empty
            # Creates a new `Occurrence`. Use this method to create `Occurrences`
            # for a resource.
            rpc :CreateOccurrence, CreateOccurrenceRequest, Occurrence
            # Updates an existing occurrence.
            rpc :UpdateOccurrence, UpdateOccurrenceRequest, Occurrence
            # Gets the `Note` attached to the given `Occurrence`.
            rpc :GetOccurrenceNote, GetOccurrenceNoteRequest, Note
            # Returns the requested `Note`.
            rpc :GetNote, GetNoteRequest, Note
            # Lists all `Notes` for a given project.
            rpc :ListNotes, ListNotesRequest, ListNotesResponse
            # Deletes the given `Note` from the system.
            rpc :DeleteNote, DeleteNoteRequest, Google::Protobuf::Empty
            # Creates a new `Note`.
            rpc :CreateNote, CreateNoteRequest, Note
            # Updates an existing `Note`.
            rpc :UpdateNote, UpdateNoteRequest, Note
            # Lists `Occurrences` referencing the specified `Note`. Use this method to
            # get all occurrences referencing your `Note` across all your customer
            # projects.
            rpc :ListNoteOccurrences, ListNoteOccurrencesRequest, ListNoteOccurrencesResponse
            # Gets a summary of the number and severity of occurrences.
            rpc :GetVulnzOccurrencesSummary, GetVulnzOccurrencesSummaryRequest, GetVulnzOccurrencesSummaryResponse
            # Sets the access control policy on the specified `Note` or `Occurrence`.
            # Requires `containeranalysis.notes.setIamPolicy` or
            # `containeranalysis.occurrences.setIamPolicy` permission if the resource is
            # a `Note` or an `Occurrence`, respectively.
            # Attempting to call this method without these permissions will result in a `
            # `PERMISSION_DENIED` error.
            # Attempting to call this method on a non-existent resource will result in a
            # `NOT_FOUND` error if the user has `containeranalysis.notes.list` permission
            # on a `Note` or `containeranalysis.occurrences.list` on an `Occurrence`, or
            # a `PERMISSION_DENIED` error otherwise. The resource takes the following
            # formats: `projects/{projectid}/occurrences/{occurrenceid}` for occurrences
            # and projects/{projectid}/notes/{noteid} for notes
            rpc :SetIamPolicy, Google::Iam::V1::SetIamPolicyRequest, Google::Iam::V1::Policy
            # Gets the access control policy for a note or an `Occurrence` resource.
            # Requires `containeranalysis.notes.setIamPolicy` or
            # `containeranalysis.occurrences.setIamPolicy` permission if the resource is
            # a note or occurrence, respectively.
            # Attempting to call this method on a resource without the required
            # permission will result in a `PERMISSION_DENIED` error. Attempting to call
            # this method on a non-existent resource will result in a `NOT_FOUND` error
            # if the user has list permission on the project, or a `PERMISSION_DENIED`
            # error otherwise. The resource takes the following formats:
            # `projects/{PROJECT_ID}/occurrences/{OCCURRENCE_ID}` for occurrences and
            # projects/{PROJECT_ID}/notes/{NOTE_ID} for notes
            rpc :GetIamPolicy, Google::Iam::V1::GetIamPolicyRequest, Google::Iam::V1::Policy
            # Returns the permissions that a caller has on the specified note or
            # occurrence resource. Requires list permission on the project (for example,
            # "storage.objects.list" on the containing bucket for testing permission of
            # an object). Attempting to call this method on a non-existent resource will
            # result in a `NOT_FOUND` error if the user has list permission on the
            # project, or a `PERMISSION_DENIED` error otherwise. The resource takes the
            # following formats: `projects/{PROJECT_ID}/occurrences/{OCCURRENCE_ID}` for
            # `Occurrences` and `projects/{PROJECT_ID}/notes/{NOTE_ID}` for `Notes`
            rpc :TestIamPermissions, Google::Iam::V1::TestIamPermissionsRequest, Google::Iam::V1::TestIamPermissionsResponse
            # Creates a new `Operation`.
            rpc :CreateOperation, CreateOperationRequest, Google::Longrunning::Operation
            # Updates an existing operation returns an error if operation
            #  does not exist. The only valid operations are to update mark the done bit
            # change the result.
            rpc :UpdateOperation, UpdateOperationRequest, Google::Longrunning::Operation
            # Gets a specific scan configuration for a project.
            rpc :GetScanConfig, GetScanConfigRequest, ScanConfig
            # Lists scan configurations for a project.
            rpc :ListScanConfigs, ListScanConfigsRequest, ListScanConfigsResponse
            # Updates the scan configuration to a new value.
            rpc :UpdateScanConfig, UpdateScanConfigRequest, ScanConfig
          end

          Stub = Service.rpc_stub_class
        end
      end
    end
  end
end
