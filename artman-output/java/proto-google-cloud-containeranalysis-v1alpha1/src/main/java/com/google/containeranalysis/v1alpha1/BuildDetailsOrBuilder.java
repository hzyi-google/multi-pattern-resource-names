// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/devtools/containeranalysis/v1alpha1/containeranalysis.proto

package com.google.containeranalysis.v1alpha1;

public interface BuildDetailsOrBuilder extends
    // @@protoc_insertion_point(interface_extends:google.devtools.containeranalysis.v1alpha1.BuildDetails)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * The actual provenance
   * </pre>
   *
   * <code>.google.devtools.containeranalysis.v1alpha1.BuildProvenance provenance = 1;</code>
   */
  boolean hasProvenance();
  /**
   * <pre>
   * The actual provenance
   * </pre>
   *
   * <code>.google.devtools.containeranalysis.v1alpha1.BuildProvenance provenance = 1;</code>
   */
  com.google.containeranalysis.v1alpha1.BuildProvenance getProvenance();
  /**
   * <pre>
   * The actual provenance
   * </pre>
   *
   * <code>.google.devtools.containeranalysis.v1alpha1.BuildProvenance provenance = 1;</code>
   */
  com.google.containeranalysis.v1alpha1.BuildProvenanceOrBuilder getProvenanceOrBuilder();

  /**
   * <pre>
   * Serialized JSON representation of the provenance, used in generating the
   * `BuildSignature` in the corresponding Result. After verifying the
   * signature, `provenance_bytes` can be unmarshalled and compared to the
   * provenance to confirm that it is unchanged. A base64-encoded string
   * representation of the provenance bytes is used for the signature in order
   * to interoperate with openssl which expects this format for signature
   * verification.
   * The serialized form is captured both to avoid ambiguity in how the
   * provenance is marshalled to json as well to prevent incompatibilities with
   * future changes.
   * </pre>
   *
   * <code>string provenance_bytes = 2;</code>
   */
  java.lang.String getProvenanceBytes();
  /**
   * <pre>
   * Serialized JSON representation of the provenance, used in generating the
   * `BuildSignature` in the corresponding Result. After verifying the
   * signature, `provenance_bytes` can be unmarshalled and compared to the
   * provenance to confirm that it is unchanged. A base64-encoded string
   * representation of the provenance bytes is used for the signature in order
   * to interoperate with openssl which expects this format for signature
   * verification.
   * The serialized form is captured both to avoid ambiguity in how the
   * provenance is marshalled to json as well to prevent incompatibilities with
   * future changes.
   * </pre>
   *
   * <code>string provenance_bytes = 2;</code>
   */
  com.google.protobuf.ByteString
      getProvenanceBytesBytes();
}
