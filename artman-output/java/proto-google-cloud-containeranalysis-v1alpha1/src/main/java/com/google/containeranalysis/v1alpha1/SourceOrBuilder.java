// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/devtools/containeranalysis/v1alpha1/provenance.proto

package com.google.containeranalysis.v1alpha1;

public interface SourceOrBuilder extends
    // @@protoc_insertion_point(interface_extends:google.devtools.containeranalysis.v1alpha1.Source)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * If provided, get the source from this location in in Google Cloud
   * Storage.
   * </pre>
   *
   * <code>.google.devtools.containeranalysis.v1alpha1.StorageSource storage_source = 1;</code>
   */
  boolean hasStorageSource();
  /**
   * <pre>
   * If provided, get the source from this location in in Google Cloud
   * Storage.
   * </pre>
   *
   * <code>.google.devtools.containeranalysis.v1alpha1.StorageSource storage_source = 1;</code>
   */
  com.google.containeranalysis.v1alpha1.StorageSource getStorageSource();
  /**
   * <pre>
   * If provided, get the source from this location in in Google Cloud
   * Storage.
   * </pre>
   *
   * <code>.google.devtools.containeranalysis.v1alpha1.StorageSource storage_source = 1;</code>
   */
  com.google.containeranalysis.v1alpha1.StorageSourceOrBuilder getStorageSourceOrBuilder();

  /**
   * <pre>
   * If provided, get source from this location in a Cloud Repo.
   * </pre>
   *
   * <code>.google.devtools.containeranalysis.v1alpha1.RepoSource repo_source = 2;</code>
   */
  boolean hasRepoSource();
  /**
   * <pre>
   * If provided, get source from this location in a Cloud Repo.
   * </pre>
   *
   * <code>.google.devtools.containeranalysis.v1alpha1.RepoSource repo_source = 2;</code>
   */
  com.google.containeranalysis.v1alpha1.RepoSource getRepoSource();
  /**
   * <pre>
   * If provided, get source from this location in a Cloud Repo.
   * </pre>
   *
   * <code>.google.devtools.containeranalysis.v1alpha1.RepoSource repo_source = 2;</code>
   */
  com.google.containeranalysis.v1alpha1.RepoSourceOrBuilder getRepoSourceOrBuilder();

  /**
   * <pre>
   * If provided, the input binary artifacts for the build came from this
   * location.
   * </pre>
   *
   * <code>.google.devtools.containeranalysis.v1alpha1.StorageSource artifact_storage_source = 4;</code>
   */
  boolean hasArtifactStorageSource();
  /**
   * <pre>
   * If provided, the input binary artifacts for the build came from this
   * location.
   * </pre>
   *
   * <code>.google.devtools.containeranalysis.v1alpha1.StorageSource artifact_storage_source = 4;</code>
   */
  com.google.containeranalysis.v1alpha1.StorageSource getArtifactStorageSource();
  /**
   * <pre>
   * If provided, the input binary artifacts for the build came from this
   * location.
   * </pre>
   *
   * <code>.google.devtools.containeranalysis.v1alpha1.StorageSource artifact_storage_source = 4;</code>
   */
  com.google.containeranalysis.v1alpha1.StorageSourceOrBuilder getArtifactStorageSourceOrBuilder();

  /**
   * <pre>
   * Hash(es) of the build source, which can be used to verify that the original
   * source integrity was maintained in the build.
   * The keys to this map are file paths used as build source and the values
   * contain the hash values for those files.
   * If the build source came in a single package such as a gzipped tarfile
   * (.tar.gz), the FileHash will be for the single path to that file.
   * </pre>
   *
   * <code>map&lt;string, .google.devtools.containeranalysis.v1alpha1.FileHashes&gt; file_hashes = 3;</code>
   */
  int getFileHashesCount();
  /**
   * <pre>
   * Hash(es) of the build source, which can be used to verify that the original
   * source integrity was maintained in the build.
   * The keys to this map are file paths used as build source and the values
   * contain the hash values for those files.
   * If the build source came in a single package such as a gzipped tarfile
   * (.tar.gz), the FileHash will be for the single path to that file.
   * </pre>
   *
   * <code>map&lt;string, .google.devtools.containeranalysis.v1alpha1.FileHashes&gt; file_hashes = 3;</code>
   */
  boolean containsFileHashes(
      java.lang.String key);
  /**
   * Use {@link #getFileHashesMap()} instead.
   */
  @java.lang.Deprecated
  java.util.Map<java.lang.String, com.google.containeranalysis.v1alpha1.FileHashes>
  getFileHashes();
  /**
   * <pre>
   * Hash(es) of the build source, which can be used to verify that the original
   * source integrity was maintained in the build.
   * The keys to this map are file paths used as build source and the values
   * contain the hash values for those files.
   * If the build source came in a single package such as a gzipped tarfile
   * (.tar.gz), the FileHash will be for the single path to that file.
   * </pre>
   *
   * <code>map&lt;string, .google.devtools.containeranalysis.v1alpha1.FileHashes&gt; file_hashes = 3;</code>
   */
  java.util.Map<java.lang.String, com.google.containeranalysis.v1alpha1.FileHashes>
  getFileHashesMap();
  /**
   * <pre>
   * Hash(es) of the build source, which can be used to verify that the original
   * source integrity was maintained in the build.
   * The keys to this map are file paths used as build source and the values
   * contain the hash values for those files.
   * If the build source came in a single package such as a gzipped tarfile
   * (.tar.gz), the FileHash will be for the single path to that file.
   * </pre>
   *
   * <code>map&lt;string, .google.devtools.containeranalysis.v1alpha1.FileHashes&gt; file_hashes = 3;</code>
   */

  com.google.containeranalysis.v1alpha1.FileHashes getFileHashesOrDefault(
      java.lang.String key,
      com.google.containeranalysis.v1alpha1.FileHashes defaultValue);
  /**
   * <pre>
   * Hash(es) of the build source, which can be used to verify that the original
   * source integrity was maintained in the build.
   * The keys to this map are file paths used as build source and the values
   * contain the hash values for those files.
   * If the build source came in a single package such as a gzipped tarfile
   * (.tar.gz), the FileHash will be for the single path to that file.
   * </pre>
   *
   * <code>map&lt;string, .google.devtools.containeranalysis.v1alpha1.FileHashes&gt; file_hashes = 3;</code>
   */

  com.google.containeranalysis.v1alpha1.FileHashes getFileHashesOrThrow(
      java.lang.String key);

  /**
   * <pre>
   * If provided, the source code used for the build came from this location.
   * </pre>
   *
   * <code>.google.devtools.containeranalysis.v1alpha1.SourceContext context = 7;</code>
   */
  boolean hasContext();
  /**
   * <pre>
   * If provided, the source code used for the build came from this location.
   * </pre>
   *
   * <code>.google.devtools.containeranalysis.v1alpha1.SourceContext context = 7;</code>
   */
  com.google.containeranalysis.v1alpha1.SourceContext getContext();
  /**
   * <pre>
   * If provided, the source code used for the build came from this location.
   * </pre>
   *
   * <code>.google.devtools.containeranalysis.v1alpha1.SourceContext context = 7;</code>
   */
  com.google.containeranalysis.v1alpha1.SourceContextOrBuilder getContextOrBuilder();

  /**
   * <pre>
   * If provided, some of the source code used for the build may be found in
   * these locations, in the case where the source repository had multiple
   * remotes or submodules. This list will not include the context specified in
   * the context field.
   * </pre>
   *
   * <code>repeated .google.devtools.containeranalysis.v1alpha1.SourceContext additional_contexts = 8;</code>
   */
  java.util.List<com.google.containeranalysis.v1alpha1.SourceContext> 
      getAdditionalContextsList();
  /**
   * <pre>
   * If provided, some of the source code used for the build may be found in
   * these locations, in the case where the source repository had multiple
   * remotes or submodules. This list will not include the context specified in
   * the context field.
   * </pre>
   *
   * <code>repeated .google.devtools.containeranalysis.v1alpha1.SourceContext additional_contexts = 8;</code>
   */
  com.google.containeranalysis.v1alpha1.SourceContext getAdditionalContexts(int index);
  /**
   * <pre>
   * If provided, some of the source code used for the build may be found in
   * these locations, in the case where the source repository had multiple
   * remotes or submodules. This list will not include the context specified in
   * the context field.
   * </pre>
   *
   * <code>repeated .google.devtools.containeranalysis.v1alpha1.SourceContext additional_contexts = 8;</code>
   */
  int getAdditionalContextsCount();
  /**
   * <pre>
   * If provided, some of the source code used for the build may be found in
   * these locations, in the case where the source repository had multiple
   * remotes or submodules. This list will not include the context specified in
   * the context field.
   * </pre>
   *
   * <code>repeated .google.devtools.containeranalysis.v1alpha1.SourceContext additional_contexts = 8;</code>
   */
  java.util.List<? extends com.google.containeranalysis.v1alpha1.SourceContextOrBuilder> 
      getAdditionalContextsOrBuilderList();
  /**
   * <pre>
   * If provided, some of the source code used for the build may be found in
   * these locations, in the case where the source repository had multiple
   * remotes or submodules. This list will not include the context specified in
   * the context field.
   * </pre>
   *
   * <code>repeated .google.devtools.containeranalysis.v1alpha1.SourceContext additional_contexts = 8;</code>
   */
  com.google.containeranalysis.v1alpha1.SourceContextOrBuilder getAdditionalContextsOrBuilder(
      int index);

  public com.google.containeranalysis.v1alpha1.Source.SourceCase getSourceCase();
}
