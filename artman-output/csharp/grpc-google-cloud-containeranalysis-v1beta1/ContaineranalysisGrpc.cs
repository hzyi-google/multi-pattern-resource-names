// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: google/devtools/containeranalysis/v1beta1/containeranalysis.proto
// </auto-generated>
// Original file comments:
// Copyright 2018 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Google.Devtools.Containeranalysis.V1Beta1 {
  /// <summary>
  /// Retrieves analysis results of Cloud components such as Docker container
  /// images. The Container Analysis API is an implementation of the
  /// [Grafeas](grafeas.io) API.
  ///
  /// Analysis results are stored as a series of occurrences. An `Occurrence`
  /// contains information about a specific analysis instance on a resource. An
  /// occurrence refers to a `Note`. A note contains details describing the
  /// analysis and is generally stored in a separate project, called a `Provider`.
  /// Multiple occurrences can refer to the same note.
  ///
  /// For example, an SSL vulnerability could affect multiple images. In this case,
  /// there would be one note for the vulnerability and an occurrence for each
  /// image with the vulnerability referring to that note.
  /// </summary>
  public static partial class ContainerAnalysisV1Beta1
  {
    static readonly string __ServiceName = "google.devtools.containeranalysis.v1beta1.ContainerAnalysisV1Beta1";

    static readonly grpc::Marshaller<global::Google.Cloud.Iam.V1.SetIamPolicyRequest> __Marshaller_google_iam_v1_SetIamPolicyRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Iam.V1.SetIamPolicyRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Iam.V1.Policy> __Marshaller_google_iam_v1_Policy = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Iam.V1.Policy.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Iam.V1.GetIamPolicyRequest> __Marshaller_google_iam_v1_GetIamPolicyRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Iam.V1.GetIamPolicyRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Iam.V1.TestIamPermissionsRequest> __Marshaller_google_iam_v1_TestIamPermissionsRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Iam.V1.TestIamPermissionsRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Iam.V1.TestIamPermissionsResponse> __Marshaller_google_iam_v1_TestIamPermissionsResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Iam.V1.TestIamPermissionsResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Devtools.Containeranalysis.V1Beta1.GetScanConfigRequest> __Marshaller_google_devtools_containeranalysis_v1beta1_GetScanConfigRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Devtools.Containeranalysis.V1Beta1.GetScanConfigRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Devtools.Containeranalysis.V1Beta1.ScanConfig> __Marshaller_google_devtools_containeranalysis_v1beta1_ScanConfig = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Devtools.Containeranalysis.V1Beta1.ScanConfig.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Devtools.Containeranalysis.V1Beta1.ListScanConfigsRequest> __Marshaller_google_devtools_containeranalysis_v1beta1_ListScanConfigsRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Devtools.Containeranalysis.V1Beta1.ListScanConfigsRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Devtools.Containeranalysis.V1Beta1.ListScanConfigsResponse> __Marshaller_google_devtools_containeranalysis_v1beta1_ListScanConfigsResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Devtools.Containeranalysis.V1Beta1.ListScanConfigsResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Devtools.Containeranalysis.V1Beta1.UpdateScanConfigRequest> __Marshaller_google_devtools_containeranalysis_v1beta1_UpdateScanConfigRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Devtools.Containeranalysis.V1Beta1.UpdateScanConfigRequest.Parser.ParseFrom);

    static readonly grpc::Method<global::Google.Cloud.Iam.V1.SetIamPolicyRequest, global::Google.Cloud.Iam.V1.Policy> __Method_SetIamPolicy = new grpc::Method<global::Google.Cloud.Iam.V1.SetIamPolicyRequest, global::Google.Cloud.Iam.V1.Policy>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SetIamPolicy",
        __Marshaller_google_iam_v1_SetIamPolicyRequest,
        __Marshaller_google_iam_v1_Policy);

    static readonly grpc::Method<global::Google.Cloud.Iam.V1.GetIamPolicyRequest, global::Google.Cloud.Iam.V1.Policy> __Method_GetIamPolicy = new grpc::Method<global::Google.Cloud.Iam.V1.GetIamPolicyRequest, global::Google.Cloud.Iam.V1.Policy>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetIamPolicy",
        __Marshaller_google_iam_v1_GetIamPolicyRequest,
        __Marshaller_google_iam_v1_Policy);

    static readonly grpc::Method<global::Google.Cloud.Iam.V1.TestIamPermissionsRequest, global::Google.Cloud.Iam.V1.TestIamPermissionsResponse> __Method_TestIamPermissions = new grpc::Method<global::Google.Cloud.Iam.V1.TestIamPermissionsRequest, global::Google.Cloud.Iam.V1.TestIamPermissionsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "TestIamPermissions",
        __Marshaller_google_iam_v1_TestIamPermissionsRequest,
        __Marshaller_google_iam_v1_TestIamPermissionsResponse);

    static readonly grpc::Method<global::Google.Devtools.Containeranalysis.V1Beta1.GetScanConfigRequest, global::Google.Devtools.Containeranalysis.V1Beta1.ScanConfig> __Method_GetScanConfig = new grpc::Method<global::Google.Devtools.Containeranalysis.V1Beta1.GetScanConfigRequest, global::Google.Devtools.Containeranalysis.V1Beta1.ScanConfig>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetScanConfig",
        __Marshaller_google_devtools_containeranalysis_v1beta1_GetScanConfigRequest,
        __Marshaller_google_devtools_containeranalysis_v1beta1_ScanConfig);

    static readonly grpc::Method<global::Google.Devtools.Containeranalysis.V1Beta1.ListScanConfigsRequest, global::Google.Devtools.Containeranalysis.V1Beta1.ListScanConfigsResponse> __Method_ListScanConfigs = new grpc::Method<global::Google.Devtools.Containeranalysis.V1Beta1.ListScanConfigsRequest, global::Google.Devtools.Containeranalysis.V1Beta1.ListScanConfigsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListScanConfigs",
        __Marshaller_google_devtools_containeranalysis_v1beta1_ListScanConfigsRequest,
        __Marshaller_google_devtools_containeranalysis_v1beta1_ListScanConfigsResponse);

    static readonly grpc::Method<global::Google.Devtools.Containeranalysis.V1Beta1.UpdateScanConfigRequest, global::Google.Devtools.Containeranalysis.V1Beta1.ScanConfig> __Method_UpdateScanConfig = new grpc::Method<global::Google.Devtools.Containeranalysis.V1Beta1.UpdateScanConfigRequest, global::Google.Devtools.Containeranalysis.V1Beta1.ScanConfig>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateScanConfig",
        __Marshaller_google_devtools_containeranalysis_v1beta1_UpdateScanConfigRequest,
        __Marshaller_google_devtools_containeranalysis_v1beta1_ScanConfig);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Google.Devtools.Containeranalysis.V1Beta1.ContaineranalysisReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of ContainerAnalysisV1Beta1</summary>
    public abstract partial class ContainerAnalysisV1Beta1Base
    {
      /// <summary>
      /// Sets the access control policy on the specified note or occurrence.
      /// Requires `containeranalysis.notes.setIamPolicy` or
      /// `containeranalysis.occurrences.setIamPolicy` permission if the resource is
      /// a note or an occurrence, respectively.
      ///
      /// The resource takes the format `projects/[PROJECT_ID]/notes/[NOTE_ID]` for
      /// notes and `projects/[PROJECT_ID]/occurrences/[OCCURRENCE_ID]` for
      /// occurrences.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Iam.V1.Policy> SetIamPolicy(global::Google.Cloud.Iam.V1.SetIamPolicyRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Gets the access control policy for a note or an occurrence resource.
      /// Requires `containeranalysis.notes.setIamPolicy` or
      /// `containeranalysis.occurrences.setIamPolicy` permission if the resource is
      /// a note or occurrence, respectively.
      ///
      /// The resource takes the format `projects/[PROJECT_ID]/notes/[NOTE_ID]` for
      /// notes and `projects/[PROJECT_ID]/occurrences/[OCCURRENCE_ID]` for
      /// occurrences.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Iam.V1.Policy> GetIamPolicy(global::Google.Cloud.Iam.V1.GetIamPolicyRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Returns the permissions that a caller has on the specified note or
      /// occurrence. Requires list permission on the project (for example,
      /// `containeranalysis.notes.list`).
      ///
      /// The resource takes the format `projects/[PROJECT_ID]/notes/[NOTE_ID]` for
      /// notes and `projects/[PROJECT_ID]/occurrences/[OCCURRENCE_ID]` for
      /// occurrences.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Iam.V1.TestIamPermissionsResponse> TestIamPermissions(global::Google.Cloud.Iam.V1.TestIamPermissionsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Gets the specified scan configuration.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Devtools.Containeranalysis.V1Beta1.ScanConfig> GetScanConfig(global::Google.Devtools.Containeranalysis.V1Beta1.GetScanConfigRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Lists scan configurations for the specified project.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Devtools.Containeranalysis.V1Beta1.ListScanConfigsResponse> ListScanConfigs(global::Google.Devtools.Containeranalysis.V1Beta1.ListScanConfigsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Updates the specified scan configuration.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Devtools.Containeranalysis.V1Beta1.ScanConfig> UpdateScanConfig(global::Google.Devtools.Containeranalysis.V1Beta1.UpdateScanConfigRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for ContainerAnalysisV1Beta1</summary>
    public partial class ContainerAnalysisV1Beta1Client : grpc::ClientBase<ContainerAnalysisV1Beta1Client>
    {
      /// <summary>Creates a new client for ContainerAnalysisV1Beta1</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public ContainerAnalysisV1Beta1Client(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for ContainerAnalysisV1Beta1 that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public ContainerAnalysisV1Beta1Client(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected ContainerAnalysisV1Beta1Client() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected ContainerAnalysisV1Beta1Client(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Sets the access control policy on the specified note or occurrence.
      /// Requires `containeranalysis.notes.setIamPolicy` or
      /// `containeranalysis.occurrences.setIamPolicy` permission if the resource is
      /// a note or an occurrence, respectively.
      ///
      /// The resource takes the format `projects/[PROJECT_ID]/notes/[NOTE_ID]` for
      /// notes and `projects/[PROJECT_ID]/occurrences/[OCCURRENCE_ID]` for
      /// occurrences.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Iam.V1.Policy SetIamPolicy(global::Google.Cloud.Iam.V1.SetIamPolicyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetIamPolicy(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Sets the access control policy on the specified note or occurrence.
      /// Requires `containeranalysis.notes.setIamPolicy` or
      /// `containeranalysis.occurrences.setIamPolicy` permission if the resource is
      /// a note or an occurrence, respectively.
      ///
      /// The resource takes the format `projects/[PROJECT_ID]/notes/[NOTE_ID]` for
      /// notes and `projects/[PROJECT_ID]/occurrences/[OCCURRENCE_ID]` for
      /// occurrences.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Iam.V1.Policy SetIamPolicy(global::Google.Cloud.Iam.V1.SetIamPolicyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SetIamPolicy, null, options, request);
      }
      /// <summary>
      /// Sets the access control policy on the specified note or occurrence.
      /// Requires `containeranalysis.notes.setIamPolicy` or
      /// `containeranalysis.occurrences.setIamPolicy` permission if the resource is
      /// a note or an occurrence, respectively.
      ///
      /// The resource takes the format `projects/[PROJECT_ID]/notes/[NOTE_ID]` for
      /// notes and `projects/[PROJECT_ID]/occurrences/[OCCURRENCE_ID]` for
      /// occurrences.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Iam.V1.Policy> SetIamPolicyAsync(global::Google.Cloud.Iam.V1.SetIamPolicyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetIamPolicyAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Sets the access control policy on the specified note or occurrence.
      /// Requires `containeranalysis.notes.setIamPolicy` or
      /// `containeranalysis.occurrences.setIamPolicy` permission if the resource is
      /// a note or an occurrence, respectively.
      ///
      /// The resource takes the format `projects/[PROJECT_ID]/notes/[NOTE_ID]` for
      /// notes and `projects/[PROJECT_ID]/occurrences/[OCCURRENCE_ID]` for
      /// occurrences.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Iam.V1.Policy> SetIamPolicyAsync(global::Google.Cloud.Iam.V1.SetIamPolicyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SetIamPolicy, null, options, request);
      }
      /// <summary>
      /// Gets the access control policy for a note or an occurrence resource.
      /// Requires `containeranalysis.notes.setIamPolicy` or
      /// `containeranalysis.occurrences.setIamPolicy` permission if the resource is
      /// a note or occurrence, respectively.
      ///
      /// The resource takes the format `projects/[PROJECT_ID]/notes/[NOTE_ID]` for
      /// notes and `projects/[PROJECT_ID]/occurrences/[OCCURRENCE_ID]` for
      /// occurrences.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Iam.V1.Policy GetIamPolicy(global::Google.Cloud.Iam.V1.GetIamPolicyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetIamPolicy(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets the access control policy for a note or an occurrence resource.
      /// Requires `containeranalysis.notes.setIamPolicy` or
      /// `containeranalysis.occurrences.setIamPolicy` permission if the resource is
      /// a note or occurrence, respectively.
      ///
      /// The resource takes the format `projects/[PROJECT_ID]/notes/[NOTE_ID]` for
      /// notes and `projects/[PROJECT_ID]/occurrences/[OCCURRENCE_ID]` for
      /// occurrences.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Iam.V1.Policy GetIamPolicy(global::Google.Cloud.Iam.V1.GetIamPolicyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetIamPolicy, null, options, request);
      }
      /// <summary>
      /// Gets the access control policy for a note or an occurrence resource.
      /// Requires `containeranalysis.notes.setIamPolicy` or
      /// `containeranalysis.occurrences.setIamPolicy` permission if the resource is
      /// a note or occurrence, respectively.
      ///
      /// The resource takes the format `projects/[PROJECT_ID]/notes/[NOTE_ID]` for
      /// notes and `projects/[PROJECT_ID]/occurrences/[OCCURRENCE_ID]` for
      /// occurrences.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Iam.V1.Policy> GetIamPolicyAsync(global::Google.Cloud.Iam.V1.GetIamPolicyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetIamPolicyAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets the access control policy for a note or an occurrence resource.
      /// Requires `containeranalysis.notes.setIamPolicy` or
      /// `containeranalysis.occurrences.setIamPolicy` permission if the resource is
      /// a note or occurrence, respectively.
      ///
      /// The resource takes the format `projects/[PROJECT_ID]/notes/[NOTE_ID]` for
      /// notes and `projects/[PROJECT_ID]/occurrences/[OCCURRENCE_ID]` for
      /// occurrences.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Iam.V1.Policy> GetIamPolicyAsync(global::Google.Cloud.Iam.V1.GetIamPolicyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetIamPolicy, null, options, request);
      }
      /// <summary>
      /// Returns the permissions that a caller has on the specified note or
      /// occurrence. Requires list permission on the project (for example,
      /// `containeranalysis.notes.list`).
      ///
      /// The resource takes the format `projects/[PROJECT_ID]/notes/[NOTE_ID]` for
      /// notes and `projects/[PROJECT_ID]/occurrences/[OCCURRENCE_ID]` for
      /// occurrences.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Iam.V1.TestIamPermissionsResponse TestIamPermissions(global::Google.Cloud.Iam.V1.TestIamPermissionsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return TestIamPermissions(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns the permissions that a caller has on the specified note or
      /// occurrence. Requires list permission on the project (for example,
      /// `containeranalysis.notes.list`).
      ///
      /// The resource takes the format `projects/[PROJECT_ID]/notes/[NOTE_ID]` for
      /// notes and `projects/[PROJECT_ID]/occurrences/[OCCURRENCE_ID]` for
      /// occurrences.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Iam.V1.TestIamPermissionsResponse TestIamPermissions(global::Google.Cloud.Iam.V1.TestIamPermissionsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_TestIamPermissions, null, options, request);
      }
      /// <summary>
      /// Returns the permissions that a caller has on the specified note or
      /// occurrence. Requires list permission on the project (for example,
      /// `containeranalysis.notes.list`).
      ///
      /// The resource takes the format `projects/[PROJECT_ID]/notes/[NOTE_ID]` for
      /// notes and `projects/[PROJECT_ID]/occurrences/[OCCURRENCE_ID]` for
      /// occurrences.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Iam.V1.TestIamPermissionsResponse> TestIamPermissionsAsync(global::Google.Cloud.Iam.V1.TestIamPermissionsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return TestIamPermissionsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns the permissions that a caller has on the specified note or
      /// occurrence. Requires list permission on the project (for example,
      /// `containeranalysis.notes.list`).
      ///
      /// The resource takes the format `projects/[PROJECT_ID]/notes/[NOTE_ID]` for
      /// notes and `projects/[PROJECT_ID]/occurrences/[OCCURRENCE_ID]` for
      /// occurrences.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Iam.V1.TestIamPermissionsResponse> TestIamPermissionsAsync(global::Google.Cloud.Iam.V1.TestIamPermissionsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_TestIamPermissions, null, options, request);
      }
      /// <summary>
      /// Gets the specified scan configuration.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Devtools.Containeranalysis.V1Beta1.ScanConfig GetScanConfig(global::Google.Devtools.Containeranalysis.V1Beta1.GetScanConfigRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetScanConfig(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets the specified scan configuration.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Devtools.Containeranalysis.V1Beta1.ScanConfig GetScanConfig(global::Google.Devtools.Containeranalysis.V1Beta1.GetScanConfigRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetScanConfig, null, options, request);
      }
      /// <summary>
      /// Gets the specified scan configuration.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Devtools.Containeranalysis.V1Beta1.ScanConfig> GetScanConfigAsync(global::Google.Devtools.Containeranalysis.V1Beta1.GetScanConfigRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetScanConfigAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets the specified scan configuration.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Devtools.Containeranalysis.V1Beta1.ScanConfig> GetScanConfigAsync(global::Google.Devtools.Containeranalysis.V1Beta1.GetScanConfigRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetScanConfig, null, options, request);
      }
      /// <summary>
      /// Lists scan configurations for the specified project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Devtools.Containeranalysis.V1Beta1.ListScanConfigsResponse ListScanConfigs(global::Google.Devtools.Containeranalysis.V1Beta1.ListScanConfigsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListScanConfigs(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists scan configurations for the specified project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Devtools.Containeranalysis.V1Beta1.ListScanConfigsResponse ListScanConfigs(global::Google.Devtools.Containeranalysis.V1Beta1.ListScanConfigsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListScanConfigs, null, options, request);
      }
      /// <summary>
      /// Lists scan configurations for the specified project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Devtools.Containeranalysis.V1Beta1.ListScanConfigsResponse> ListScanConfigsAsync(global::Google.Devtools.Containeranalysis.V1Beta1.ListScanConfigsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListScanConfigsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists scan configurations for the specified project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Devtools.Containeranalysis.V1Beta1.ListScanConfigsResponse> ListScanConfigsAsync(global::Google.Devtools.Containeranalysis.V1Beta1.ListScanConfigsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListScanConfigs, null, options, request);
      }
      /// <summary>
      /// Updates the specified scan configuration.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Devtools.Containeranalysis.V1Beta1.ScanConfig UpdateScanConfig(global::Google.Devtools.Containeranalysis.V1Beta1.UpdateScanConfigRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateScanConfig(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates the specified scan configuration.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Devtools.Containeranalysis.V1Beta1.ScanConfig UpdateScanConfig(global::Google.Devtools.Containeranalysis.V1Beta1.UpdateScanConfigRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateScanConfig, null, options, request);
      }
      /// <summary>
      /// Updates the specified scan configuration.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Devtools.Containeranalysis.V1Beta1.ScanConfig> UpdateScanConfigAsync(global::Google.Devtools.Containeranalysis.V1Beta1.UpdateScanConfigRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateScanConfigAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates the specified scan configuration.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Devtools.Containeranalysis.V1Beta1.ScanConfig> UpdateScanConfigAsync(global::Google.Devtools.Containeranalysis.V1Beta1.UpdateScanConfigRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateScanConfig, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override ContainerAnalysisV1Beta1Client NewInstance(ClientBaseConfiguration configuration)
      {
        return new ContainerAnalysisV1Beta1Client(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(ContainerAnalysisV1Beta1Base serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_SetIamPolicy, serviceImpl.SetIamPolicy)
          .AddMethod(__Method_GetIamPolicy, serviceImpl.GetIamPolicy)
          .AddMethod(__Method_TestIamPermissions, serviceImpl.TestIamPermissions)
          .AddMethod(__Method_GetScanConfig, serviceImpl.GetScanConfig)
          .AddMethod(__Method_ListScanConfigs, serviceImpl.ListScanConfigs)
          .AddMethod(__Method_UpdateScanConfig, serviceImpl.UpdateScanConfig).Build();
    }

    /// <summary>Register service method implementations with a service binder. Useful when customizing the service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, ContainerAnalysisV1Beta1Base serviceImpl)
    {
      serviceBinder.AddMethod(__Method_SetIamPolicy, serviceImpl.SetIamPolicy);
      serviceBinder.AddMethod(__Method_GetIamPolicy, serviceImpl.GetIamPolicy);
      serviceBinder.AddMethod(__Method_TestIamPermissions, serviceImpl.TestIamPermissions);
      serviceBinder.AddMethod(__Method_GetScanConfig, serviceImpl.GetScanConfig);
      serviceBinder.AddMethod(__Method_ListScanConfigs, serviceImpl.ListScanConfigs);
      serviceBinder.AddMethod(__Method_UpdateScanConfig, serviceImpl.UpdateScanConfig);
    }

  }
}
#endregion
