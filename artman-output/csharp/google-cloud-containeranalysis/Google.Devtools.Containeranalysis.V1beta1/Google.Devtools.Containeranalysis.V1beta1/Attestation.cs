// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: google/devtools/containeranalysis/v1beta1/attestation/attestation.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Grafeas.V1Beta1.Attestation {

  /// <summary>Holder for reflection information generated from google/devtools/containeranalysis/v1beta1/attestation/attestation.proto</summary>
  public static partial class AttestationReflection {

    #region Descriptor
    /// <summary>File descriptor for google/devtools/containeranalysis/v1beta1/attestation/attestation.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static AttestationReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ckdnb29nbGUvZGV2dG9vbHMvY29udGFpbmVyYW5hbHlzaXMvdjFiZXRhMS9h",
            "dHRlc3RhdGlvbi9hdHRlc3RhdGlvbi5wcm90bxIbZ3JhZmVhcy52MWJldGEx",
            "LmF0dGVzdGF0aW9uIuQBChRQZ3BTaWduZWRBdHRlc3RhdGlvbhIRCglzaWdu",
            "YXR1cmUYASABKAkSUwoMY29udGVudF90eXBlGAMgASgOMj0uZ3JhZmVhcy52",
            "MWJldGExLmF0dGVzdGF0aW9uLlBncFNpZ25lZEF0dGVzdGF0aW9uLkNvbnRl",
            "bnRUeXBlEhQKCnBncF9rZXlfaWQYAiABKAlIACJECgtDb250ZW50VHlwZRIc",
            "ChhDT05URU5UX1RZUEVfVU5TUEVDSUZJRUQQABIXChNTSU1QTEVfU0lHTklO",
            "R19KU09OEAFCCAoGa2V5X2lkImsKCUF1dGhvcml0eRI5CgRoaW50GAEgASgL",
            "MisuZ3JhZmVhcy52MWJldGExLmF0dGVzdGF0aW9uLkF1dGhvcml0eS5IaW50",
            "GiMKBEhpbnQSGwoTaHVtYW5fcmVhZGFibGVfbmFtZRgBIAEoCSJICgdEZXRh",
            "aWxzEj0KC2F0dGVzdGF0aW9uGAEgASgLMiguZ3JhZmVhcy52MWJldGExLmF0",
            "dGVzdGF0aW9uLkF0dGVzdGF0aW9uIm8KC0F0dGVzdGF0aW9uElMKFnBncF9z",
            "aWduZWRfYXR0ZXN0YXRpb24YASABKAsyMS5ncmFmZWFzLnYxYmV0YTEuYXR0",
            "ZXN0YXRpb24uUGdwU2lnbmVkQXR0ZXN0YXRpb25IAEILCglzaWduYXR1cmVC",
            "igEKHmlvLmdyYWZlYXMudjFiZXRhMS5hdHRlc3RhdGlvblABWmBnb29nbGUu",
            "Z29sYW5nLm9yZy9nZW5wcm90by9nb29nbGVhcGlzL2RldnRvb2xzL2NvbnRh",
            "aW5lcmFuYWx5c2lzL3YxYmV0YTEvYXR0ZXN0YXRpb247YXR0ZXN0YXRpb26i",
            "AgNHUkFiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Grafeas.V1Beta1.Attestation.PgpSignedAttestation), global::Grafeas.V1Beta1.Attestation.PgpSignedAttestation.Parser, new[]{ "Signature", "ContentType", "PgpKeyId" }, new[]{ "KeyId" }, new[]{ typeof(global::Grafeas.V1Beta1.Attestation.PgpSignedAttestation.Types.ContentType) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Grafeas.V1Beta1.Attestation.Authority), global::Grafeas.V1Beta1.Attestation.Authority.Parser, new[]{ "Hint" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Grafeas.V1Beta1.Attestation.Authority.Types.Hint), global::Grafeas.V1Beta1.Attestation.Authority.Types.Hint.Parser, new[]{ "HumanReadableName" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Grafeas.V1Beta1.Attestation.Details), global::Grafeas.V1Beta1.Attestation.Details.Parser, new[]{ "Attestation" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Grafeas.V1Beta1.Attestation.Attestation), global::Grafeas.V1Beta1.Attestation.Attestation.Parser, new[]{ "PgpSignedAttestation" }, new[]{ "Signature" }, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// An attestation wrapper with a PGP-compatible signature. This message only
  /// supports `ATTACHED` signatures, where the payload that is signed is included
  /// alongside the signature itself in the same file.
  /// </summary>
  public sealed partial class PgpSignedAttestation : pb::IMessage<PgpSignedAttestation> {
    private static readonly pb::MessageParser<PgpSignedAttestation> _parser = new pb::MessageParser<PgpSignedAttestation>(() => new PgpSignedAttestation());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PgpSignedAttestation> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Grafeas.V1Beta1.Attestation.AttestationReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PgpSignedAttestation() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PgpSignedAttestation(PgpSignedAttestation other) : this() {
      signature_ = other.signature_;
      contentType_ = other.contentType_;
      switch (other.KeyIdCase) {
        case KeyIdOneofCase.PgpKeyId:
          PgpKeyId = other.PgpKeyId;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PgpSignedAttestation Clone() {
      return new PgpSignedAttestation(this);
    }

    /// <summary>Field number for the "signature" field.</summary>
    public const int SignatureFieldNumber = 1;
    private string signature_ = "";
    /// <summary>
    /// The raw content of the signature, as output by GNU Privacy Guard (GPG) or
    /// equivalent.  Since this message only supports attached signatures, the
    /// payload that was signed must be attached. While the signature format
    /// supported is dependent on the verification implementation, currently only
    /// ASCII-armored (`--armor` to gpg), non-clearsigned (`--sign` rather than
    /// `--clearsign` to gpg) are supported. Concretely, `gpg --sign --armor
    /// --output=signature.gpg payload.json` will create the signature content
    /// expected in this field in `signature.gpg` for the `payload.json`
    /// attestation payload.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Signature {
      get { return signature_; }
      set {
        signature_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "content_type" field.</summary>
    public const int ContentTypeFieldNumber = 3;
    private global::Grafeas.V1Beta1.Attestation.PgpSignedAttestation.Types.ContentType contentType_ = 0;
    /// <summary>
    /// Type (for example schema) of the attestation payload that was signed.
    /// The verifier must ensure that the provided type is one that the verifier
    /// supports, and that the attestation payload is a valid instantiation of that
    /// type (for example by validating a JSON schema).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Grafeas.V1Beta1.Attestation.PgpSignedAttestation.Types.ContentType ContentType {
      get { return contentType_; }
      set {
        contentType_ = value;
      }
    }

    /// <summary>Field number for the "pgp_key_id" field.</summary>
    public const int PgpKeyIdFieldNumber = 2;
    /// <summary>
    /// The cryptographic fingerprint of the key used to generate the signature,
    /// as output by, e.g. `gpg --list-keys`. This should be the version 4, full
    /// 160-bit fingerprint, expressed as a 40 character hexidecimal string. See
    /// https://tools.ietf.org/html/rfc4880#section-12.2 for details.
    /// Implementations may choose to acknowledge "LONG", "SHORT", or other
    /// abbreviated key IDs, but only the full fingerprint is guaranteed to work.
    /// In gpg, the full fingerprint can be retrieved from the `fpr` field
    /// returned when calling --list-keys with --with-colons.  For example:
    /// ```
    /// gpg --with-colons --with-fingerprint --force-v4-certs \
    ///     --list-keys attester@example.com
    /// tru::1:1513631572:0:3:1:5
    /// pub:...&lt;SNIP>...
    /// fpr:::::::::24FF6481B76AC91E66A00AC657A93A81EF3AE6FB:
    /// ```
    /// Above, the fingerprint is `24FF6481B76AC91E66A00AC657A93A81EF3AE6FB`.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PgpKeyId {
      get { return keyIdCase_ == KeyIdOneofCase.PgpKeyId ? (string) keyId_ : ""; }
      set {
        keyId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        keyIdCase_ = KeyIdOneofCase.PgpKeyId;
      }
    }

    private object keyId_;
    /// <summary>Enum of possible cases for the "key_id" oneof.</summary>
    public enum KeyIdOneofCase {
      None = 0,
      PgpKeyId = 2,
    }
    private KeyIdOneofCase keyIdCase_ = KeyIdOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KeyIdOneofCase KeyIdCase {
      get { return keyIdCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearKeyId() {
      keyIdCase_ = KeyIdOneofCase.None;
      keyId_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PgpSignedAttestation);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PgpSignedAttestation other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Signature != other.Signature) return false;
      if (ContentType != other.ContentType) return false;
      if (PgpKeyId != other.PgpKeyId) return false;
      if (KeyIdCase != other.KeyIdCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Signature.Length != 0) hash ^= Signature.GetHashCode();
      if (ContentType != 0) hash ^= ContentType.GetHashCode();
      if (keyIdCase_ == KeyIdOneofCase.PgpKeyId) hash ^= PgpKeyId.GetHashCode();
      hash ^= (int) keyIdCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Signature.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Signature);
      }
      if (keyIdCase_ == KeyIdOneofCase.PgpKeyId) {
        output.WriteRawTag(18);
        output.WriteString(PgpKeyId);
      }
      if (ContentType != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) ContentType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Signature.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Signature);
      }
      if (ContentType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ContentType);
      }
      if (keyIdCase_ == KeyIdOneofCase.PgpKeyId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PgpKeyId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PgpSignedAttestation other) {
      if (other == null) {
        return;
      }
      if (other.Signature.Length != 0) {
        Signature = other.Signature;
      }
      if (other.ContentType != 0) {
        ContentType = other.ContentType;
      }
      switch (other.KeyIdCase) {
        case KeyIdOneofCase.PgpKeyId:
          PgpKeyId = other.PgpKeyId;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Signature = input.ReadString();
            break;
          }
          case 18: {
            PgpKeyId = input.ReadString();
            break;
          }
          case 24: {
            ContentType = (global::Grafeas.V1Beta1.Attestation.PgpSignedAttestation.Types.ContentType) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the PgpSignedAttestation message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// Type (for example schema) of the attestation payload that was signed.
      /// </summary>
      public enum ContentType {
        /// <summary>
        /// `ContentType` is not set.
        /// </summary>
        [pbr::OriginalName("CONTENT_TYPE_UNSPECIFIED")] Unspecified = 0,
        /// <summary>
        /// Atomic format attestation signature. See
        /// https://github.com/containers/image/blob/8a5d2f82a6e3263290c8e0276c3e0f64e77723e7/docs/atomic-signature.md
        /// The payload extracted from `signature` is a JSON blob conforming to the
        /// linked schema.
        /// </summary>
        [pbr::OriginalName("SIMPLE_SIGNING_JSON")] SimpleSigningJson = 1,
      }

    }
    #endregion

  }

  /// <summary>
  /// Note kind that represents a logical attestation "role" or "authority". For
  /// example, an organization might have one `Authority` for "QA" and one for
  /// "build". This Note is intended to act strictly as a grouping mechanism for
  /// the attached Occurrences (Attestations). This grouping mechanism also
  /// provides a security boundary, since IAM ACLs gate the ability for a principle
  /// to attach an Occurrence to a given Note. It also provides a single point of
  /// lookup to find all attached Attestation Occurrences, even if they don't all
  /// live in the same project.
  /// </summary>
  public sealed partial class Authority : pb::IMessage<Authority> {
    private static readonly pb::MessageParser<Authority> _parser = new pb::MessageParser<Authority>(() => new Authority());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Authority> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Grafeas.V1Beta1.Attestation.AttestationReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Authority() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Authority(Authority other) : this() {
      hint_ = other.hint_ != null ? other.hint_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Authority Clone() {
      return new Authority(this);
    }

    /// <summary>Field number for the "hint" field.</summary>
    public const int HintFieldNumber = 1;
    private global::Grafeas.V1Beta1.Attestation.Authority.Types.Hint hint_;
    /// <summary>
    /// Hint hints at the purpose of the attestation authority.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Grafeas.V1Beta1.Attestation.Authority.Types.Hint Hint {
      get { return hint_; }
      set {
        hint_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Authority);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Authority other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Hint, other.Hint)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (hint_ != null) hash ^= Hint.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (hint_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Hint);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (hint_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Hint);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Authority other) {
      if (other == null) {
        return;
      }
      if (other.hint_ != null) {
        if (hint_ == null) {
          Hint = new global::Grafeas.V1Beta1.Attestation.Authority.Types.Hint();
        }
        Hint.MergeFrom(other.Hint);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (hint_ == null) {
              Hint = new global::Grafeas.V1Beta1.Attestation.Authority.Types.Hint();
            }
            input.ReadMessage(Hint);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Authority message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// This submessage provides human-readable hints about the purpose of the
      /// Authority. Because the name of a Note acts as its resource reference, it is
      /// important to disambiguate the canonical name of the Note (which might be a
      /// UUID for security purposes) from "readable" names more suitable for debug
      /// output. Note that these hints should NOT be used to look up authorities in
      /// security sensitive contexts, such as when looking up Attestations to
      /// verify.
      /// </summary>
      public sealed partial class Hint : pb::IMessage<Hint> {
        private static readonly pb::MessageParser<Hint> _parser = new pb::MessageParser<Hint>(() => new Hint());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Hint> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Grafeas.V1Beta1.Attestation.Authority.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Hint() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Hint(Hint other) : this() {
          humanReadableName_ = other.humanReadableName_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Hint Clone() {
          return new Hint(this);
        }

        /// <summary>Field number for the "human_readable_name" field.</summary>
        public const int HumanReadableNameFieldNumber = 1;
        private string humanReadableName_ = "";
        /// <summary>
        /// The human readable name of this Attestation Authority, for example "qa".
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string HumanReadableName {
          get { return humanReadableName_; }
          set {
            humanReadableName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Hint);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Hint other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (HumanReadableName != other.HumanReadableName) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (HumanReadableName.Length != 0) hash ^= HumanReadableName.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (HumanReadableName.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(HumanReadableName);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (HumanReadableName.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(HumanReadableName);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Hint other) {
          if (other == null) {
            return;
          }
          if (other.HumanReadableName.Length != 0) {
            HumanReadableName = other.HumanReadableName;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                HumanReadableName = input.ReadString();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  /// Details of an attestation occurrence.
  /// </summary>
  public sealed partial class Details : pb::IMessage<Details> {
    private static readonly pb::MessageParser<Details> _parser = new pb::MessageParser<Details>(() => new Details());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Details> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Grafeas.V1Beta1.Attestation.AttestationReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Details() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Details(Details other) : this() {
      attestation_ = other.attestation_ != null ? other.attestation_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Details Clone() {
      return new Details(this);
    }

    /// <summary>Field number for the "attestation" field.</summary>
    public const int AttestationFieldNumber = 1;
    private global::Grafeas.V1Beta1.Attestation.Attestation attestation_;
    /// <summary>
    /// Attestation for the resource.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Grafeas.V1Beta1.Attestation.Attestation Attestation {
      get { return attestation_; }
      set {
        attestation_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Details);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Details other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Attestation, other.Attestation)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (attestation_ != null) hash ^= Attestation.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (attestation_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Attestation);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (attestation_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Attestation);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Details other) {
      if (other == null) {
        return;
      }
      if (other.attestation_ != null) {
        if (attestation_ == null) {
          Attestation = new global::Grafeas.V1Beta1.Attestation.Attestation();
        }
        Attestation.MergeFrom(other.Attestation);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (attestation_ == null) {
              Attestation = new global::Grafeas.V1Beta1.Attestation.Attestation();
            }
            input.ReadMessage(Attestation);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Occurrence that represents a single "attestation". The authenticity of an
  /// Attestation can be verified using the attached signature. If the verifier
  /// trusts the public key of the signer, then verifying the signature is
  /// sufficient to establish trust. In this circumstance, the Authority to which
  /// this Attestation is attached is primarily useful for look-up (how to find
  /// this Attestation if you already know the Authority and artifact to be
  /// verified) and intent (which authority was this attestation intended to sign
  /// for).
  /// </summary>
  public sealed partial class Attestation : pb::IMessage<Attestation> {
    private static readonly pb::MessageParser<Attestation> _parser = new pb::MessageParser<Attestation>(() => new Attestation());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Attestation> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Grafeas.V1Beta1.Attestation.AttestationReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Attestation() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Attestation(Attestation other) : this() {
      switch (other.SignatureCase) {
        case SignatureOneofCase.PgpSignedAttestation:
          PgpSignedAttestation = other.PgpSignedAttestation.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Attestation Clone() {
      return new Attestation(this);
    }

    /// <summary>Field number for the "pgp_signed_attestation" field.</summary>
    public const int PgpSignedAttestationFieldNumber = 1;
    /// <summary>
    /// A PGP signed attestation.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Grafeas.V1Beta1.Attestation.PgpSignedAttestation PgpSignedAttestation {
      get { return signatureCase_ == SignatureOneofCase.PgpSignedAttestation ? (global::Grafeas.V1Beta1.Attestation.PgpSignedAttestation) signature_ : null; }
      set {
        signature_ = value;
        signatureCase_ = value == null ? SignatureOneofCase.None : SignatureOneofCase.PgpSignedAttestation;
      }
    }

    private object signature_;
    /// <summary>Enum of possible cases for the "signature" oneof.</summary>
    public enum SignatureOneofCase {
      None = 0,
      PgpSignedAttestation = 1,
    }
    private SignatureOneofCase signatureCase_ = SignatureOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SignatureOneofCase SignatureCase {
      get { return signatureCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSignature() {
      signatureCase_ = SignatureOneofCase.None;
      signature_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Attestation);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Attestation other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(PgpSignedAttestation, other.PgpSignedAttestation)) return false;
      if (SignatureCase != other.SignatureCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (signatureCase_ == SignatureOneofCase.PgpSignedAttestation) hash ^= PgpSignedAttestation.GetHashCode();
      hash ^= (int) signatureCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (signatureCase_ == SignatureOneofCase.PgpSignedAttestation) {
        output.WriteRawTag(10);
        output.WriteMessage(PgpSignedAttestation);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (signatureCase_ == SignatureOneofCase.PgpSignedAttestation) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PgpSignedAttestation);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Attestation other) {
      if (other == null) {
        return;
      }
      switch (other.SignatureCase) {
        case SignatureOneofCase.PgpSignedAttestation:
          if (PgpSignedAttestation == null) {
            PgpSignedAttestation = new global::Grafeas.V1Beta1.Attestation.PgpSignedAttestation();
          }
          PgpSignedAttestation.MergeFrom(other.PgpSignedAttestation);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::Grafeas.V1Beta1.Attestation.PgpSignedAttestation subBuilder = new global::Grafeas.V1Beta1.Attestation.PgpSignedAttestation();
            if (signatureCase_ == SignatureOneofCase.PgpSignedAttestation) {
              subBuilder.MergeFrom(PgpSignedAttestation);
            }
            input.ReadMessage(subBuilder);
            PgpSignedAttestation = subBuilder;
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
