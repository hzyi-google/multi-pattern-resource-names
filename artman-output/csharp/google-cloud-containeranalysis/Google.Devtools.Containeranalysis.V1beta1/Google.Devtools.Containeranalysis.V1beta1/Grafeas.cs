// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: google/devtools/containeranalysis/v1beta1/grafeas/grafeas.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Grafeas.V1Beta1 {

  /// <summary>Holder for reflection information generated from google/devtools/containeranalysis/v1beta1/grafeas/grafeas.proto</summary>
  public static partial class GrafeasReflection {

    #region Descriptor
    /// <summary>File descriptor for google/devtools/containeranalysis/v1beta1/grafeas/grafeas.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static GrafeasReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cj9nb29nbGUvZGV2dG9vbHMvY29udGFpbmVyYW5hbHlzaXMvdjFiZXRhMS9n",
            "cmFmZWFzL2dyYWZlYXMucHJvdG8SD2dyYWZlYXMudjFiZXRhMRocZ29vZ2xl",
            "L2FwaS9hbm5vdGF0aW9ucy5wcm90bxpHZ29vZ2xlL2RldnRvb2xzL2NvbnRh",
            "aW5lcmFuYWx5c2lzL3YxYmV0YTEvYXR0ZXN0YXRpb24vYXR0ZXN0YXRpb24u",
            "cHJvdG8aO2dvb2dsZS9kZXZ0b29scy9jb250YWluZXJhbmFseXNpcy92MWJl",
            "dGExL2J1aWxkL2J1aWxkLnByb3RvGj1nb29nbGUvZGV2dG9vbHMvY29udGFp",
            "bmVyYW5hbHlzaXMvdjFiZXRhMS9jb21tb24vY29tbW9uLnByb3RvGkVnb29n",
            "bGUvZGV2dG9vbHMvY29udGFpbmVyYW5hbHlzaXMvdjFiZXRhMS9kZXBsb3lt",
            "ZW50L2RlcGxveW1lbnQucHJvdG8aQ2dvb2dsZS9kZXZ0b29scy9jb250YWlu",
            "ZXJhbmFseXNpcy92MWJldGExL2Rpc2NvdmVyeS9kaXNjb3ZlcnkucHJvdG8a",
            "O2dvb2dsZS9kZXZ0b29scy9jb250YWluZXJhbmFseXNpcy92MWJldGExL2lt",
            "YWdlL2ltYWdlLnByb3RvGj9nb29nbGUvZGV2dG9vbHMvY29udGFpbmVyYW5h",
            "bHlzaXMvdjFiZXRhMS9wYWNrYWdlL3BhY2thZ2UucHJvdG8aRWdvb2dsZS9k",
            "ZXZ0b29scy9jb250YWluZXJhbmFseXNpcy92MWJldGExL3Byb3ZlbmFuY2Uv",
            "cHJvdmVuYW5jZS5wcm90bxpLZ29vZ2xlL2RldnRvb2xzL2NvbnRhaW5lcmFu",
            "YWx5c2lzL3YxYmV0YTEvdnVsbmVyYWJpbGl0eS92dWxuZXJhYmlsaXR5LnBy",
            "b3RvGhtnb29nbGUvcHJvdG9idWYvZW1wdHkucHJvdG8aIGdvb2dsZS9wcm90",
            "b2J1Zi9maWVsZF9tYXNrLnByb3RvGh9nb29nbGUvcHJvdG9idWYvdGltZXN0",
            "YW1wLnByb3RvIpwFCgpPY2N1cnJlbmNlEgwKBG5hbWUYASABKAkSKwoIcmVz",
            "b3VyY2UYAiABKAsyGS5ncmFmZWFzLnYxYmV0YTEuUmVzb3VyY2USEQoJbm90",
            "ZV9uYW1lGAMgASgJEicKBGtpbmQYBCABKA4yGS5ncmFmZWFzLnYxYmV0YTEu",
            "Tm90ZUtpbmQSEwoLcmVtZWRpYXRpb24YBSABKAkSLwoLY3JlYXRlX3RpbWUY",
            "BiABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wEi8KC3VwZGF0ZV90",
            "aW1lGAcgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcBI/Cg12dWxu",
            "ZXJhYmlsaXR5GAggASgLMiYuZ3JhZmVhcy52MWJldGExLnZ1bG5lcmFiaWxp",
            "dHkuRGV0YWlsc0gAEi8KBWJ1aWxkGAkgASgLMh4uZ3JhZmVhcy52MWJldGEx",
            "LmJ1aWxkLkRldGFpbHNIABI3Cg1kZXJpdmVkX2ltYWdlGAogASgLMh4uZ3Jh",
            "ZmVhcy52MWJldGExLmltYWdlLkRldGFpbHNIABI4CgxpbnN0YWxsYXRpb24Y",
            "CyABKAsyIC5ncmFmZWFzLnYxYmV0YTEucGFja2FnZS5EZXRhaWxzSAASOQoK",
            "ZGVwbG95bWVudBgMIAEoCzIjLmdyYWZlYXMudjFiZXRhMS5kZXBsb3ltZW50",
            "LkRldGFpbHNIABI4CgpkaXNjb3ZlcmVkGA0gASgLMiIuZ3JhZmVhcy52MWJl",
            "dGExLmRpc2NvdmVyeS5EZXRhaWxzSAASOwoLYXR0ZXN0YXRpb24YDiABKAsy",
            "JC5ncmFmZWFzLnYxYmV0YTEuYXR0ZXN0YXRpb24uRGV0YWlsc0gAQgkKB2Rl",
            "dGFpbHMiXQoIUmVzb3VyY2USDAoEbmFtZRgBIAEoCRILCgN1cmkYAiABKAkS",
            "NgoMY29udGVudF9oYXNoGAMgASgLMiAuZ3JhZmVhcy52MWJldGExLnByb3Zl",
            "bmFuY2UuSGFzaCKABgoETm90ZRIMCgRuYW1lGAEgASgJEhkKEXNob3J0X2Rl",
            "c2NyaXB0aW9uGAIgASgJEhgKEGxvbmdfZGVzY3JpcHRpb24YAyABKAkSJwoE",
            "a2luZBgEIAEoDjIZLmdyYWZlYXMudjFiZXRhMS5Ob3RlS2luZBIwCgtyZWxh",
            "dGVkX3VybBgFIAMoCzIbLmdyYWZlYXMudjFiZXRhMS5SZWxhdGVkVXJsEjMK",
            "D2V4cGlyYXRpb25fdGltZRgGIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1l",
            "c3RhbXASLwoLY3JlYXRlX3RpbWUYByABKAsyGi5nb29nbGUucHJvdG9idWYu",
            "VGltZXN0YW1wEi8KC3VwZGF0ZV90aW1lGAggASgLMhouZ29vZ2xlLnByb3Rv",
            "YnVmLlRpbWVzdGFtcBIaChJyZWxhdGVkX25vdGVfbmFtZXMYCSADKAkSRQoN",
            "dnVsbmVyYWJpbGl0eRgKIAEoCzIsLmdyYWZlYXMudjFiZXRhMS52dWxuZXJh",
            "YmlsaXR5LlZ1bG5lcmFiaWxpdHlIABItCgVidWlsZBgLIAEoCzIcLmdyYWZl",
            "YXMudjFiZXRhMS5idWlsZC5CdWlsZEgAEjIKCmJhc2VfaW1hZ2UYDCABKAsy",
            "HC5ncmFmZWFzLnYxYmV0YTEuaW1hZ2UuQmFzaXNIABIzCgdwYWNrYWdlGA0g",
            "ASgLMiAuZ3JhZmVhcy52MWJldGExLnBhY2thZ2UuUGFja2FnZUgAEjwKCmRl",
            "cGxveWFibGUYDiABKAsyJi5ncmFmZWFzLnYxYmV0YTEuZGVwbG95bWVudC5E",
            "ZXBsb3lhYmxlSAASOQoJZGlzY292ZXJ5GA8gASgLMiQuZ3JhZmVhcy52MWJl",
            "dGExLmRpc2NvdmVyeS5EaXNjb3ZlcnlIABJHChVhdHRlc3RhdGlvbl9hdXRo",
            "b3JpdHkYECABKAsyJi5ncmFmZWFzLnYxYmV0YTEuYXR0ZXN0YXRpb24uQXV0",
            "aG9yaXR5SABCBgoEdHlwZSIkChRHZXRPY2N1cnJlbmNlUmVxdWVzdBIMCgRu",
            "YW1lGAEgASgJIl8KFkxpc3RPY2N1cnJlbmNlc1JlcXVlc3QSDgoGcGFyZW50",
            "GAEgASgJEg4KBmZpbHRlchgCIAEoCRIRCglwYWdlX3NpemUYAyABKAUSEgoK",
            "cGFnZV90b2tlbhgEIAEoCSJkChdMaXN0T2NjdXJyZW5jZXNSZXNwb25zZRIw",
            "CgtvY2N1cnJlbmNlcxgBIAMoCzIbLmdyYWZlYXMudjFiZXRhMS5PY2N1cnJl",
            "bmNlEhcKD25leHRfcGFnZV90b2tlbhgCIAEoCSInChdEZWxldGVPY2N1cnJl",
            "bmNlUmVxdWVzdBIMCgRuYW1lGAEgASgJIloKF0NyZWF0ZU9jY3VycmVuY2VS",
            "ZXF1ZXN0Eg4KBnBhcmVudBgBIAEoCRIvCgpvY2N1cnJlbmNlGAIgASgLMhsu",
            "Z3JhZmVhcy52MWJldGExLk9jY3VycmVuY2UiiQEKF1VwZGF0ZU9jY3VycmVu",
            "Y2VSZXF1ZXN0EgwKBG5hbWUYASABKAkSLwoKb2NjdXJyZW5jZRgCIAEoCzIb",
            "LmdyYWZlYXMudjFiZXRhMS5PY2N1cnJlbmNlEi8KC3VwZGF0ZV9tYXNrGAMg",
            "ASgLMhouZ29vZ2xlLnByb3RvYnVmLkZpZWxkTWFzayIeCg5HZXROb3RlUmVx",
            "dWVzdBIMCgRuYW1lGAEgASgJIigKGEdldE9jY3VycmVuY2VOb3RlUmVxdWVz",
            "dBIMCgRuYW1lGAEgASgJIlkKEExpc3ROb3Rlc1JlcXVlc3QSDgoGcGFyZW50",
            "GAEgASgJEg4KBmZpbHRlchgCIAEoCRIRCglwYWdlX3NpemUYAyABKAUSEgoK",
            "cGFnZV90b2tlbhgEIAEoCSJSChFMaXN0Tm90ZXNSZXNwb25zZRIkCgVub3Rl",
            "cxgBIAMoCzIVLmdyYWZlYXMudjFiZXRhMS5Ob3RlEhcKD25leHRfcGFnZV90",
            "b2tlbhgCIAEoCSIhChFEZWxldGVOb3RlUmVxdWVzdBIMCgRuYW1lGAEgASgJ",
            "IlkKEUNyZWF0ZU5vdGVSZXF1ZXN0Eg4KBnBhcmVudBgBIAEoCRIPCgdub3Rl",
            "X2lkGAIgASgJEiMKBG5vdGUYAyABKAsyFS5ncmFmZWFzLnYxYmV0YTEuTm90",
            "ZSJ3ChFVcGRhdGVOb3RlUmVxdWVzdBIMCgRuYW1lGAEgASgJEiMKBG5vdGUY",
            "AiABKAsyFS5ncmFmZWFzLnYxYmV0YTEuTm90ZRIvCgt1cGRhdGVfbWFzaxgD",
            "IAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5GaWVsZE1hc2siYQoaTGlzdE5vdGVP",
            "Y2N1cnJlbmNlc1JlcXVlc3QSDAoEbmFtZRgBIAEoCRIOCgZmaWx0ZXIYAiAB",
            "KAkSEQoJcGFnZV9zaXplGAMgASgFEhIKCnBhZ2VfdG9rZW4YBCABKAkiaAob",
            "TGlzdE5vdGVPY2N1cnJlbmNlc1Jlc3BvbnNlEjAKC29jY3VycmVuY2VzGAEg",
            "AygLMhsuZ3JhZmVhcy52MWJldGExLk9jY3VycmVuY2USFwoPbmV4dF9wYWdl",
            "X3Rva2VuGAIgASgJIrIBChdCYXRjaENyZWF0ZU5vdGVzUmVxdWVzdBIOCgZw",
            "YXJlbnQYASABKAkSQgoFbm90ZXMYAiADKAsyMy5ncmFmZWFzLnYxYmV0YTEu",
            "QmF0Y2hDcmVhdGVOb3Rlc1JlcXVlc3QuTm90ZXNFbnRyeRpDCgpOb3Rlc0Vu",
            "dHJ5EgsKA2tleRgBIAEoCRIkCgV2YWx1ZRgCIAEoCzIVLmdyYWZlYXMudjFi",
            "ZXRhMS5Ob3RlOgI4ASJAChhCYXRjaENyZWF0ZU5vdGVzUmVzcG9uc2USJAoF",
            "bm90ZXMYASADKAsyFS5ncmFmZWFzLnYxYmV0YTEuTm90ZSJhCh1CYXRjaENy",
            "ZWF0ZU9jY3VycmVuY2VzUmVxdWVzdBIOCgZwYXJlbnQYASABKAkSMAoLb2Nj",
            "dXJyZW5jZXMYAiADKAsyGy5ncmFmZWFzLnYxYmV0YTEuT2NjdXJyZW5jZSJS",
            "Ch5CYXRjaENyZWF0ZU9jY3VycmVuY2VzUmVzcG9uc2USMAoLb2NjdXJyZW5j",
            "ZXMYASADKAsyGy5ncmFmZWFzLnYxYmV0YTEuT2NjdXJyZW5jZSJLCilHZXRW",
            "dWxuZXJhYmlsaXR5T2NjdXJyZW5jZXNTdW1tYXJ5UmVxdWVzdBIOCgZwYXJl",
            "bnQYASABKAkSDgoGZmlsdGVyGAIgASgJIqUCCh9WdWxuZXJhYmlsaXR5T2Nj",
            "dXJyZW5jZXNTdW1tYXJ5ElUKBmNvdW50cxgBIAMoCzJFLmdyYWZlYXMudjFi",
            "ZXRhMS5WdWxuZXJhYmlsaXR5T2NjdXJyZW5jZXNTdW1tYXJ5LkZpeGFibGVU",
            "b3RhbEJ5RGlnZXN0GqoBChRGaXhhYmxlVG90YWxCeURpZ2VzdBIrCghyZXNv",
            "dXJjZRgBIAEoCzIZLmdyYWZlYXMudjFiZXRhMS5SZXNvdXJjZRI5CghzZXZl",
            "cml0eRgCIAEoDjInLmdyYWZlYXMudjFiZXRhMS52dWxuZXJhYmlsaXR5LlNl",
            "dmVyaXR5EhUKDWZpeGFibGVfY291bnQYAyABKAMSEwoLdG90YWxfY291bnQY",
            "BCABKAMywhEKDkdyYWZlYXNWMUJldGExEoUBCg1HZXRPY2N1cnJlbmNlEiUu",
            "Z3JhZmVhcy52MWJldGExLkdldE9jY3VycmVuY2VSZXF1ZXN0GhsuZ3JhZmVh",
            "cy52MWJldGExLk9jY3VycmVuY2UiMILT5JMCKhIoL3YxYmV0YTEve25hbWU9",
            "cHJvamVjdHMvKi9vY2N1cnJlbmNlcy8qfRKWAQoPTGlzdE9jY3VycmVuY2Vz",
            "EicuZ3JhZmVhcy52MWJldGExLkxpc3RPY2N1cnJlbmNlc1JlcXVlc3QaKC5n",
            "cmFmZWFzLnYxYmV0YTEuTGlzdE9jY3VycmVuY2VzUmVzcG9uc2UiMILT5JMC",
            "KhIoL3YxYmV0YTEve3BhcmVudD1wcm9qZWN0cy8qfS9vY2N1cnJlbmNlcxKG",
            "AQoQRGVsZXRlT2NjdXJyZW5jZRIoLmdyYWZlYXMudjFiZXRhMS5EZWxldGVP",
            "Y2N1cnJlbmNlUmVxdWVzdBoWLmdvb2dsZS5wcm90b2J1Zi5FbXB0eSIwgtPk",
            "kwIqKigvdjFiZXRhMS97bmFtZT1wcm9qZWN0cy8qL29jY3VycmVuY2VzLyp9",
            "EpcBChBDcmVhdGVPY2N1cnJlbmNlEiguZ3JhZmVhcy52MWJldGExLkNyZWF0",
            "ZU9jY3VycmVuY2VSZXF1ZXN0GhsuZ3JhZmVhcy52MWJldGExLk9jY3VycmVu",
            "Y2UiPILT5JMCNiIoL3YxYmV0YTEve3BhcmVudD1wcm9qZWN0cy8qfS9vY2N1",
            "cnJlbmNlczoKb2NjdXJyZW5jZRK6AQoWQmF0Y2hDcmVhdGVPY2N1cnJlbmNl",
            "cxIuLmdyYWZlYXMudjFiZXRhMS5CYXRjaENyZWF0ZU9jY3VycmVuY2VzUmVx",
            "dWVzdBovLmdyYWZlYXMudjFiZXRhMS5CYXRjaENyZWF0ZU9jY3VycmVuY2Vz",
            "UmVzcG9uc2UiP4LT5JMCOSI0L3YxYmV0YTEve3BhcmVudD1wcm9qZWN0cy8q",
            "fS9vY2N1cnJlbmNlczpiYXRjaENyZWF0ZToBKhKXAQoQVXBkYXRlT2NjdXJy",
            "ZW5jZRIoLmdyYWZlYXMudjFiZXRhMS5VcGRhdGVPY2N1cnJlbmNlUmVxdWVz",
            "dBobLmdyYWZlYXMudjFiZXRhMS5PY2N1cnJlbmNlIjyC0+STAjYyKC92MWJl",
            "dGExL3tuYW1lPXByb2plY3RzLyovb2NjdXJyZW5jZXMvKn06Cm9jY3VycmVu",
            "Y2USjQEKEUdldE9jY3VycmVuY2VOb3RlEikuZ3JhZmVhcy52MWJldGExLkdl",
            "dE9jY3VycmVuY2VOb3RlUmVxdWVzdBoVLmdyYWZlYXMudjFiZXRhMS5Ob3Rl",
            "IjaC0+STAjASLi92MWJldGExL3tuYW1lPXByb2plY3RzLyovb2NjdXJyZW5j",
            "ZXMvKn0vbm90ZXMSbQoHR2V0Tm90ZRIfLmdyYWZlYXMudjFiZXRhMS5HZXRO",
            "b3RlUmVxdWVzdBoVLmdyYWZlYXMudjFiZXRhMS5Ob3RlIiqC0+STAiQSIi92",
            "MWJldGExL3tuYW1lPXByb2plY3RzLyovbm90ZXMvKn0SfgoJTGlzdE5vdGVz",
            "EiEuZ3JhZmVhcy52MWJldGExLkxpc3ROb3Rlc1JlcXVlc3QaIi5ncmFmZWFz",
            "LnYxYmV0YTEuTGlzdE5vdGVzUmVzcG9uc2UiKoLT5JMCJBIiL3YxYmV0YTEv",
            "e3BhcmVudD1wcm9qZWN0cy8qfS9ub3RlcxJ0CgpEZWxldGVOb3RlEiIuZ3Jh",
            "ZmVhcy52MWJldGExLkRlbGV0ZU5vdGVSZXF1ZXN0GhYuZ29vZ2xlLnByb3Rv",
            "YnVmLkVtcHR5IiqC0+STAiQqIi92MWJldGExL3tuYW1lPXByb2plY3RzLyov",
            "bm90ZXMvKn0SeQoKQ3JlYXRlTm90ZRIiLmdyYWZlYXMudjFiZXRhMS5DcmVh",
            "dGVOb3RlUmVxdWVzdBoVLmdyYWZlYXMudjFiZXRhMS5Ob3RlIjCC0+STAioi",
            "Ii92MWJldGExL3twYXJlbnQ9cHJvamVjdHMvKn0vbm90ZXM6BG5vdGUSogEK",
            "EEJhdGNoQ3JlYXRlTm90ZXMSKC5ncmFmZWFzLnYxYmV0YTEuQmF0Y2hDcmVh",
            "dGVOb3Rlc1JlcXVlc3QaKS5ncmFmZWFzLnYxYmV0YTEuQmF0Y2hDcmVhdGVO",
            "b3Rlc1Jlc3BvbnNlIjmC0+STAjMiLi92MWJldGExL3twYXJlbnQ9cHJvamVj",
            "dHMvKn0vbm90ZXM6YmF0Y2hDcmVhdGU6ASoSeQoKVXBkYXRlTm90ZRIiLmdy",
            "YWZlYXMudjFiZXRhMS5VcGRhdGVOb3RlUmVxdWVzdBoVLmdyYWZlYXMudjFi",
            "ZXRhMS5Ob3RlIjCC0+STAioyIi92MWJldGExL3tuYW1lPXByb2plY3RzLyov",
            "bm90ZXMvKn06BG5vdGUSqAEKE0xpc3ROb3RlT2NjdXJyZW5jZXMSKy5ncmFm",
            "ZWFzLnYxYmV0YTEuTGlzdE5vdGVPY2N1cnJlbmNlc1JlcXVlc3QaLC5ncmFm",
            "ZWFzLnYxYmV0YTEuTGlzdE5vdGVPY2N1cnJlbmNlc1Jlc3BvbnNlIjaC0+ST",
            "AjASLi92MWJldGExL3tuYW1lPXByb2plY3RzLyovbm90ZXMvKn0vb2NjdXJy",
            "ZW5jZXMS2QEKIkdldFZ1bG5lcmFiaWxpdHlPY2N1cnJlbmNlc1N1bW1hcnkS",
            "Oi5ncmFmZWFzLnYxYmV0YTEuR2V0VnVsbmVyYWJpbGl0eU9jY3VycmVuY2Vz",
            "U3VtbWFyeVJlcXVlc3QaMC5ncmFmZWFzLnYxYmV0YTEuVnVsbmVyYWJpbGl0",
            "eU9jY3VycmVuY2VzU3VtbWFyeSJFgtPkkwI/Ej0vdjFiZXRhMS97cGFyZW50",
            "PXByb2plY3RzLyp9L29jY3VycmVuY2VzOnZ1bG5lcmFiaWxpdHlTdW1tYXJ5",
            "QnYKEmlvLmdyYWZlYXMudjFiZXRhMVABWlhnb29nbGUuZ29sYW5nLm9yZy9n",
            "ZW5wcm90by9nb29nbGVhcGlzL2RldnRvb2xzL2NvbnRhaW5lcmFuYWx5c2lz",
            "L3YxYmV0YTEvZ3JhZmVhcztncmFmZWFzogIDR1JBYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Api.AnnotationsReflection.Descriptor, global::Grafeas.V1Beta1.Attestation.AttestationReflection.Descriptor, global::Grafeas.V1Beta1.Build.BuildReflection.Descriptor, global::Grafeas.V1Beta1.CommonReflection.Descriptor, global::Grafeas.V1Beta1.Deployment.DeploymentReflection.Descriptor, global::Grafeas.V1Beta1.Discovery.DiscoveryReflection.Descriptor, global::Grafeas.V1Beta1.Image.ImageReflection.Descriptor, global::Grafeas.V1Beta1.Package.PackageReflection.Descriptor, global::Grafeas.V1Beta1.Provenance.ProvenanceReflection.Descriptor, global::Grafeas.V1Beta1.Vulnerability.VulnerabilityReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.EmptyReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.FieldMaskReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.TimestampReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Grafeas.V1Beta1.Occurrence), global::Grafeas.V1Beta1.Occurrence.Parser, new[]{ "Name", "Resource", "NoteName", "Kind", "Remediation", "CreateTime", "UpdateTime", "Vulnerability", "Build", "DerivedImage", "Installation", "Deployment", "Discovered", "Attestation" }, new[]{ "Details" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Grafeas.V1Beta1.Resource), global::Grafeas.V1Beta1.Resource.Parser, new[]{ "Name", "Uri", "ContentHash" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Grafeas.V1Beta1.Note), global::Grafeas.V1Beta1.Note.Parser, new[]{ "Name", "ShortDescription", "LongDescription", "Kind", "RelatedUrl", "ExpirationTime", "CreateTime", "UpdateTime", "RelatedNoteNames", "Vulnerability", "Build", "BaseImage", "Package", "Deployable", "Discovery", "AttestationAuthority" }, new[]{ "Type" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Grafeas.V1Beta1.GetOccurrenceRequest), global::Grafeas.V1Beta1.GetOccurrenceRequest.Parser, new[]{ "Name" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Grafeas.V1Beta1.ListOccurrencesRequest), global::Grafeas.V1Beta1.ListOccurrencesRequest.Parser, new[]{ "Parent", "Filter", "PageSize", "PageToken" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Grafeas.V1Beta1.ListOccurrencesResponse), global::Grafeas.V1Beta1.ListOccurrencesResponse.Parser, new[]{ "Occurrences", "NextPageToken" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Grafeas.V1Beta1.DeleteOccurrenceRequest), global::Grafeas.V1Beta1.DeleteOccurrenceRequest.Parser, new[]{ "Name" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Grafeas.V1Beta1.CreateOccurrenceRequest), global::Grafeas.V1Beta1.CreateOccurrenceRequest.Parser, new[]{ "Parent", "Occurrence" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Grafeas.V1Beta1.UpdateOccurrenceRequest), global::Grafeas.V1Beta1.UpdateOccurrenceRequest.Parser, new[]{ "Name", "Occurrence", "UpdateMask" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Grafeas.V1Beta1.GetNoteRequest), global::Grafeas.V1Beta1.GetNoteRequest.Parser, new[]{ "Name" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Grafeas.V1Beta1.GetOccurrenceNoteRequest), global::Grafeas.V1Beta1.GetOccurrenceNoteRequest.Parser, new[]{ "Name" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Grafeas.V1Beta1.ListNotesRequest), global::Grafeas.V1Beta1.ListNotesRequest.Parser, new[]{ "Parent", "Filter", "PageSize", "PageToken" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Grafeas.V1Beta1.ListNotesResponse), global::Grafeas.V1Beta1.ListNotesResponse.Parser, new[]{ "Notes", "NextPageToken" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Grafeas.V1Beta1.DeleteNoteRequest), global::Grafeas.V1Beta1.DeleteNoteRequest.Parser, new[]{ "Name" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Grafeas.V1Beta1.CreateNoteRequest), global::Grafeas.V1Beta1.CreateNoteRequest.Parser, new[]{ "Parent", "NoteId", "Note" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Grafeas.V1Beta1.UpdateNoteRequest), global::Grafeas.V1Beta1.UpdateNoteRequest.Parser, new[]{ "Name", "Note", "UpdateMask" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Grafeas.V1Beta1.ListNoteOccurrencesRequest), global::Grafeas.V1Beta1.ListNoteOccurrencesRequest.Parser, new[]{ "Name", "Filter", "PageSize", "PageToken" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Grafeas.V1Beta1.ListNoteOccurrencesResponse), global::Grafeas.V1Beta1.ListNoteOccurrencesResponse.Parser, new[]{ "Occurrences", "NextPageToken" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Grafeas.V1Beta1.BatchCreateNotesRequest), global::Grafeas.V1Beta1.BatchCreateNotesRequest.Parser, new[]{ "Parent", "Notes" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Grafeas.V1Beta1.BatchCreateNotesResponse), global::Grafeas.V1Beta1.BatchCreateNotesResponse.Parser, new[]{ "Notes" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Grafeas.V1Beta1.BatchCreateOccurrencesRequest), global::Grafeas.V1Beta1.BatchCreateOccurrencesRequest.Parser, new[]{ "Parent", "Occurrences" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Grafeas.V1Beta1.BatchCreateOccurrencesResponse), global::Grafeas.V1Beta1.BatchCreateOccurrencesResponse.Parser, new[]{ "Occurrences" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Grafeas.V1Beta1.GetVulnerabilityOccurrencesSummaryRequest), global::Grafeas.V1Beta1.GetVulnerabilityOccurrencesSummaryRequest.Parser, new[]{ "Parent", "Filter" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Grafeas.V1Beta1.VulnerabilityOccurrencesSummary), global::Grafeas.V1Beta1.VulnerabilityOccurrencesSummary.Parser, new[]{ "Counts" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Grafeas.V1Beta1.VulnerabilityOccurrencesSummary.Types.FixableTotalByDigest), global::Grafeas.V1Beta1.VulnerabilityOccurrencesSummary.Types.FixableTotalByDigest.Parser, new[]{ "Resource", "Severity", "FixableCount", "TotalCount" }, null, null, null)})
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// An instance of an analysis type that has been found on a resource.
  /// </summary>
  public sealed partial class Occurrence : pb::IMessage<Occurrence> {
    private static readonly pb::MessageParser<Occurrence> _parser = new pb::MessageParser<Occurrence>(() => new Occurrence());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Occurrence> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Grafeas.V1Beta1.GrafeasReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Occurrence() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Occurrence(Occurrence other) : this() {
      name_ = other.name_;
      resource_ = other.resource_ != null ? other.resource_.Clone() : null;
      noteName_ = other.noteName_;
      kind_ = other.kind_;
      remediation_ = other.remediation_;
      createTime_ = other.createTime_ != null ? other.createTime_.Clone() : null;
      updateTime_ = other.updateTime_ != null ? other.updateTime_.Clone() : null;
      switch (other.DetailsCase) {
        case DetailsOneofCase.Vulnerability:
          Vulnerability = other.Vulnerability.Clone();
          break;
        case DetailsOneofCase.Build:
          Build = other.Build.Clone();
          break;
        case DetailsOneofCase.DerivedImage:
          DerivedImage = other.DerivedImage.Clone();
          break;
        case DetailsOneofCase.Installation:
          Installation = other.Installation.Clone();
          break;
        case DetailsOneofCase.Deployment:
          Deployment = other.Deployment.Clone();
          break;
        case DetailsOneofCase.Discovered:
          Discovered = other.Discovered.Clone();
          break;
        case DetailsOneofCase.Attestation:
          Attestation = other.Attestation.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Occurrence Clone() {
      return new Occurrence(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// Output only. The name of the occurrence in the form of
    /// `projects/[PROJECT_ID]/occurrences/[OCCURRENCE_ID]`.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "resource" field.</summary>
    public const int ResourceFieldNumber = 2;
    private global::Grafeas.V1Beta1.Resource resource_;
    /// <summary>
    /// Required. Immutable. The resource for which the occurrence applies.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Grafeas.V1Beta1.Resource Resource {
      get { return resource_; }
      set {
        resource_ = value;
      }
    }

    /// <summary>Field number for the "note_name" field.</summary>
    public const int NoteNameFieldNumber = 3;
    private string noteName_ = "";
    /// <summary>
    /// Required. Immutable. The analysis note associated with this occurrence, in
    /// the form of `projects[PROVIDER_ID]/notes/[NOTE_ID]`. This field can be used
    /// as a filter in list requests.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NoteName {
      get { return noteName_; }
      set {
        noteName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "kind" field.</summary>
    public const int KindFieldNumber = 4;
    private global::Grafeas.V1Beta1.NoteKind kind_ = 0;
    /// <summary>
    /// Output only. This explicitly denotes which of the occurrence details are
    /// specified. This field can be used as a filter in list requests.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Grafeas.V1Beta1.NoteKind Kind {
      get { return kind_; }
      set {
        kind_ = value;
      }
    }

    /// <summary>Field number for the "remediation" field.</summary>
    public const int RemediationFieldNumber = 5;
    private string remediation_ = "";
    /// <summary>
    /// A description of actions that can be taken to remedy the note.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Remediation {
      get { return remediation_; }
      set {
        remediation_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "create_time" field.</summary>
    public const int CreateTimeFieldNumber = 6;
    private global::Google.Protobuf.WellKnownTypes.Timestamp createTime_;
    /// <summary>
    /// Output only. The time this occurrence was created.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp CreateTime {
      get { return createTime_; }
      set {
        createTime_ = value;
      }
    }

    /// <summary>Field number for the "update_time" field.</summary>
    public const int UpdateTimeFieldNumber = 7;
    private global::Google.Protobuf.WellKnownTypes.Timestamp updateTime_;
    /// <summary>
    /// Output only. The time this occurrence was last updated.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp UpdateTime {
      get { return updateTime_; }
      set {
        updateTime_ = value;
      }
    }

    /// <summary>Field number for the "vulnerability" field.</summary>
    public const int VulnerabilityFieldNumber = 8;
    /// <summary>
    /// Describes a security vulnerability.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Grafeas.V1Beta1.Vulnerability.Details Vulnerability {
      get { return detailsCase_ == DetailsOneofCase.Vulnerability ? (global::Grafeas.V1Beta1.Vulnerability.Details) details_ : null; }
      set {
        details_ = value;
        detailsCase_ = value == null ? DetailsOneofCase.None : DetailsOneofCase.Vulnerability;
      }
    }

    /// <summary>Field number for the "build" field.</summary>
    public const int BuildFieldNumber = 9;
    /// <summary>
    /// Describes a verifiable build.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Grafeas.V1Beta1.Build.Details Build {
      get { return detailsCase_ == DetailsOneofCase.Build ? (global::Grafeas.V1Beta1.Build.Details) details_ : null; }
      set {
        details_ = value;
        detailsCase_ = value == null ? DetailsOneofCase.None : DetailsOneofCase.Build;
      }
    }

    /// <summary>Field number for the "derived_image" field.</summary>
    public const int DerivedImageFieldNumber = 10;
    /// <summary>
    /// Describes how this resource derives from the basis in the associated
    /// note.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Grafeas.V1Beta1.Image.Details DerivedImage {
      get { return detailsCase_ == DetailsOneofCase.DerivedImage ? (global::Grafeas.V1Beta1.Image.Details) details_ : null; }
      set {
        details_ = value;
        detailsCase_ = value == null ? DetailsOneofCase.None : DetailsOneofCase.DerivedImage;
      }
    }

    /// <summary>Field number for the "installation" field.</summary>
    public const int InstallationFieldNumber = 11;
    /// <summary>
    /// Describes the installation of a package on the linked resource.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Grafeas.V1Beta1.Package.Details Installation {
      get { return detailsCase_ == DetailsOneofCase.Installation ? (global::Grafeas.V1Beta1.Package.Details) details_ : null; }
      set {
        details_ = value;
        detailsCase_ = value == null ? DetailsOneofCase.None : DetailsOneofCase.Installation;
      }
    }

    /// <summary>Field number for the "deployment" field.</summary>
    public const int DeploymentFieldNumber = 12;
    /// <summary>
    /// Describes the deployment of an artifact on a runtime.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Grafeas.V1Beta1.Deployment.Details Deployment {
      get { return detailsCase_ == DetailsOneofCase.Deployment ? (global::Grafeas.V1Beta1.Deployment.Details) details_ : null; }
      set {
        details_ = value;
        detailsCase_ = value == null ? DetailsOneofCase.None : DetailsOneofCase.Deployment;
      }
    }

    /// <summary>Field number for the "discovered" field.</summary>
    public const int DiscoveredFieldNumber = 13;
    /// <summary>
    /// Describes when a resource was discovered.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Grafeas.V1Beta1.Discovery.Details Discovered {
      get { return detailsCase_ == DetailsOneofCase.Discovered ? (global::Grafeas.V1Beta1.Discovery.Details) details_ : null; }
      set {
        details_ = value;
        detailsCase_ = value == null ? DetailsOneofCase.None : DetailsOneofCase.Discovered;
      }
    }

    /// <summary>Field number for the "attestation" field.</summary>
    public const int AttestationFieldNumber = 14;
    /// <summary>
    /// Describes an attestation of an artifact.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Grafeas.V1Beta1.Attestation.Details Attestation {
      get { return detailsCase_ == DetailsOneofCase.Attestation ? (global::Grafeas.V1Beta1.Attestation.Details) details_ : null; }
      set {
        details_ = value;
        detailsCase_ = value == null ? DetailsOneofCase.None : DetailsOneofCase.Attestation;
      }
    }

    private object details_;
    /// <summary>Enum of possible cases for the "details" oneof.</summary>
    public enum DetailsOneofCase {
      None = 0,
      Vulnerability = 8,
      Build = 9,
      DerivedImage = 10,
      Installation = 11,
      Deployment = 12,
      Discovered = 13,
      Attestation = 14,
    }
    private DetailsOneofCase detailsCase_ = DetailsOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DetailsOneofCase DetailsCase {
      get { return detailsCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDetails() {
      detailsCase_ = DetailsOneofCase.None;
      details_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Occurrence);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Occurrence other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (!object.Equals(Resource, other.Resource)) return false;
      if (NoteName != other.NoteName) return false;
      if (Kind != other.Kind) return false;
      if (Remediation != other.Remediation) return false;
      if (!object.Equals(CreateTime, other.CreateTime)) return false;
      if (!object.Equals(UpdateTime, other.UpdateTime)) return false;
      if (!object.Equals(Vulnerability, other.Vulnerability)) return false;
      if (!object.Equals(Build, other.Build)) return false;
      if (!object.Equals(DerivedImage, other.DerivedImage)) return false;
      if (!object.Equals(Installation, other.Installation)) return false;
      if (!object.Equals(Deployment, other.Deployment)) return false;
      if (!object.Equals(Discovered, other.Discovered)) return false;
      if (!object.Equals(Attestation, other.Attestation)) return false;
      if (DetailsCase != other.DetailsCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (resource_ != null) hash ^= Resource.GetHashCode();
      if (NoteName.Length != 0) hash ^= NoteName.GetHashCode();
      if (Kind != 0) hash ^= Kind.GetHashCode();
      if (Remediation.Length != 0) hash ^= Remediation.GetHashCode();
      if (createTime_ != null) hash ^= CreateTime.GetHashCode();
      if (updateTime_ != null) hash ^= UpdateTime.GetHashCode();
      if (detailsCase_ == DetailsOneofCase.Vulnerability) hash ^= Vulnerability.GetHashCode();
      if (detailsCase_ == DetailsOneofCase.Build) hash ^= Build.GetHashCode();
      if (detailsCase_ == DetailsOneofCase.DerivedImage) hash ^= DerivedImage.GetHashCode();
      if (detailsCase_ == DetailsOneofCase.Installation) hash ^= Installation.GetHashCode();
      if (detailsCase_ == DetailsOneofCase.Deployment) hash ^= Deployment.GetHashCode();
      if (detailsCase_ == DetailsOneofCase.Discovered) hash ^= Discovered.GetHashCode();
      if (detailsCase_ == DetailsOneofCase.Attestation) hash ^= Attestation.GetHashCode();
      hash ^= (int) detailsCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (resource_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Resource);
      }
      if (NoteName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(NoteName);
      }
      if (Kind != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) Kind);
      }
      if (Remediation.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Remediation);
      }
      if (createTime_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(CreateTime);
      }
      if (updateTime_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(UpdateTime);
      }
      if (detailsCase_ == DetailsOneofCase.Vulnerability) {
        output.WriteRawTag(66);
        output.WriteMessage(Vulnerability);
      }
      if (detailsCase_ == DetailsOneofCase.Build) {
        output.WriteRawTag(74);
        output.WriteMessage(Build);
      }
      if (detailsCase_ == DetailsOneofCase.DerivedImage) {
        output.WriteRawTag(82);
        output.WriteMessage(DerivedImage);
      }
      if (detailsCase_ == DetailsOneofCase.Installation) {
        output.WriteRawTag(90);
        output.WriteMessage(Installation);
      }
      if (detailsCase_ == DetailsOneofCase.Deployment) {
        output.WriteRawTag(98);
        output.WriteMessage(Deployment);
      }
      if (detailsCase_ == DetailsOneofCase.Discovered) {
        output.WriteRawTag(106);
        output.WriteMessage(Discovered);
      }
      if (detailsCase_ == DetailsOneofCase.Attestation) {
        output.WriteRawTag(114);
        output.WriteMessage(Attestation);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (resource_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Resource);
      }
      if (NoteName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NoteName);
      }
      if (Kind != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Kind);
      }
      if (Remediation.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Remediation);
      }
      if (createTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CreateTime);
      }
      if (updateTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UpdateTime);
      }
      if (detailsCase_ == DetailsOneofCase.Vulnerability) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Vulnerability);
      }
      if (detailsCase_ == DetailsOneofCase.Build) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Build);
      }
      if (detailsCase_ == DetailsOneofCase.DerivedImage) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DerivedImage);
      }
      if (detailsCase_ == DetailsOneofCase.Installation) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Installation);
      }
      if (detailsCase_ == DetailsOneofCase.Deployment) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Deployment);
      }
      if (detailsCase_ == DetailsOneofCase.Discovered) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Discovered);
      }
      if (detailsCase_ == DetailsOneofCase.Attestation) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Attestation);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Occurrence other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.resource_ != null) {
        if (resource_ == null) {
          Resource = new global::Grafeas.V1Beta1.Resource();
        }
        Resource.MergeFrom(other.Resource);
      }
      if (other.NoteName.Length != 0) {
        NoteName = other.NoteName;
      }
      if (other.Kind != 0) {
        Kind = other.Kind;
      }
      if (other.Remediation.Length != 0) {
        Remediation = other.Remediation;
      }
      if (other.createTime_ != null) {
        if (createTime_ == null) {
          CreateTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        CreateTime.MergeFrom(other.CreateTime);
      }
      if (other.updateTime_ != null) {
        if (updateTime_ == null) {
          UpdateTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        UpdateTime.MergeFrom(other.UpdateTime);
      }
      switch (other.DetailsCase) {
        case DetailsOneofCase.Vulnerability:
          if (Vulnerability == null) {
            Vulnerability = new global::Grafeas.V1Beta1.Vulnerability.Details();
          }
          Vulnerability.MergeFrom(other.Vulnerability);
          break;
        case DetailsOneofCase.Build:
          if (Build == null) {
            Build = new global::Grafeas.V1Beta1.Build.Details();
          }
          Build.MergeFrom(other.Build);
          break;
        case DetailsOneofCase.DerivedImage:
          if (DerivedImage == null) {
            DerivedImage = new global::Grafeas.V1Beta1.Image.Details();
          }
          DerivedImage.MergeFrom(other.DerivedImage);
          break;
        case DetailsOneofCase.Installation:
          if (Installation == null) {
            Installation = new global::Grafeas.V1Beta1.Package.Details();
          }
          Installation.MergeFrom(other.Installation);
          break;
        case DetailsOneofCase.Deployment:
          if (Deployment == null) {
            Deployment = new global::Grafeas.V1Beta1.Deployment.Details();
          }
          Deployment.MergeFrom(other.Deployment);
          break;
        case DetailsOneofCase.Discovered:
          if (Discovered == null) {
            Discovered = new global::Grafeas.V1Beta1.Discovery.Details();
          }
          Discovered.MergeFrom(other.Discovered);
          break;
        case DetailsOneofCase.Attestation:
          if (Attestation == null) {
            Attestation = new global::Grafeas.V1Beta1.Attestation.Details();
          }
          Attestation.MergeFrom(other.Attestation);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            if (resource_ == null) {
              Resource = new global::Grafeas.V1Beta1.Resource();
            }
            input.ReadMessage(Resource);
            break;
          }
          case 26: {
            NoteName = input.ReadString();
            break;
          }
          case 32: {
            Kind = (global::Grafeas.V1Beta1.NoteKind) input.ReadEnum();
            break;
          }
          case 42: {
            Remediation = input.ReadString();
            break;
          }
          case 50: {
            if (createTime_ == null) {
              CreateTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(CreateTime);
            break;
          }
          case 58: {
            if (updateTime_ == null) {
              UpdateTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(UpdateTime);
            break;
          }
          case 66: {
            global::Grafeas.V1Beta1.Vulnerability.Details subBuilder = new global::Grafeas.V1Beta1.Vulnerability.Details();
            if (detailsCase_ == DetailsOneofCase.Vulnerability) {
              subBuilder.MergeFrom(Vulnerability);
            }
            input.ReadMessage(subBuilder);
            Vulnerability = subBuilder;
            break;
          }
          case 74: {
            global::Grafeas.V1Beta1.Build.Details subBuilder = new global::Grafeas.V1Beta1.Build.Details();
            if (detailsCase_ == DetailsOneofCase.Build) {
              subBuilder.MergeFrom(Build);
            }
            input.ReadMessage(subBuilder);
            Build = subBuilder;
            break;
          }
          case 82: {
            global::Grafeas.V1Beta1.Image.Details subBuilder = new global::Grafeas.V1Beta1.Image.Details();
            if (detailsCase_ == DetailsOneofCase.DerivedImage) {
              subBuilder.MergeFrom(DerivedImage);
            }
            input.ReadMessage(subBuilder);
            DerivedImage = subBuilder;
            break;
          }
          case 90: {
            global::Grafeas.V1Beta1.Package.Details subBuilder = new global::Grafeas.V1Beta1.Package.Details();
            if (detailsCase_ == DetailsOneofCase.Installation) {
              subBuilder.MergeFrom(Installation);
            }
            input.ReadMessage(subBuilder);
            Installation = subBuilder;
            break;
          }
          case 98: {
            global::Grafeas.V1Beta1.Deployment.Details subBuilder = new global::Grafeas.V1Beta1.Deployment.Details();
            if (detailsCase_ == DetailsOneofCase.Deployment) {
              subBuilder.MergeFrom(Deployment);
            }
            input.ReadMessage(subBuilder);
            Deployment = subBuilder;
            break;
          }
          case 106: {
            global::Grafeas.V1Beta1.Discovery.Details subBuilder = new global::Grafeas.V1Beta1.Discovery.Details();
            if (detailsCase_ == DetailsOneofCase.Discovered) {
              subBuilder.MergeFrom(Discovered);
            }
            input.ReadMessage(subBuilder);
            Discovered = subBuilder;
            break;
          }
          case 114: {
            global::Grafeas.V1Beta1.Attestation.Details subBuilder = new global::Grafeas.V1Beta1.Attestation.Details();
            if (detailsCase_ == DetailsOneofCase.Attestation) {
              subBuilder.MergeFrom(Attestation);
            }
            input.ReadMessage(subBuilder);
            Attestation = subBuilder;
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// An entity that can have metadata. For example, a Docker image.
  /// </summary>
  public sealed partial class Resource : pb::IMessage<Resource> {
    private static readonly pb::MessageParser<Resource> _parser = new pb::MessageParser<Resource>(() => new Resource());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Resource> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Grafeas.V1Beta1.GrafeasReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Resource() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Resource(Resource other) : this() {
      name_ = other.name_;
      uri_ = other.uri_;
      contentHash_ = other.contentHash_ != null ? other.contentHash_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Resource Clone() {
      return new Resource(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// The name of the resource. For example, the name of a Docker image -
    /// "Debian".
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "uri" field.</summary>
    public const int UriFieldNumber = 2;
    private string uri_ = "";
    /// <summary>
    /// The unique URI of the resource. For example,
    /// `https://gcr.io/project/image@sha256:foo` for a Docker image.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Uri {
      get { return uri_; }
      set {
        uri_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "content_hash" field.</summary>
    public const int ContentHashFieldNumber = 3;
    private global::Grafeas.V1Beta1.Provenance.Hash contentHash_;
    /// <summary>
    /// The hash of the resource content. For example, the Docker digest.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Grafeas.V1Beta1.Provenance.Hash ContentHash {
      get { return contentHash_; }
      set {
        contentHash_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Resource);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Resource other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Uri != other.Uri) return false;
      if (!object.Equals(ContentHash, other.ContentHash)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Uri.Length != 0) hash ^= Uri.GetHashCode();
      if (contentHash_ != null) hash ^= ContentHash.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (Uri.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Uri);
      }
      if (contentHash_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(ContentHash);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Uri.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Uri);
      }
      if (contentHash_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ContentHash);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Resource other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Uri.Length != 0) {
        Uri = other.Uri;
      }
      if (other.contentHash_ != null) {
        if (contentHash_ == null) {
          ContentHash = new global::Grafeas.V1Beta1.Provenance.Hash();
        }
        ContentHash.MergeFrom(other.ContentHash);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            Uri = input.ReadString();
            break;
          }
          case 26: {
            if (contentHash_ == null) {
              ContentHash = new global::Grafeas.V1Beta1.Provenance.Hash();
            }
            input.ReadMessage(ContentHash);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// A type of analysis that can be done for a resource.
  /// </summary>
  public sealed partial class Note : pb::IMessage<Note> {
    private static readonly pb::MessageParser<Note> _parser = new pb::MessageParser<Note>(() => new Note());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Note> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Grafeas.V1Beta1.GrafeasReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Note() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Note(Note other) : this() {
      name_ = other.name_;
      shortDescription_ = other.shortDescription_;
      longDescription_ = other.longDescription_;
      kind_ = other.kind_;
      relatedUrl_ = other.relatedUrl_.Clone();
      expirationTime_ = other.expirationTime_ != null ? other.expirationTime_.Clone() : null;
      createTime_ = other.createTime_ != null ? other.createTime_.Clone() : null;
      updateTime_ = other.updateTime_ != null ? other.updateTime_.Clone() : null;
      relatedNoteNames_ = other.relatedNoteNames_.Clone();
      switch (other.TypeCase) {
        case TypeOneofCase.Vulnerability:
          Vulnerability = other.Vulnerability.Clone();
          break;
        case TypeOneofCase.Build:
          Build = other.Build.Clone();
          break;
        case TypeOneofCase.BaseImage:
          BaseImage = other.BaseImage.Clone();
          break;
        case TypeOneofCase.Package:
          Package = other.Package.Clone();
          break;
        case TypeOneofCase.Deployable:
          Deployable = other.Deployable.Clone();
          break;
        case TypeOneofCase.Discovery:
          Discovery = other.Discovery.Clone();
          break;
        case TypeOneofCase.AttestationAuthority:
          AttestationAuthority = other.AttestationAuthority.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Note Clone() {
      return new Note(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// Output only. The name of the note in the form of
    /// `projects/[PROVIDER_ID]/notes/[NOTE_ID]`.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "short_description" field.</summary>
    public const int ShortDescriptionFieldNumber = 2;
    private string shortDescription_ = "";
    /// <summary>
    /// A one sentence description of this note.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ShortDescription {
      get { return shortDescription_; }
      set {
        shortDescription_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "long_description" field.</summary>
    public const int LongDescriptionFieldNumber = 3;
    private string longDescription_ = "";
    /// <summary>
    /// A detailed description of this note.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LongDescription {
      get { return longDescription_; }
      set {
        longDescription_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "kind" field.</summary>
    public const int KindFieldNumber = 4;
    private global::Grafeas.V1Beta1.NoteKind kind_ = 0;
    /// <summary>
    /// Output only. The type of analysis. This field can be used as a filter in
    /// list requests.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Grafeas.V1Beta1.NoteKind Kind {
      get { return kind_; }
      set {
        kind_ = value;
      }
    }

    /// <summary>Field number for the "related_url" field.</summary>
    public const int RelatedUrlFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Grafeas.V1Beta1.RelatedUrl> _repeated_relatedUrl_codec
        = pb::FieldCodec.ForMessage(42, global::Grafeas.V1Beta1.RelatedUrl.Parser);
    private readonly pbc::RepeatedField<global::Grafeas.V1Beta1.RelatedUrl> relatedUrl_ = new pbc::RepeatedField<global::Grafeas.V1Beta1.RelatedUrl>();
    /// <summary>
    /// URLs associated with this note.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Grafeas.V1Beta1.RelatedUrl> RelatedUrl {
      get { return relatedUrl_; }
    }

    /// <summary>Field number for the "expiration_time" field.</summary>
    public const int ExpirationTimeFieldNumber = 6;
    private global::Google.Protobuf.WellKnownTypes.Timestamp expirationTime_;
    /// <summary>
    /// Time of expiration for this note. Empty if note does not expire.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp ExpirationTime {
      get { return expirationTime_; }
      set {
        expirationTime_ = value;
      }
    }

    /// <summary>Field number for the "create_time" field.</summary>
    public const int CreateTimeFieldNumber = 7;
    private global::Google.Protobuf.WellKnownTypes.Timestamp createTime_;
    /// <summary>
    /// Output only. The time this note was created. This field can be used as a
    /// filter in list requests.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp CreateTime {
      get { return createTime_; }
      set {
        createTime_ = value;
      }
    }

    /// <summary>Field number for the "update_time" field.</summary>
    public const int UpdateTimeFieldNumber = 8;
    private global::Google.Protobuf.WellKnownTypes.Timestamp updateTime_;
    /// <summary>
    /// Output only. The time this note was last updated. This field can be used as
    /// a filter in list requests.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp UpdateTime {
      get { return updateTime_; }
      set {
        updateTime_ = value;
      }
    }

    /// <summary>Field number for the "related_note_names" field.</summary>
    public const int RelatedNoteNamesFieldNumber = 9;
    private static readonly pb::FieldCodec<string> _repeated_relatedNoteNames_codec
        = pb::FieldCodec.ForString(74);
    private readonly pbc::RepeatedField<string> relatedNoteNames_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// Other notes related to this note.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> RelatedNoteNames {
      get { return relatedNoteNames_; }
    }

    /// <summary>Field number for the "vulnerability" field.</summary>
    public const int VulnerabilityFieldNumber = 10;
    /// <summary>
    /// A note describing a package vulnerability.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Grafeas.V1Beta1.Vulnerability.Vulnerability Vulnerability {
      get { return typeCase_ == TypeOneofCase.Vulnerability ? (global::Grafeas.V1Beta1.Vulnerability.Vulnerability) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.Vulnerability;
      }
    }

    /// <summary>Field number for the "build" field.</summary>
    public const int BuildFieldNumber = 11;
    /// <summary>
    /// A note describing build provenance for a verifiable build.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Grafeas.V1Beta1.Build.Build Build {
      get { return typeCase_ == TypeOneofCase.Build ? (global::Grafeas.V1Beta1.Build.Build) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.Build;
      }
    }

    /// <summary>Field number for the "base_image" field.</summary>
    public const int BaseImageFieldNumber = 12;
    /// <summary>
    /// A note describing a base image.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Grafeas.V1Beta1.Image.Basis BaseImage {
      get { return typeCase_ == TypeOneofCase.BaseImage ? (global::Grafeas.V1Beta1.Image.Basis) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.BaseImage;
      }
    }

    /// <summary>Field number for the "package" field.</summary>
    public const int PackageFieldNumber = 13;
    /// <summary>
    /// A note describing a package hosted by various package managers.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Grafeas.V1Beta1.Package.Package Package {
      get { return typeCase_ == TypeOneofCase.Package ? (global::Grafeas.V1Beta1.Package.Package) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.Package;
      }
    }

    /// <summary>Field number for the "deployable" field.</summary>
    public const int DeployableFieldNumber = 14;
    /// <summary>
    /// A note describing something that can be deployed.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Grafeas.V1Beta1.Deployment.Deployable Deployable {
      get { return typeCase_ == TypeOneofCase.Deployable ? (global::Grafeas.V1Beta1.Deployment.Deployable) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.Deployable;
      }
    }

    /// <summary>Field number for the "discovery" field.</summary>
    public const int DiscoveryFieldNumber = 15;
    /// <summary>
    /// A note describing the initial analysis of a resource.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Grafeas.V1Beta1.Discovery.Discovery Discovery {
      get { return typeCase_ == TypeOneofCase.Discovery ? (global::Grafeas.V1Beta1.Discovery.Discovery) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.Discovery;
      }
    }

    /// <summary>Field number for the "attestation_authority" field.</summary>
    public const int AttestationAuthorityFieldNumber = 16;
    /// <summary>
    /// A note describing an attestation role.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Grafeas.V1Beta1.Attestation.Authority AttestationAuthority {
      get { return typeCase_ == TypeOneofCase.AttestationAuthority ? (global::Grafeas.V1Beta1.Attestation.Authority) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.AttestationAuthority;
      }
    }

    private object type_;
    /// <summary>Enum of possible cases for the "type" oneof.</summary>
    public enum TypeOneofCase {
      None = 0,
      Vulnerability = 10,
      Build = 11,
      BaseImage = 12,
      Package = 13,
      Deployable = 14,
      Discovery = 15,
      AttestationAuthority = 16,
    }
    private TypeOneofCase typeCase_ = TypeOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TypeOneofCase TypeCase {
      get { return typeCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearType() {
      typeCase_ = TypeOneofCase.None;
      type_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Note);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Note other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (ShortDescription != other.ShortDescription) return false;
      if (LongDescription != other.LongDescription) return false;
      if (Kind != other.Kind) return false;
      if(!relatedUrl_.Equals(other.relatedUrl_)) return false;
      if (!object.Equals(ExpirationTime, other.ExpirationTime)) return false;
      if (!object.Equals(CreateTime, other.CreateTime)) return false;
      if (!object.Equals(UpdateTime, other.UpdateTime)) return false;
      if(!relatedNoteNames_.Equals(other.relatedNoteNames_)) return false;
      if (!object.Equals(Vulnerability, other.Vulnerability)) return false;
      if (!object.Equals(Build, other.Build)) return false;
      if (!object.Equals(BaseImage, other.BaseImage)) return false;
      if (!object.Equals(Package, other.Package)) return false;
      if (!object.Equals(Deployable, other.Deployable)) return false;
      if (!object.Equals(Discovery, other.Discovery)) return false;
      if (!object.Equals(AttestationAuthority, other.AttestationAuthority)) return false;
      if (TypeCase != other.TypeCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (ShortDescription.Length != 0) hash ^= ShortDescription.GetHashCode();
      if (LongDescription.Length != 0) hash ^= LongDescription.GetHashCode();
      if (Kind != 0) hash ^= Kind.GetHashCode();
      hash ^= relatedUrl_.GetHashCode();
      if (expirationTime_ != null) hash ^= ExpirationTime.GetHashCode();
      if (createTime_ != null) hash ^= CreateTime.GetHashCode();
      if (updateTime_ != null) hash ^= UpdateTime.GetHashCode();
      hash ^= relatedNoteNames_.GetHashCode();
      if (typeCase_ == TypeOneofCase.Vulnerability) hash ^= Vulnerability.GetHashCode();
      if (typeCase_ == TypeOneofCase.Build) hash ^= Build.GetHashCode();
      if (typeCase_ == TypeOneofCase.BaseImage) hash ^= BaseImage.GetHashCode();
      if (typeCase_ == TypeOneofCase.Package) hash ^= Package.GetHashCode();
      if (typeCase_ == TypeOneofCase.Deployable) hash ^= Deployable.GetHashCode();
      if (typeCase_ == TypeOneofCase.Discovery) hash ^= Discovery.GetHashCode();
      if (typeCase_ == TypeOneofCase.AttestationAuthority) hash ^= AttestationAuthority.GetHashCode();
      hash ^= (int) typeCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (ShortDescription.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ShortDescription);
      }
      if (LongDescription.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(LongDescription);
      }
      if (Kind != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) Kind);
      }
      relatedUrl_.WriteTo(output, _repeated_relatedUrl_codec);
      if (expirationTime_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(ExpirationTime);
      }
      if (createTime_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(CreateTime);
      }
      if (updateTime_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(UpdateTime);
      }
      relatedNoteNames_.WriteTo(output, _repeated_relatedNoteNames_codec);
      if (typeCase_ == TypeOneofCase.Vulnerability) {
        output.WriteRawTag(82);
        output.WriteMessage(Vulnerability);
      }
      if (typeCase_ == TypeOneofCase.Build) {
        output.WriteRawTag(90);
        output.WriteMessage(Build);
      }
      if (typeCase_ == TypeOneofCase.BaseImage) {
        output.WriteRawTag(98);
        output.WriteMessage(BaseImage);
      }
      if (typeCase_ == TypeOneofCase.Package) {
        output.WriteRawTag(106);
        output.WriteMessage(Package);
      }
      if (typeCase_ == TypeOneofCase.Deployable) {
        output.WriteRawTag(114);
        output.WriteMessage(Deployable);
      }
      if (typeCase_ == TypeOneofCase.Discovery) {
        output.WriteRawTag(122);
        output.WriteMessage(Discovery);
      }
      if (typeCase_ == TypeOneofCase.AttestationAuthority) {
        output.WriteRawTag(130, 1);
        output.WriteMessage(AttestationAuthority);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (ShortDescription.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ShortDescription);
      }
      if (LongDescription.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LongDescription);
      }
      if (Kind != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Kind);
      }
      size += relatedUrl_.CalculateSize(_repeated_relatedUrl_codec);
      if (expirationTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ExpirationTime);
      }
      if (createTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CreateTime);
      }
      if (updateTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UpdateTime);
      }
      size += relatedNoteNames_.CalculateSize(_repeated_relatedNoteNames_codec);
      if (typeCase_ == TypeOneofCase.Vulnerability) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Vulnerability);
      }
      if (typeCase_ == TypeOneofCase.Build) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Build);
      }
      if (typeCase_ == TypeOneofCase.BaseImage) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BaseImage);
      }
      if (typeCase_ == TypeOneofCase.Package) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Package);
      }
      if (typeCase_ == TypeOneofCase.Deployable) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Deployable);
      }
      if (typeCase_ == TypeOneofCase.Discovery) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Discovery);
      }
      if (typeCase_ == TypeOneofCase.AttestationAuthority) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(AttestationAuthority);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Note other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.ShortDescription.Length != 0) {
        ShortDescription = other.ShortDescription;
      }
      if (other.LongDescription.Length != 0) {
        LongDescription = other.LongDescription;
      }
      if (other.Kind != 0) {
        Kind = other.Kind;
      }
      relatedUrl_.Add(other.relatedUrl_);
      if (other.expirationTime_ != null) {
        if (expirationTime_ == null) {
          ExpirationTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        ExpirationTime.MergeFrom(other.ExpirationTime);
      }
      if (other.createTime_ != null) {
        if (createTime_ == null) {
          CreateTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        CreateTime.MergeFrom(other.CreateTime);
      }
      if (other.updateTime_ != null) {
        if (updateTime_ == null) {
          UpdateTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        UpdateTime.MergeFrom(other.UpdateTime);
      }
      relatedNoteNames_.Add(other.relatedNoteNames_);
      switch (other.TypeCase) {
        case TypeOneofCase.Vulnerability:
          if (Vulnerability == null) {
            Vulnerability = new global::Grafeas.V1Beta1.Vulnerability.Vulnerability();
          }
          Vulnerability.MergeFrom(other.Vulnerability);
          break;
        case TypeOneofCase.Build:
          if (Build == null) {
            Build = new global::Grafeas.V1Beta1.Build.Build();
          }
          Build.MergeFrom(other.Build);
          break;
        case TypeOneofCase.BaseImage:
          if (BaseImage == null) {
            BaseImage = new global::Grafeas.V1Beta1.Image.Basis();
          }
          BaseImage.MergeFrom(other.BaseImage);
          break;
        case TypeOneofCase.Package:
          if (Package == null) {
            Package = new global::Grafeas.V1Beta1.Package.Package();
          }
          Package.MergeFrom(other.Package);
          break;
        case TypeOneofCase.Deployable:
          if (Deployable == null) {
            Deployable = new global::Grafeas.V1Beta1.Deployment.Deployable();
          }
          Deployable.MergeFrom(other.Deployable);
          break;
        case TypeOneofCase.Discovery:
          if (Discovery == null) {
            Discovery = new global::Grafeas.V1Beta1.Discovery.Discovery();
          }
          Discovery.MergeFrom(other.Discovery);
          break;
        case TypeOneofCase.AttestationAuthority:
          if (AttestationAuthority == null) {
            AttestationAuthority = new global::Grafeas.V1Beta1.Attestation.Authority();
          }
          AttestationAuthority.MergeFrom(other.AttestationAuthority);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            ShortDescription = input.ReadString();
            break;
          }
          case 26: {
            LongDescription = input.ReadString();
            break;
          }
          case 32: {
            Kind = (global::Grafeas.V1Beta1.NoteKind) input.ReadEnum();
            break;
          }
          case 42: {
            relatedUrl_.AddEntriesFrom(input, _repeated_relatedUrl_codec);
            break;
          }
          case 50: {
            if (expirationTime_ == null) {
              ExpirationTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(ExpirationTime);
            break;
          }
          case 58: {
            if (createTime_ == null) {
              CreateTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(CreateTime);
            break;
          }
          case 66: {
            if (updateTime_ == null) {
              UpdateTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(UpdateTime);
            break;
          }
          case 74: {
            relatedNoteNames_.AddEntriesFrom(input, _repeated_relatedNoteNames_codec);
            break;
          }
          case 82: {
            global::Grafeas.V1Beta1.Vulnerability.Vulnerability subBuilder = new global::Grafeas.V1Beta1.Vulnerability.Vulnerability();
            if (typeCase_ == TypeOneofCase.Vulnerability) {
              subBuilder.MergeFrom(Vulnerability);
            }
            input.ReadMessage(subBuilder);
            Vulnerability = subBuilder;
            break;
          }
          case 90: {
            global::Grafeas.V1Beta1.Build.Build subBuilder = new global::Grafeas.V1Beta1.Build.Build();
            if (typeCase_ == TypeOneofCase.Build) {
              subBuilder.MergeFrom(Build);
            }
            input.ReadMessage(subBuilder);
            Build = subBuilder;
            break;
          }
          case 98: {
            global::Grafeas.V1Beta1.Image.Basis subBuilder = new global::Grafeas.V1Beta1.Image.Basis();
            if (typeCase_ == TypeOneofCase.BaseImage) {
              subBuilder.MergeFrom(BaseImage);
            }
            input.ReadMessage(subBuilder);
            BaseImage = subBuilder;
            break;
          }
          case 106: {
            global::Grafeas.V1Beta1.Package.Package subBuilder = new global::Grafeas.V1Beta1.Package.Package();
            if (typeCase_ == TypeOneofCase.Package) {
              subBuilder.MergeFrom(Package);
            }
            input.ReadMessage(subBuilder);
            Package = subBuilder;
            break;
          }
          case 114: {
            global::Grafeas.V1Beta1.Deployment.Deployable subBuilder = new global::Grafeas.V1Beta1.Deployment.Deployable();
            if (typeCase_ == TypeOneofCase.Deployable) {
              subBuilder.MergeFrom(Deployable);
            }
            input.ReadMessage(subBuilder);
            Deployable = subBuilder;
            break;
          }
          case 122: {
            global::Grafeas.V1Beta1.Discovery.Discovery subBuilder = new global::Grafeas.V1Beta1.Discovery.Discovery();
            if (typeCase_ == TypeOneofCase.Discovery) {
              subBuilder.MergeFrom(Discovery);
            }
            input.ReadMessage(subBuilder);
            Discovery = subBuilder;
            break;
          }
          case 130: {
            global::Grafeas.V1Beta1.Attestation.Authority subBuilder = new global::Grafeas.V1Beta1.Attestation.Authority();
            if (typeCase_ == TypeOneofCase.AttestationAuthority) {
              subBuilder.MergeFrom(AttestationAuthority);
            }
            input.ReadMessage(subBuilder);
            AttestationAuthority = subBuilder;
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Request to get an occurrence.
  /// </summary>
  public sealed partial class GetOccurrenceRequest : pb::IMessage<GetOccurrenceRequest> {
    private static readonly pb::MessageParser<GetOccurrenceRequest> _parser = new pb::MessageParser<GetOccurrenceRequest>(() => new GetOccurrenceRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetOccurrenceRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Grafeas.V1Beta1.GrafeasReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetOccurrenceRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetOccurrenceRequest(GetOccurrenceRequest other) : this() {
      name_ = other.name_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetOccurrenceRequest Clone() {
      return new GetOccurrenceRequest(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// The name of the occurrence in the form of
    /// `projects/[PROJECT_ID]/occurrences/[OCCURRENCE_ID]`.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetOccurrenceRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetOccurrenceRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetOccurrenceRequest other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Request to list occurrences.
  /// </summary>
  public sealed partial class ListOccurrencesRequest : pb::IMessage<ListOccurrencesRequest> {
    private static readonly pb::MessageParser<ListOccurrencesRequest> _parser = new pb::MessageParser<ListOccurrencesRequest>(() => new ListOccurrencesRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListOccurrencesRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Grafeas.V1Beta1.GrafeasReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListOccurrencesRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListOccurrencesRequest(ListOccurrencesRequest other) : this() {
      parent_ = other.parent_;
      filter_ = other.filter_;
      pageSize_ = other.pageSize_;
      pageToken_ = other.pageToken_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListOccurrencesRequest Clone() {
      return new ListOccurrencesRequest(this);
    }

    /// <summary>Field number for the "parent" field.</summary>
    public const int ParentFieldNumber = 1;
    private string parent_ = "";
    /// <summary>
    /// The name of the project to list occurrences for in the form of
    /// `projects/[PROJECT_ID]`.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Parent {
      get { return parent_; }
      set {
        parent_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "filter" field.</summary>
    public const int FilterFieldNumber = 2;
    private string filter_ = "";
    /// <summary>
    /// The filter expression.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Filter {
      get { return filter_; }
      set {
        filter_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "page_size" field.</summary>
    public const int PageSizeFieldNumber = 3;
    private int pageSize_;
    /// <summary>
    /// Number of occurrences to return in the list.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PageSize {
      get { return pageSize_; }
      set {
        pageSize_ = value;
      }
    }

    /// <summary>Field number for the "page_token" field.</summary>
    public const int PageTokenFieldNumber = 4;
    private string pageToken_ = "";
    /// <summary>
    /// Token to provide to skip to a particular spot in the list.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PageToken {
      get { return pageToken_; }
      set {
        pageToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListOccurrencesRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListOccurrencesRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Parent != other.Parent) return false;
      if (Filter != other.Filter) return false;
      if (PageSize != other.PageSize) return false;
      if (PageToken != other.PageToken) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Parent.Length != 0) hash ^= Parent.GetHashCode();
      if (Filter.Length != 0) hash ^= Filter.GetHashCode();
      if (PageSize != 0) hash ^= PageSize.GetHashCode();
      if (PageToken.Length != 0) hash ^= PageToken.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Parent.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Parent);
      }
      if (Filter.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Filter);
      }
      if (PageSize != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(PageSize);
      }
      if (PageToken.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(PageToken);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Parent.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Parent);
      }
      if (Filter.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Filter);
      }
      if (PageSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PageSize);
      }
      if (PageToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PageToken);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListOccurrencesRequest other) {
      if (other == null) {
        return;
      }
      if (other.Parent.Length != 0) {
        Parent = other.Parent;
      }
      if (other.Filter.Length != 0) {
        Filter = other.Filter;
      }
      if (other.PageSize != 0) {
        PageSize = other.PageSize;
      }
      if (other.PageToken.Length != 0) {
        PageToken = other.PageToken;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Parent = input.ReadString();
            break;
          }
          case 18: {
            Filter = input.ReadString();
            break;
          }
          case 24: {
            PageSize = input.ReadInt32();
            break;
          }
          case 34: {
            PageToken = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Response for listing occurrences.
  /// </summary>
  public sealed partial class ListOccurrencesResponse : pb::IMessage<ListOccurrencesResponse> {
    private static readonly pb::MessageParser<ListOccurrencesResponse> _parser = new pb::MessageParser<ListOccurrencesResponse>(() => new ListOccurrencesResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListOccurrencesResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Grafeas.V1Beta1.GrafeasReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListOccurrencesResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListOccurrencesResponse(ListOccurrencesResponse other) : this() {
      occurrences_ = other.occurrences_.Clone();
      nextPageToken_ = other.nextPageToken_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListOccurrencesResponse Clone() {
      return new ListOccurrencesResponse(this);
    }

    /// <summary>Field number for the "occurrences" field.</summary>
    public const int OccurrencesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Grafeas.V1Beta1.Occurrence> _repeated_occurrences_codec
        = pb::FieldCodec.ForMessage(10, global::Grafeas.V1Beta1.Occurrence.Parser);
    private readonly pbc::RepeatedField<global::Grafeas.V1Beta1.Occurrence> occurrences_ = new pbc::RepeatedField<global::Grafeas.V1Beta1.Occurrence>();
    /// <summary>
    /// The occurrences requested.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Grafeas.V1Beta1.Occurrence> Occurrences {
      get { return occurrences_; }
    }

    /// <summary>Field number for the "next_page_token" field.</summary>
    public const int NextPageTokenFieldNumber = 2;
    private string nextPageToken_ = "";
    /// <summary>
    /// The next pagination token in the list response. It should be used as
    /// `page_token` for the following request. An empty value means no more
    /// results.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NextPageToken {
      get { return nextPageToken_; }
      set {
        nextPageToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListOccurrencesResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListOccurrencesResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!occurrences_.Equals(other.occurrences_)) return false;
      if (NextPageToken != other.NextPageToken) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= occurrences_.GetHashCode();
      if (NextPageToken.Length != 0) hash ^= NextPageToken.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      occurrences_.WriteTo(output, _repeated_occurrences_codec);
      if (NextPageToken.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(NextPageToken);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += occurrences_.CalculateSize(_repeated_occurrences_codec);
      if (NextPageToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NextPageToken);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListOccurrencesResponse other) {
      if (other == null) {
        return;
      }
      occurrences_.Add(other.occurrences_);
      if (other.NextPageToken.Length != 0) {
        NextPageToken = other.NextPageToken;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            occurrences_.AddEntriesFrom(input, _repeated_occurrences_codec);
            break;
          }
          case 18: {
            NextPageToken = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Request to delete a occurrence.
  /// </summary>
  public sealed partial class DeleteOccurrenceRequest : pb::IMessage<DeleteOccurrenceRequest> {
    private static readonly pb::MessageParser<DeleteOccurrenceRequest> _parser = new pb::MessageParser<DeleteOccurrenceRequest>(() => new DeleteOccurrenceRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeleteOccurrenceRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Grafeas.V1Beta1.GrafeasReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteOccurrenceRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteOccurrenceRequest(DeleteOccurrenceRequest other) : this() {
      name_ = other.name_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteOccurrenceRequest Clone() {
      return new DeleteOccurrenceRequest(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// The name of the occurrence in the form of
    /// `projects/[PROJECT_ID]/occurrences/[OCCURRENCE_ID]`.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeleteOccurrenceRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeleteOccurrenceRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeleteOccurrenceRequest other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Request to create a new occurrence.
  /// </summary>
  public sealed partial class CreateOccurrenceRequest : pb::IMessage<CreateOccurrenceRequest> {
    private static readonly pb::MessageParser<CreateOccurrenceRequest> _parser = new pb::MessageParser<CreateOccurrenceRequest>(() => new CreateOccurrenceRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CreateOccurrenceRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Grafeas.V1Beta1.GrafeasReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateOccurrenceRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateOccurrenceRequest(CreateOccurrenceRequest other) : this() {
      parent_ = other.parent_;
      occurrence_ = other.occurrence_ != null ? other.occurrence_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateOccurrenceRequest Clone() {
      return new CreateOccurrenceRequest(this);
    }

    /// <summary>Field number for the "parent" field.</summary>
    public const int ParentFieldNumber = 1;
    private string parent_ = "";
    /// <summary>
    /// The name of the project in the form of `projects/[PROJECT_ID]`, under which
    /// the occurrence is to be created.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Parent {
      get { return parent_; }
      set {
        parent_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "occurrence" field.</summary>
    public const int OccurrenceFieldNumber = 2;
    private global::Grafeas.V1Beta1.Occurrence occurrence_;
    /// <summary>
    /// The occurrence to create.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Grafeas.V1Beta1.Occurrence Occurrence {
      get { return occurrence_; }
      set {
        occurrence_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CreateOccurrenceRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CreateOccurrenceRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Parent != other.Parent) return false;
      if (!object.Equals(Occurrence, other.Occurrence)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Parent.Length != 0) hash ^= Parent.GetHashCode();
      if (occurrence_ != null) hash ^= Occurrence.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Parent.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Parent);
      }
      if (occurrence_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Occurrence);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Parent.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Parent);
      }
      if (occurrence_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Occurrence);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CreateOccurrenceRequest other) {
      if (other == null) {
        return;
      }
      if (other.Parent.Length != 0) {
        Parent = other.Parent;
      }
      if (other.occurrence_ != null) {
        if (occurrence_ == null) {
          Occurrence = new global::Grafeas.V1Beta1.Occurrence();
        }
        Occurrence.MergeFrom(other.Occurrence);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Parent = input.ReadString();
            break;
          }
          case 18: {
            if (occurrence_ == null) {
              Occurrence = new global::Grafeas.V1Beta1.Occurrence();
            }
            input.ReadMessage(Occurrence);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Request to update an occurrence.
  /// </summary>
  public sealed partial class UpdateOccurrenceRequest : pb::IMessage<UpdateOccurrenceRequest> {
    private static readonly pb::MessageParser<UpdateOccurrenceRequest> _parser = new pb::MessageParser<UpdateOccurrenceRequest>(() => new UpdateOccurrenceRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpdateOccurrenceRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Grafeas.V1Beta1.GrafeasReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateOccurrenceRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateOccurrenceRequest(UpdateOccurrenceRequest other) : this() {
      name_ = other.name_;
      occurrence_ = other.occurrence_ != null ? other.occurrence_.Clone() : null;
      updateMask_ = other.updateMask_ != null ? other.updateMask_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateOccurrenceRequest Clone() {
      return new UpdateOccurrenceRequest(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// The name of the occurrence in the form of
    /// `projects/[PROJECT_ID]/occurrences/[OCCURRENCE_ID]`.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "occurrence" field.</summary>
    public const int OccurrenceFieldNumber = 2;
    private global::Grafeas.V1Beta1.Occurrence occurrence_;
    /// <summary>
    /// The updated occurrence.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Grafeas.V1Beta1.Occurrence Occurrence {
      get { return occurrence_; }
      set {
        occurrence_ = value;
      }
    }

    /// <summary>Field number for the "update_mask" field.</summary>
    public const int UpdateMaskFieldNumber = 3;
    private global::Google.Protobuf.WellKnownTypes.FieldMask updateMask_;
    /// <summary>
    /// The fields to update.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.FieldMask UpdateMask {
      get { return updateMask_; }
      set {
        updateMask_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpdateOccurrenceRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpdateOccurrenceRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (!object.Equals(Occurrence, other.Occurrence)) return false;
      if (!object.Equals(UpdateMask, other.UpdateMask)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (occurrence_ != null) hash ^= Occurrence.GetHashCode();
      if (updateMask_ != null) hash ^= UpdateMask.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (occurrence_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Occurrence);
      }
      if (updateMask_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(UpdateMask);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (occurrence_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Occurrence);
      }
      if (updateMask_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UpdateMask);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpdateOccurrenceRequest other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.occurrence_ != null) {
        if (occurrence_ == null) {
          Occurrence = new global::Grafeas.V1Beta1.Occurrence();
        }
        Occurrence.MergeFrom(other.Occurrence);
      }
      if (other.updateMask_ != null) {
        if (updateMask_ == null) {
          UpdateMask = new global::Google.Protobuf.WellKnownTypes.FieldMask();
        }
        UpdateMask.MergeFrom(other.UpdateMask);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            if (occurrence_ == null) {
              Occurrence = new global::Grafeas.V1Beta1.Occurrence();
            }
            input.ReadMessage(Occurrence);
            break;
          }
          case 26: {
            if (updateMask_ == null) {
              UpdateMask = new global::Google.Protobuf.WellKnownTypes.FieldMask();
            }
            input.ReadMessage(UpdateMask);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Request to get a note.
  /// </summary>
  public sealed partial class GetNoteRequest : pb::IMessage<GetNoteRequest> {
    private static readonly pb::MessageParser<GetNoteRequest> _parser = new pb::MessageParser<GetNoteRequest>(() => new GetNoteRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetNoteRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Grafeas.V1Beta1.GrafeasReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetNoteRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetNoteRequest(GetNoteRequest other) : this() {
      name_ = other.name_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetNoteRequest Clone() {
      return new GetNoteRequest(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// The name of the note in the form of
    /// `projects/[PROVIDER_ID]/notes/[NOTE_ID]`.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetNoteRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetNoteRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetNoteRequest other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Request to get the note to which the specified occurrence is attached.
  /// </summary>
  public sealed partial class GetOccurrenceNoteRequest : pb::IMessage<GetOccurrenceNoteRequest> {
    private static readonly pb::MessageParser<GetOccurrenceNoteRequest> _parser = new pb::MessageParser<GetOccurrenceNoteRequest>(() => new GetOccurrenceNoteRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetOccurrenceNoteRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Grafeas.V1Beta1.GrafeasReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetOccurrenceNoteRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetOccurrenceNoteRequest(GetOccurrenceNoteRequest other) : this() {
      name_ = other.name_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetOccurrenceNoteRequest Clone() {
      return new GetOccurrenceNoteRequest(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// The name of the occurrence in the form of
    /// `projects/[PROJECT_ID]/occurrences/[OCCURRENCE_ID]`.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetOccurrenceNoteRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetOccurrenceNoteRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetOccurrenceNoteRequest other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Request to list notes.
  /// </summary>
  public sealed partial class ListNotesRequest : pb::IMessage<ListNotesRequest> {
    private static readonly pb::MessageParser<ListNotesRequest> _parser = new pb::MessageParser<ListNotesRequest>(() => new ListNotesRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListNotesRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Grafeas.V1Beta1.GrafeasReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListNotesRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListNotesRequest(ListNotesRequest other) : this() {
      parent_ = other.parent_;
      filter_ = other.filter_;
      pageSize_ = other.pageSize_;
      pageToken_ = other.pageToken_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListNotesRequest Clone() {
      return new ListNotesRequest(this);
    }

    /// <summary>Field number for the "parent" field.</summary>
    public const int ParentFieldNumber = 1;
    private string parent_ = "";
    /// <summary>
    /// The name of the project to list notes for in the form of
    /// `projects/[PROJECT_ID]`.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Parent {
      get { return parent_; }
      set {
        parent_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "filter" field.</summary>
    public const int FilterFieldNumber = 2;
    private string filter_ = "";
    /// <summary>
    /// The filter expression.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Filter {
      get { return filter_; }
      set {
        filter_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "page_size" field.</summary>
    public const int PageSizeFieldNumber = 3;
    private int pageSize_;
    /// <summary>
    /// Number of notes to return in the list.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PageSize {
      get { return pageSize_; }
      set {
        pageSize_ = value;
      }
    }

    /// <summary>Field number for the "page_token" field.</summary>
    public const int PageTokenFieldNumber = 4;
    private string pageToken_ = "";
    /// <summary>
    /// Token to provide to skip to a particular spot in the list.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PageToken {
      get { return pageToken_; }
      set {
        pageToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListNotesRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListNotesRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Parent != other.Parent) return false;
      if (Filter != other.Filter) return false;
      if (PageSize != other.PageSize) return false;
      if (PageToken != other.PageToken) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Parent.Length != 0) hash ^= Parent.GetHashCode();
      if (Filter.Length != 0) hash ^= Filter.GetHashCode();
      if (PageSize != 0) hash ^= PageSize.GetHashCode();
      if (PageToken.Length != 0) hash ^= PageToken.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Parent.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Parent);
      }
      if (Filter.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Filter);
      }
      if (PageSize != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(PageSize);
      }
      if (PageToken.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(PageToken);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Parent.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Parent);
      }
      if (Filter.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Filter);
      }
      if (PageSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PageSize);
      }
      if (PageToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PageToken);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListNotesRequest other) {
      if (other == null) {
        return;
      }
      if (other.Parent.Length != 0) {
        Parent = other.Parent;
      }
      if (other.Filter.Length != 0) {
        Filter = other.Filter;
      }
      if (other.PageSize != 0) {
        PageSize = other.PageSize;
      }
      if (other.PageToken.Length != 0) {
        PageToken = other.PageToken;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Parent = input.ReadString();
            break;
          }
          case 18: {
            Filter = input.ReadString();
            break;
          }
          case 24: {
            PageSize = input.ReadInt32();
            break;
          }
          case 34: {
            PageToken = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Response for listing notes.
  /// </summary>
  public sealed partial class ListNotesResponse : pb::IMessage<ListNotesResponse> {
    private static readonly pb::MessageParser<ListNotesResponse> _parser = new pb::MessageParser<ListNotesResponse>(() => new ListNotesResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListNotesResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Grafeas.V1Beta1.GrafeasReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListNotesResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListNotesResponse(ListNotesResponse other) : this() {
      notes_ = other.notes_.Clone();
      nextPageToken_ = other.nextPageToken_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListNotesResponse Clone() {
      return new ListNotesResponse(this);
    }

    /// <summary>Field number for the "notes" field.</summary>
    public const int NotesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Grafeas.V1Beta1.Note> _repeated_notes_codec
        = pb::FieldCodec.ForMessage(10, global::Grafeas.V1Beta1.Note.Parser);
    private readonly pbc::RepeatedField<global::Grafeas.V1Beta1.Note> notes_ = new pbc::RepeatedField<global::Grafeas.V1Beta1.Note>();
    /// <summary>
    /// The notes requested.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Grafeas.V1Beta1.Note> Notes {
      get { return notes_; }
    }

    /// <summary>Field number for the "next_page_token" field.</summary>
    public const int NextPageTokenFieldNumber = 2;
    private string nextPageToken_ = "";
    /// <summary>
    /// The next pagination token in the list response. It should be used as
    /// `page_token` for the following request. An empty value means no more
    /// results.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NextPageToken {
      get { return nextPageToken_; }
      set {
        nextPageToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListNotesResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListNotesResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!notes_.Equals(other.notes_)) return false;
      if (NextPageToken != other.NextPageToken) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= notes_.GetHashCode();
      if (NextPageToken.Length != 0) hash ^= NextPageToken.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      notes_.WriteTo(output, _repeated_notes_codec);
      if (NextPageToken.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(NextPageToken);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += notes_.CalculateSize(_repeated_notes_codec);
      if (NextPageToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NextPageToken);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListNotesResponse other) {
      if (other == null) {
        return;
      }
      notes_.Add(other.notes_);
      if (other.NextPageToken.Length != 0) {
        NextPageToken = other.NextPageToken;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            notes_.AddEntriesFrom(input, _repeated_notes_codec);
            break;
          }
          case 18: {
            NextPageToken = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Request to delete a note.
  /// </summary>
  public sealed partial class DeleteNoteRequest : pb::IMessage<DeleteNoteRequest> {
    private static readonly pb::MessageParser<DeleteNoteRequest> _parser = new pb::MessageParser<DeleteNoteRequest>(() => new DeleteNoteRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeleteNoteRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Grafeas.V1Beta1.GrafeasReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteNoteRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteNoteRequest(DeleteNoteRequest other) : this() {
      name_ = other.name_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteNoteRequest Clone() {
      return new DeleteNoteRequest(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// The name of the note in the form of
    /// `projects/[PROVIDER_ID]/notes/[NOTE_ID]`.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeleteNoteRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeleteNoteRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeleteNoteRequest other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Request to create a new note.
  /// </summary>
  public sealed partial class CreateNoteRequest : pb::IMessage<CreateNoteRequest> {
    private static readonly pb::MessageParser<CreateNoteRequest> _parser = new pb::MessageParser<CreateNoteRequest>(() => new CreateNoteRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CreateNoteRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Grafeas.V1Beta1.GrafeasReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateNoteRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateNoteRequest(CreateNoteRequest other) : this() {
      parent_ = other.parent_;
      noteId_ = other.noteId_;
      note_ = other.note_ != null ? other.note_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateNoteRequest Clone() {
      return new CreateNoteRequest(this);
    }

    /// <summary>Field number for the "parent" field.</summary>
    public const int ParentFieldNumber = 1;
    private string parent_ = "";
    /// <summary>
    /// The name of the project in the form of `projects/[PROJECT_ID]`, under which
    /// the note is to be created.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Parent {
      get { return parent_; }
      set {
        parent_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "note_id" field.</summary>
    public const int NoteIdFieldNumber = 2;
    private string noteId_ = "";
    /// <summary>
    /// The ID to use for this note.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NoteId {
      get { return noteId_; }
      set {
        noteId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "note" field.</summary>
    public const int NoteFieldNumber = 3;
    private global::Grafeas.V1Beta1.Note note_;
    /// <summary>
    /// The note to create.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Grafeas.V1Beta1.Note Note {
      get { return note_; }
      set {
        note_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CreateNoteRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CreateNoteRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Parent != other.Parent) return false;
      if (NoteId != other.NoteId) return false;
      if (!object.Equals(Note, other.Note)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Parent.Length != 0) hash ^= Parent.GetHashCode();
      if (NoteId.Length != 0) hash ^= NoteId.GetHashCode();
      if (note_ != null) hash ^= Note.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Parent.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Parent);
      }
      if (NoteId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(NoteId);
      }
      if (note_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Note);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Parent.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Parent);
      }
      if (NoteId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NoteId);
      }
      if (note_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Note);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CreateNoteRequest other) {
      if (other == null) {
        return;
      }
      if (other.Parent.Length != 0) {
        Parent = other.Parent;
      }
      if (other.NoteId.Length != 0) {
        NoteId = other.NoteId;
      }
      if (other.note_ != null) {
        if (note_ == null) {
          Note = new global::Grafeas.V1Beta1.Note();
        }
        Note.MergeFrom(other.Note);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Parent = input.ReadString();
            break;
          }
          case 18: {
            NoteId = input.ReadString();
            break;
          }
          case 26: {
            if (note_ == null) {
              Note = new global::Grafeas.V1Beta1.Note();
            }
            input.ReadMessage(Note);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Request to update a note.
  /// </summary>
  public sealed partial class UpdateNoteRequest : pb::IMessage<UpdateNoteRequest> {
    private static readonly pb::MessageParser<UpdateNoteRequest> _parser = new pb::MessageParser<UpdateNoteRequest>(() => new UpdateNoteRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpdateNoteRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Grafeas.V1Beta1.GrafeasReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateNoteRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateNoteRequest(UpdateNoteRequest other) : this() {
      name_ = other.name_;
      note_ = other.note_ != null ? other.note_.Clone() : null;
      updateMask_ = other.updateMask_ != null ? other.updateMask_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateNoteRequest Clone() {
      return new UpdateNoteRequest(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// The name of the note in the form of
    /// `projects/[PROVIDER_ID]/notes/[NOTE_ID]`.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "note" field.</summary>
    public const int NoteFieldNumber = 2;
    private global::Grafeas.V1Beta1.Note note_;
    /// <summary>
    /// The updated note.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Grafeas.V1Beta1.Note Note {
      get { return note_; }
      set {
        note_ = value;
      }
    }

    /// <summary>Field number for the "update_mask" field.</summary>
    public const int UpdateMaskFieldNumber = 3;
    private global::Google.Protobuf.WellKnownTypes.FieldMask updateMask_;
    /// <summary>
    /// The fields to update.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.FieldMask UpdateMask {
      get { return updateMask_; }
      set {
        updateMask_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpdateNoteRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpdateNoteRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (!object.Equals(Note, other.Note)) return false;
      if (!object.Equals(UpdateMask, other.UpdateMask)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (note_ != null) hash ^= Note.GetHashCode();
      if (updateMask_ != null) hash ^= UpdateMask.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (note_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Note);
      }
      if (updateMask_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(UpdateMask);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (note_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Note);
      }
      if (updateMask_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UpdateMask);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpdateNoteRequest other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.note_ != null) {
        if (note_ == null) {
          Note = new global::Grafeas.V1Beta1.Note();
        }
        Note.MergeFrom(other.Note);
      }
      if (other.updateMask_ != null) {
        if (updateMask_ == null) {
          UpdateMask = new global::Google.Protobuf.WellKnownTypes.FieldMask();
        }
        UpdateMask.MergeFrom(other.UpdateMask);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            if (note_ == null) {
              Note = new global::Grafeas.V1Beta1.Note();
            }
            input.ReadMessage(Note);
            break;
          }
          case 26: {
            if (updateMask_ == null) {
              UpdateMask = new global::Google.Protobuf.WellKnownTypes.FieldMask();
            }
            input.ReadMessage(UpdateMask);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Request to list occurrences for a note.
  /// </summary>
  public sealed partial class ListNoteOccurrencesRequest : pb::IMessage<ListNoteOccurrencesRequest> {
    private static readonly pb::MessageParser<ListNoteOccurrencesRequest> _parser = new pb::MessageParser<ListNoteOccurrencesRequest>(() => new ListNoteOccurrencesRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListNoteOccurrencesRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Grafeas.V1Beta1.GrafeasReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListNoteOccurrencesRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListNoteOccurrencesRequest(ListNoteOccurrencesRequest other) : this() {
      name_ = other.name_;
      filter_ = other.filter_;
      pageSize_ = other.pageSize_;
      pageToken_ = other.pageToken_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListNoteOccurrencesRequest Clone() {
      return new ListNoteOccurrencesRequest(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// The name of the note to list occurrences for in the form of
    /// `projects/[PROVIDER_ID]/notes/[NOTE_ID]`.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "filter" field.</summary>
    public const int FilterFieldNumber = 2;
    private string filter_ = "";
    /// <summary>
    /// The filter expression.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Filter {
      get { return filter_; }
      set {
        filter_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "page_size" field.</summary>
    public const int PageSizeFieldNumber = 3;
    private int pageSize_;
    /// <summary>
    /// Number of occurrences to return in the list.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PageSize {
      get { return pageSize_; }
      set {
        pageSize_ = value;
      }
    }

    /// <summary>Field number for the "page_token" field.</summary>
    public const int PageTokenFieldNumber = 4;
    private string pageToken_ = "";
    /// <summary>
    /// Token to provide to skip to a particular spot in the list.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PageToken {
      get { return pageToken_; }
      set {
        pageToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListNoteOccurrencesRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListNoteOccurrencesRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Filter != other.Filter) return false;
      if (PageSize != other.PageSize) return false;
      if (PageToken != other.PageToken) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Filter.Length != 0) hash ^= Filter.GetHashCode();
      if (PageSize != 0) hash ^= PageSize.GetHashCode();
      if (PageToken.Length != 0) hash ^= PageToken.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (Filter.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Filter);
      }
      if (PageSize != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(PageSize);
      }
      if (PageToken.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(PageToken);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Filter.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Filter);
      }
      if (PageSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PageSize);
      }
      if (PageToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PageToken);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListNoteOccurrencesRequest other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Filter.Length != 0) {
        Filter = other.Filter;
      }
      if (other.PageSize != 0) {
        PageSize = other.PageSize;
      }
      if (other.PageToken.Length != 0) {
        PageToken = other.PageToken;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            Filter = input.ReadString();
            break;
          }
          case 24: {
            PageSize = input.ReadInt32();
            break;
          }
          case 34: {
            PageToken = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Response for listing occurrences for a note.
  /// </summary>
  public sealed partial class ListNoteOccurrencesResponse : pb::IMessage<ListNoteOccurrencesResponse> {
    private static readonly pb::MessageParser<ListNoteOccurrencesResponse> _parser = new pb::MessageParser<ListNoteOccurrencesResponse>(() => new ListNoteOccurrencesResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListNoteOccurrencesResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Grafeas.V1Beta1.GrafeasReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListNoteOccurrencesResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListNoteOccurrencesResponse(ListNoteOccurrencesResponse other) : this() {
      occurrences_ = other.occurrences_.Clone();
      nextPageToken_ = other.nextPageToken_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListNoteOccurrencesResponse Clone() {
      return new ListNoteOccurrencesResponse(this);
    }

    /// <summary>Field number for the "occurrences" field.</summary>
    public const int OccurrencesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Grafeas.V1Beta1.Occurrence> _repeated_occurrences_codec
        = pb::FieldCodec.ForMessage(10, global::Grafeas.V1Beta1.Occurrence.Parser);
    private readonly pbc::RepeatedField<global::Grafeas.V1Beta1.Occurrence> occurrences_ = new pbc::RepeatedField<global::Grafeas.V1Beta1.Occurrence>();
    /// <summary>
    /// The occurrences attached to the specified note.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Grafeas.V1Beta1.Occurrence> Occurrences {
      get { return occurrences_; }
    }

    /// <summary>Field number for the "next_page_token" field.</summary>
    public const int NextPageTokenFieldNumber = 2;
    private string nextPageToken_ = "";
    /// <summary>
    /// Token to provide to skip to a particular spot in the list.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NextPageToken {
      get { return nextPageToken_; }
      set {
        nextPageToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListNoteOccurrencesResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListNoteOccurrencesResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!occurrences_.Equals(other.occurrences_)) return false;
      if (NextPageToken != other.NextPageToken) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= occurrences_.GetHashCode();
      if (NextPageToken.Length != 0) hash ^= NextPageToken.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      occurrences_.WriteTo(output, _repeated_occurrences_codec);
      if (NextPageToken.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(NextPageToken);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += occurrences_.CalculateSize(_repeated_occurrences_codec);
      if (NextPageToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NextPageToken);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListNoteOccurrencesResponse other) {
      if (other == null) {
        return;
      }
      occurrences_.Add(other.occurrences_);
      if (other.NextPageToken.Length != 0) {
        NextPageToken = other.NextPageToken;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            occurrences_.AddEntriesFrom(input, _repeated_occurrences_codec);
            break;
          }
          case 18: {
            NextPageToken = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Request to create notes in batch.
  /// </summary>
  public sealed partial class BatchCreateNotesRequest : pb::IMessage<BatchCreateNotesRequest> {
    private static readonly pb::MessageParser<BatchCreateNotesRequest> _parser = new pb::MessageParser<BatchCreateNotesRequest>(() => new BatchCreateNotesRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BatchCreateNotesRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Grafeas.V1Beta1.GrafeasReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BatchCreateNotesRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BatchCreateNotesRequest(BatchCreateNotesRequest other) : this() {
      parent_ = other.parent_;
      notes_ = other.notes_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BatchCreateNotesRequest Clone() {
      return new BatchCreateNotesRequest(this);
    }

    /// <summary>Field number for the "parent" field.</summary>
    public const int ParentFieldNumber = 1;
    private string parent_ = "";
    /// <summary>
    /// The name of the project in the form of `projects/[PROJECT_ID]`, under which
    /// the notes are to be created.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Parent {
      get { return parent_; }
      set {
        parent_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "notes" field.</summary>
    public const int NotesFieldNumber = 2;
    private static readonly pbc::MapField<string, global::Grafeas.V1Beta1.Note>.Codec _map_notes_codec
        = new pbc::MapField<string, global::Grafeas.V1Beta1.Note>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForMessage(18, global::Grafeas.V1Beta1.Note.Parser), 18);
    private readonly pbc::MapField<string, global::Grafeas.V1Beta1.Note> notes_ = new pbc::MapField<string, global::Grafeas.V1Beta1.Note>();
    /// <summary>
    /// The notes to create.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::Grafeas.V1Beta1.Note> Notes {
      get { return notes_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BatchCreateNotesRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BatchCreateNotesRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Parent != other.Parent) return false;
      if (!Notes.Equals(other.Notes)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Parent.Length != 0) hash ^= Parent.GetHashCode();
      hash ^= Notes.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Parent.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Parent);
      }
      notes_.WriteTo(output, _map_notes_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Parent.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Parent);
      }
      size += notes_.CalculateSize(_map_notes_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BatchCreateNotesRequest other) {
      if (other == null) {
        return;
      }
      if (other.Parent.Length != 0) {
        Parent = other.Parent;
      }
      notes_.Add(other.notes_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Parent = input.ReadString();
            break;
          }
          case 18: {
            notes_.AddEntriesFrom(input, _map_notes_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Response for creating notes in batch.
  /// </summary>
  public sealed partial class BatchCreateNotesResponse : pb::IMessage<BatchCreateNotesResponse> {
    private static readonly pb::MessageParser<BatchCreateNotesResponse> _parser = new pb::MessageParser<BatchCreateNotesResponse>(() => new BatchCreateNotesResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BatchCreateNotesResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Grafeas.V1Beta1.GrafeasReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BatchCreateNotesResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BatchCreateNotesResponse(BatchCreateNotesResponse other) : this() {
      notes_ = other.notes_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BatchCreateNotesResponse Clone() {
      return new BatchCreateNotesResponse(this);
    }

    /// <summary>Field number for the "notes" field.</summary>
    public const int NotesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Grafeas.V1Beta1.Note> _repeated_notes_codec
        = pb::FieldCodec.ForMessage(10, global::Grafeas.V1Beta1.Note.Parser);
    private readonly pbc::RepeatedField<global::Grafeas.V1Beta1.Note> notes_ = new pbc::RepeatedField<global::Grafeas.V1Beta1.Note>();
    /// <summary>
    /// The notes that were created.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Grafeas.V1Beta1.Note> Notes {
      get { return notes_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BatchCreateNotesResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BatchCreateNotesResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!notes_.Equals(other.notes_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= notes_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      notes_.WriteTo(output, _repeated_notes_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += notes_.CalculateSize(_repeated_notes_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BatchCreateNotesResponse other) {
      if (other == null) {
        return;
      }
      notes_.Add(other.notes_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            notes_.AddEntriesFrom(input, _repeated_notes_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Request to create occurrences in batch.
  /// </summary>
  public sealed partial class BatchCreateOccurrencesRequest : pb::IMessage<BatchCreateOccurrencesRequest> {
    private static readonly pb::MessageParser<BatchCreateOccurrencesRequest> _parser = new pb::MessageParser<BatchCreateOccurrencesRequest>(() => new BatchCreateOccurrencesRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BatchCreateOccurrencesRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Grafeas.V1Beta1.GrafeasReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BatchCreateOccurrencesRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BatchCreateOccurrencesRequest(BatchCreateOccurrencesRequest other) : this() {
      parent_ = other.parent_;
      occurrences_ = other.occurrences_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BatchCreateOccurrencesRequest Clone() {
      return new BatchCreateOccurrencesRequest(this);
    }

    /// <summary>Field number for the "parent" field.</summary>
    public const int ParentFieldNumber = 1;
    private string parent_ = "";
    /// <summary>
    /// The name of the project in the form of `projects/[PROJECT_ID]`, under which
    /// the occurrences are to be created.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Parent {
      get { return parent_; }
      set {
        parent_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "occurrences" field.</summary>
    public const int OccurrencesFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Grafeas.V1Beta1.Occurrence> _repeated_occurrences_codec
        = pb::FieldCodec.ForMessage(18, global::Grafeas.V1Beta1.Occurrence.Parser);
    private readonly pbc::RepeatedField<global::Grafeas.V1Beta1.Occurrence> occurrences_ = new pbc::RepeatedField<global::Grafeas.V1Beta1.Occurrence>();
    /// <summary>
    /// The occurrences to create.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Grafeas.V1Beta1.Occurrence> Occurrences {
      get { return occurrences_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BatchCreateOccurrencesRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BatchCreateOccurrencesRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Parent != other.Parent) return false;
      if(!occurrences_.Equals(other.occurrences_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Parent.Length != 0) hash ^= Parent.GetHashCode();
      hash ^= occurrences_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Parent.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Parent);
      }
      occurrences_.WriteTo(output, _repeated_occurrences_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Parent.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Parent);
      }
      size += occurrences_.CalculateSize(_repeated_occurrences_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BatchCreateOccurrencesRequest other) {
      if (other == null) {
        return;
      }
      if (other.Parent.Length != 0) {
        Parent = other.Parent;
      }
      occurrences_.Add(other.occurrences_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Parent = input.ReadString();
            break;
          }
          case 18: {
            occurrences_.AddEntriesFrom(input, _repeated_occurrences_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Response for creating occurrences in batch.
  /// </summary>
  public sealed partial class BatchCreateOccurrencesResponse : pb::IMessage<BatchCreateOccurrencesResponse> {
    private static readonly pb::MessageParser<BatchCreateOccurrencesResponse> _parser = new pb::MessageParser<BatchCreateOccurrencesResponse>(() => new BatchCreateOccurrencesResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BatchCreateOccurrencesResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Grafeas.V1Beta1.GrafeasReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BatchCreateOccurrencesResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BatchCreateOccurrencesResponse(BatchCreateOccurrencesResponse other) : this() {
      occurrences_ = other.occurrences_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BatchCreateOccurrencesResponse Clone() {
      return new BatchCreateOccurrencesResponse(this);
    }

    /// <summary>Field number for the "occurrences" field.</summary>
    public const int OccurrencesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Grafeas.V1Beta1.Occurrence> _repeated_occurrences_codec
        = pb::FieldCodec.ForMessage(10, global::Grafeas.V1Beta1.Occurrence.Parser);
    private readonly pbc::RepeatedField<global::Grafeas.V1Beta1.Occurrence> occurrences_ = new pbc::RepeatedField<global::Grafeas.V1Beta1.Occurrence>();
    /// <summary>
    /// The occurrences that were created.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Grafeas.V1Beta1.Occurrence> Occurrences {
      get { return occurrences_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BatchCreateOccurrencesResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BatchCreateOccurrencesResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!occurrences_.Equals(other.occurrences_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= occurrences_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      occurrences_.WriteTo(output, _repeated_occurrences_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += occurrences_.CalculateSize(_repeated_occurrences_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BatchCreateOccurrencesResponse other) {
      if (other == null) {
        return;
      }
      occurrences_.Add(other.occurrences_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            occurrences_.AddEntriesFrom(input, _repeated_occurrences_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Request to get a vulnerability summary for some set of occurrences.
  /// </summary>
  public sealed partial class GetVulnerabilityOccurrencesSummaryRequest : pb::IMessage<GetVulnerabilityOccurrencesSummaryRequest> {
    private static readonly pb::MessageParser<GetVulnerabilityOccurrencesSummaryRequest> _parser = new pb::MessageParser<GetVulnerabilityOccurrencesSummaryRequest>(() => new GetVulnerabilityOccurrencesSummaryRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetVulnerabilityOccurrencesSummaryRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Grafeas.V1Beta1.GrafeasReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetVulnerabilityOccurrencesSummaryRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetVulnerabilityOccurrencesSummaryRequest(GetVulnerabilityOccurrencesSummaryRequest other) : this() {
      parent_ = other.parent_;
      filter_ = other.filter_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetVulnerabilityOccurrencesSummaryRequest Clone() {
      return new GetVulnerabilityOccurrencesSummaryRequest(this);
    }

    /// <summary>Field number for the "parent" field.</summary>
    public const int ParentFieldNumber = 1;
    private string parent_ = "";
    /// <summary>
    /// The name of the project to get a vulnerability summary for in the form of
    /// `projects/[PROJECT_ID]`.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Parent {
      get { return parent_; }
      set {
        parent_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "filter" field.</summary>
    public const int FilterFieldNumber = 2;
    private string filter_ = "";
    /// <summary>
    /// The filter expression.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Filter {
      get { return filter_; }
      set {
        filter_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetVulnerabilityOccurrencesSummaryRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetVulnerabilityOccurrencesSummaryRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Parent != other.Parent) return false;
      if (Filter != other.Filter) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Parent.Length != 0) hash ^= Parent.GetHashCode();
      if (Filter.Length != 0) hash ^= Filter.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Parent.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Parent);
      }
      if (Filter.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Filter);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Parent.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Parent);
      }
      if (Filter.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Filter);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetVulnerabilityOccurrencesSummaryRequest other) {
      if (other == null) {
        return;
      }
      if (other.Parent.Length != 0) {
        Parent = other.Parent;
      }
      if (other.Filter.Length != 0) {
        Filter = other.Filter;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Parent = input.ReadString();
            break;
          }
          case 18: {
            Filter = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// A summary of how many vulnerability occurrences there are per resource and
  /// severity type.
  /// </summary>
  public sealed partial class VulnerabilityOccurrencesSummary : pb::IMessage<VulnerabilityOccurrencesSummary> {
    private static readonly pb::MessageParser<VulnerabilityOccurrencesSummary> _parser = new pb::MessageParser<VulnerabilityOccurrencesSummary>(() => new VulnerabilityOccurrencesSummary());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<VulnerabilityOccurrencesSummary> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Grafeas.V1Beta1.GrafeasReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VulnerabilityOccurrencesSummary() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VulnerabilityOccurrencesSummary(VulnerabilityOccurrencesSummary other) : this() {
      counts_ = other.counts_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VulnerabilityOccurrencesSummary Clone() {
      return new VulnerabilityOccurrencesSummary(this);
    }

    /// <summary>Field number for the "counts" field.</summary>
    public const int CountsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Grafeas.V1Beta1.VulnerabilityOccurrencesSummary.Types.FixableTotalByDigest> _repeated_counts_codec
        = pb::FieldCodec.ForMessage(10, global::Grafeas.V1Beta1.VulnerabilityOccurrencesSummary.Types.FixableTotalByDigest.Parser);
    private readonly pbc::RepeatedField<global::Grafeas.V1Beta1.VulnerabilityOccurrencesSummary.Types.FixableTotalByDigest> counts_ = new pbc::RepeatedField<global::Grafeas.V1Beta1.VulnerabilityOccurrencesSummary.Types.FixableTotalByDigest>();
    /// <summary>
    /// A listing by resource of the number of fixable and total vulnerabilities.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Grafeas.V1Beta1.VulnerabilityOccurrencesSummary.Types.FixableTotalByDigest> Counts {
      get { return counts_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as VulnerabilityOccurrencesSummary);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(VulnerabilityOccurrencesSummary other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!counts_.Equals(other.counts_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= counts_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      counts_.WriteTo(output, _repeated_counts_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += counts_.CalculateSize(_repeated_counts_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(VulnerabilityOccurrencesSummary other) {
      if (other == null) {
        return;
      }
      counts_.Add(other.counts_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            counts_.AddEntriesFrom(input, _repeated_counts_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the VulnerabilityOccurrencesSummary message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// Per resource and severity counts of fixable and total vulnerabilites.
      /// </summary>
      public sealed partial class FixableTotalByDigest : pb::IMessage<FixableTotalByDigest> {
        private static readonly pb::MessageParser<FixableTotalByDigest> _parser = new pb::MessageParser<FixableTotalByDigest>(() => new FixableTotalByDigest());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<FixableTotalByDigest> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Grafeas.V1Beta1.VulnerabilityOccurrencesSummary.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public FixableTotalByDigest() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public FixableTotalByDigest(FixableTotalByDigest other) : this() {
          resource_ = other.resource_ != null ? other.resource_.Clone() : null;
          severity_ = other.severity_;
          fixableCount_ = other.fixableCount_;
          totalCount_ = other.totalCount_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public FixableTotalByDigest Clone() {
          return new FixableTotalByDigest(this);
        }

        /// <summary>Field number for the "resource" field.</summary>
        public const int ResourceFieldNumber = 1;
        private global::Grafeas.V1Beta1.Resource resource_;
        /// <summary>
        /// The affected resource.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Grafeas.V1Beta1.Resource Resource {
          get { return resource_; }
          set {
            resource_ = value;
          }
        }

        /// <summary>Field number for the "severity" field.</summary>
        public const int SeverityFieldNumber = 2;
        private global::Grafeas.V1Beta1.Vulnerability.Severity severity_ = 0;
        /// <summary>
        /// The severity for this count. SEVERITY_UNSPECIFIED indicates total across
        /// all severities.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Grafeas.V1Beta1.Vulnerability.Severity Severity {
          get { return severity_; }
          set {
            severity_ = value;
          }
        }

        /// <summary>Field number for the "fixable_count" field.</summary>
        public const int FixableCountFieldNumber = 3;
        private long fixableCount_;
        /// <summary>
        /// The number of fixable vulnerabilities associated with this resource.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long FixableCount {
          get { return fixableCount_; }
          set {
            fixableCount_ = value;
          }
        }

        /// <summary>Field number for the "total_count" field.</summary>
        public const int TotalCountFieldNumber = 4;
        private long totalCount_;
        /// <summary>
        /// The total number of vulnerabilities associated with this resource.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long TotalCount {
          get { return totalCount_; }
          set {
            totalCount_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as FixableTotalByDigest);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(FixableTotalByDigest other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Resource, other.Resource)) return false;
          if (Severity != other.Severity) return false;
          if (FixableCount != other.FixableCount) return false;
          if (TotalCount != other.TotalCount) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (resource_ != null) hash ^= Resource.GetHashCode();
          if (Severity != 0) hash ^= Severity.GetHashCode();
          if (FixableCount != 0L) hash ^= FixableCount.GetHashCode();
          if (TotalCount != 0L) hash ^= TotalCount.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (resource_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Resource);
          }
          if (Severity != 0) {
            output.WriteRawTag(16);
            output.WriteEnum((int) Severity);
          }
          if (FixableCount != 0L) {
            output.WriteRawTag(24);
            output.WriteInt64(FixableCount);
          }
          if (TotalCount != 0L) {
            output.WriteRawTag(32);
            output.WriteInt64(TotalCount);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (resource_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Resource);
          }
          if (Severity != 0) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Severity);
          }
          if (FixableCount != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(FixableCount);
          }
          if (TotalCount != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(TotalCount);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(FixableTotalByDigest other) {
          if (other == null) {
            return;
          }
          if (other.resource_ != null) {
            if (resource_ == null) {
              Resource = new global::Grafeas.V1Beta1.Resource();
            }
            Resource.MergeFrom(other.Resource);
          }
          if (other.Severity != 0) {
            Severity = other.Severity;
          }
          if (other.FixableCount != 0L) {
            FixableCount = other.FixableCount;
          }
          if (other.TotalCount != 0L) {
            TotalCount = other.TotalCount;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (resource_ == null) {
                  Resource = new global::Grafeas.V1Beta1.Resource();
                }
                input.ReadMessage(Resource);
                break;
              }
              case 16: {
                Severity = (global::Grafeas.V1Beta1.Vulnerability.Severity) input.ReadEnum();
                break;
              }
              case 24: {
                FixableCount = input.ReadInt64();
                break;
              }
              case 32: {
                TotalCount = input.ReadInt64();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
