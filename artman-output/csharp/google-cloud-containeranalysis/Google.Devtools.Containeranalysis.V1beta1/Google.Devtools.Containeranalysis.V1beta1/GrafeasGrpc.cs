// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: google/devtools/containeranalysis/v1beta1/grafeas/grafeas.proto
// </auto-generated>
// Original file comments:
// Copyright 2018 The Grafeas Authors. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Grafeas.V1Beta1 {
  /// <summary>
  /// [Grafeas](grafeas.io) API.
  ///
  /// Retrieves analysis results of Cloud components such as Docker container
  /// images.
  ///
  /// Analysis results are stored as a series of occurrences. An `Occurrence`
  /// contains information about a specific analysis instance on a resource. An
  /// occurrence refers to a `Note`. A note contains details describing the
  /// analysis and is generally stored in a separate project, called a `Provider`.
  /// Multiple occurrences can refer to the same note.
  ///
  /// For example, an SSL vulnerability could affect multiple images. In this case,
  /// there would be one note for the vulnerability and an occurrence for each
  /// image with the vulnerability referring to that note.
  /// </summary>
  public static partial class GrafeasV1Beta1
  {
    static readonly string __ServiceName = "grafeas.v1beta1.GrafeasV1Beta1";

    static readonly grpc::Marshaller<global::Grafeas.V1Beta1.GetOccurrenceRequest> __Marshaller_grafeas_v1beta1_GetOccurrenceRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Grafeas.V1Beta1.GetOccurrenceRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Grafeas.V1Beta1.Occurrence> __Marshaller_grafeas_v1beta1_Occurrence = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Grafeas.V1Beta1.Occurrence.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Grafeas.V1Beta1.ListOccurrencesRequest> __Marshaller_grafeas_v1beta1_ListOccurrencesRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Grafeas.V1Beta1.ListOccurrencesRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Grafeas.V1Beta1.ListOccurrencesResponse> __Marshaller_grafeas_v1beta1_ListOccurrencesResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Grafeas.V1Beta1.ListOccurrencesResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Grafeas.V1Beta1.DeleteOccurrenceRequest> __Marshaller_grafeas_v1beta1_DeleteOccurrenceRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Grafeas.V1Beta1.DeleteOccurrenceRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Protobuf.WellKnownTypes.Empty> __Marshaller_google_protobuf_Empty = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Protobuf.WellKnownTypes.Empty.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Grafeas.V1Beta1.CreateOccurrenceRequest> __Marshaller_grafeas_v1beta1_CreateOccurrenceRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Grafeas.V1Beta1.CreateOccurrenceRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Grafeas.V1Beta1.BatchCreateOccurrencesRequest> __Marshaller_grafeas_v1beta1_BatchCreateOccurrencesRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Grafeas.V1Beta1.BatchCreateOccurrencesRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Grafeas.V1Beta1.BatchCreateOccurrencesResponse> __Marshaller_grafeas_v1beta1_BatchCreateOccurrencesResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Grafeas.V1Beta1.BatchCreateOccurrencesResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Grafeas.V1Beta1.UpdateOccurrenceRequest> __Marshaller_grafeas_v1beta1_UpdateOccurrenceRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Grafeas.V1Beta1.UpdateOccurrenceRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Grafeas.V1Beta1.GetOccurrenceNoteRequest> __Marshaller_grafeas_v1beta1_GetOccurrenceNoteRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Grafeas.V1Beta1.GetOccurrenceNoteRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Grafeas.V1Beta1.Note> __Marshaller_grafeas_v1beta1_Note = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Grafeas.V1Beta1.Note.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Grafeas.V1Beta1.GetNoteRequest> __Marshaller_grafeas_v1beta1_GetNoteRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Grafeas.V1Beta1.GetNoteRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Grafeas.V1Beta1.ListNotesRequest> __Marshaller_grafeas_v1beta1_ListNotesRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Grafeas.V1Beta1.ListNotesRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Grafeas.V1Beta1.ListNotesResponse> __Marshaller_grafeas_v1beta1_ListNotesResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Grafeas.V1Beta1.ListNotesResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Grafeas.V1Beta1.DeleteNoteRequest> __Marshaller_grafeas_v1beta1_DeleteNoteRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Grafeas.V1Beta1.DeleteNoteRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Grafeas.V1Beta1.CreateNoteRequest> __Marshaller_grafeas_v1beta1_CreateNoteRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Grafeas.V1Beta1.CreateNoteRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Grafeas.V1Beta1.BatchCreateNotesRequest> __Marshaller_grafeas_v1beta1_BatchCreateNotesRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Grafeas.V1Beta1.BatchCreateNotesRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Grafeas.V1Beta1.BatchCreateNotesResponse> __Marshaller_grafeas_v1beta1_BatchCreateNotesResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Grafeas.V1Beta1.BatchCreateNotesResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Grafeas.V1Beta1.UpdateNoteRequest> __Marshaller_grafeas_v1beta1_UpdateNoteRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Grafeas.V1Beta1.UpdateNoteRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Grafeas.V1Beta1.ListNoteOccurrencesRequest> __Marshaller_grafeas_v1beta1_ListNoteOccurrencesRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Grafeas.V1Beta1.ListNoteOccurrencesRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Grafeas.V1Beta1.ListNoteOccurrencesResponse> __Marshaller_grafeas_v1beta1_ListNoteOccurrencesResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Grafeas.V1Beta1.ListNoteOccurrencesResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Grafeas.V1Beta1.GetVulnerabilityOccurrencesSummaryRequest> __Marshaller_grafeas_v1beta1_GetVulnerabilityOccurrencesSummaryRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Grafeas.V1Beta1.GetVulnerabilityOccurrencesSummaryRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Grafeas.V1Beta1.VulnerabilityOccurrencesSummary> __Marshaller_grafeas_v1beta1_VulnerabilityOccurrencesSummary = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Grafeas.V1Beta1.VulnerabilityOccurrencesSummary.Parser.ParseFrom);

    static readonly grpc::Method<global::Grafeas.V1Beta1.GetOccurrenceRequest, global::Grafeas.V1Beta1.Occurrence> __Method_GetOccurrence = new grpc::Method<global::Grafeas.V1Beta1.GetOccurrenceRequest, global::Grafeas.V1Beta1.Occurrence>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetOccurrence",
        __Marshaller_grafeas_v1beta1_GetOccurrenceRequest,
        __Marshaller_grafeas_v1beta1_Occurrence);

    static readonly grpc::Method<global::Grafeas.V1Beta1.ListOccurrencesRequest, global::Grafeas.V1Beta1.ListOccurrencesResponse> __Method_ListOccurrences = new grpc::Method<global::Grafeas.V1Beta1.ListOccurrencesRequest, global::Grafeas.V1Beta1.ListOccurrencesResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListOccurrences",
        __Marshaller_grafeas_v1beta1_ListOccurrencesRequest,
        __Marshaller_grafeas_v1beta1_ListOccurrencesResponse);

    static readonly grpc::Method<global::Grafeas.V1Beta1.DeleteOccurrenceRequest, global::Google.Protobuf.WellKnownTypes.Empty> __Method_DeleteOccurrence = new grpc::Method<global::Grafeas.V1Beta1.DeleteOccurrenceRequest, global::Google.Protobuf.WellKnownTypes.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteOccurrence",
        __Marshaller_grafeas_v1beta1_DeleteOccurrenceRequest,
        __Marshaller_google_protobuf_Empty);

    static readonly grpc::Method<global::Grafeas.V1Beta1.CreateOccurrenceRequest, global::Grafeas.V1Beta1.Occurrence> __Method_CreateOccurrence = new grpc::Method<global::Grafeas.V1Beta1.CreateOccurrenceRequest, global::Grafeas.V1Beta1.Occurrence>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateOccurrence",
        __Marshaller_grafeas_v1beta1_CreateOccurrenceRequest,
        __Marshaller_grafeas_v1beta1_Occurrence);

    static readonly grpc::Method<global::Grafeas.V1Beta1.BatchCreateOccurrencesRequest, global::Grafeas.V1Beta1.BatchCreateOccurrencesResponse> __Method_BatchCreateOccurrences = new grpc::Method<global::Grafeas.V1Beta1.BatchCreateOccurrencesRequest, global::Grafeas.V1Beta1.BatchCreateOccurrencesResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "BatchCreateOccurrences",
        __Marshaller_grafeas_v1beta1_BatchCreateOccurrencesRequest,
        __Marshaller_grafeas_v1beta1_BatchCreateOccurrencesResponse);

    static readonly grpc::Method<global::Grafeas.V1Beta1.UpdateOccurrenceRequest, global::Grafeas.V1Beta1.Occurrence> __Method_UpdateOccurrence = new grpc::Method<global::Grafeas.V1Beta1.UpdateOccurrenceRequest, global::Grafeas.V1Beta1.Occurrence>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateOccurrence",
        __Marshaller_grafeas_v1beta1_UpdateOccurrenceRequest,
        __Marshaller_grafeas_v1beta1_Occurrence);

    static readonly grpc::Method<global::Grafeas.V1Beta1.GetOccurrenceNoteRequest, global::Grafeas.V1Beta1.Note> __Method_GetOccurrenceNote = new grpc::Method<global::Grafeas.V1Beta1.GetOccurrenceNoteRequest, global::Grafeas.V1Beta1.Note>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetOccurrenceNote",
        __Marshaller_grafeas_v1beta1_GetOccurrenceNoteRequest,
        __Marshaller_grafeas_v1beta1_Note);

    static readonly grpc::Method<global::Grafeas.V1Beta1.GetNoteRequest, global::Grafeas.V1Beta1.Note> __Method_GetNote = new grpc::Method<global::Grafeas.V1Beta1.GetNoteRequest, global::Grafeas.V1Beta1.Note>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetNote",
        __Marshaller_grafeas_v1beta1_GetNoteRequest,
        __Marshaller_grafeas_v1beta1_Note);

    static readonly grpc::Method<global::Grafeas.V1Beta1.ListNotesRequest, global::Grafeas.V1Beta1.ListNotesResponse> __Method_ListNotes = new grpc::Method<global::Grafeas.V1Beta1.ListNotesRequest, global::Grafeas.V1Beta1.ListNotesResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListNotes",
        __Marshaller_grafeas_v1beta1_ListNotesRequest,
        __Marshaller_grafeas_v1beta1_ListNotesResponse);

    static readonly grpc::Method<global::Grafeas.V1Beta1.DeleteNoteRequest, global::Google.Protobuf.WellKnownTypes.Empty> __Method_DeleteNote = new grpc::Method<global::Grafeas.V1Beta1.DeleteNoteRequest, global::Google.Protobuf.WellKnownTypes.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteNote",
        __Marshaller_grafeas_v1beta1_DeleteNoteRequest,
        __Marshaller_google_protobuf_Empty);

    static readonly grpc::Method<global::Grafeas.V1Beta1.CreateNoteRequest, global::Grafeas.V1Beta1.Note> __Method_CreateNote = new grpc::Method<global::Grafeas.V1Beta1.CreateNoteRequest, global::Grafeas.V1Beta1.Note>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateNote",
        __Marshaller_grafeas_v1beta1_CreateNoteRequest,
        __Marshaller_grafeas_v1beta1_Note);

    static readonly grpc::Method<global::Grafeas.V1Beta1.BatchCreateNotesRequest, global::Grafeas.V1Beta1.BatchCreateNotesResponse> __Method_BatchCreateNotes = new grpc::Method<global::Grafeas.V1Beta1.BatchCreateNotesRequest, global::Grafeas.V1Beta1.BatchCreateNotesResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "BatchCreateNotes",
        __Marshaller_grafeas_v1beta1_BatchCreateNotesRequest,
        __Marshaller_grafeas_v1beta1_BatchCreateNotesResponse);

    static readonly grpc::Method<global::Grafeas.V1Beta1.UpdateNoteRequest, global::Grafeas.V1Beta1.Note> __Method_UpdateNote = new grpc::Method<global::Grafeas.V1Beta1.UpdateNoteRequest, global::Grafeas.V1Beta1.Note>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateNote",
        __Marshaller_grafeas_v1beta1_UpdateNoteRequest,
        __Marshaller_grafeas_v1beta1_Note);

    static readonly grpc::Method<global::Grafeas.V1Beta1.ListNoteOccurrencesRequest, global::Grafeas.V1Beta1.ListNoteOccurrencesResponse> __Method_ListNoteOccurrences = new grpc::Method<global::Grafeas.V1Beta1.ListNoteOccurrencesRequest, global::Grafeas.V1Beta1.ListNoteOccurrencesResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListNoteOccurrences",
        __Marshaller_grafeas_v1beta1_ListNoteOccurrencesRequest,
        __Marshaller_grafeas_v1beta1_ListNoteOccurrencesResponse);

    static readonly grpc::Method<global::Grafeas.V1Beta1.GetVulnerabilityOccurrencesSummaryRequest, global::Grafeas.V1Beta1.VulnerabilityOccurrencesSummary> __Method_GetVulnerabilityOccurrencesSummary = new grpc::Method<global::Grafeas.V1Beta1.GetVulnerabilityOccurrencesSummaryRequest, global::Grafeas.V1Beta1.VulnerabilityOccurrencesSummary>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetVulnerabilityOccurrencesSummary",
        __Marshaller_grafeas_v1beta1_GetVulnerabilityOccurrencesSummaryRequest,
        __Marshaller_grafeas_v1beta1_VulnerabilityOccurrencesSummary);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Grafeas.V1Beta1.GrafeasReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of GrafeasV1Beta1</summary>
    public abstract partial class GrafeasV1Beta1Base
    {
      /// <summary>
      /// Gets the specified occurrence.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Grafeas.V1Beta1.Occurrence> GetOccurrence(global::Grafeas.V1Beta1.GetOccurrenceRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Lists occurrences for the specified project.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Grafeas.V1Beta1.ListOccurrencesResponse> ListOccurrences(global::Grafeas.V1Beta1.ListOccurrencesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Deletes the specified occurrence. For example, use this method to delete an
      /// occurrence when the occurrence is no longer applicable for the given
      /// resource.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Protobuf.WellKnownTypes.Empty> DeleteOccurrence(global::Grafeas.V1Beta1.DeleteOccurrenceRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Creates a new occurrence.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Grafeas.V1Beta1.Occurrence> CreateOccurrence(global::Grafeas.V1Beta1.CreateOccurrenceRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Creates new occurrences in batch.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Grafeas.V1Beta1.BatchCreateOccurrencesResponse> BatchCreateOccurrences(global::Grafeas.V1Beta1.BatchCreateOccurrencesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Updates the specified occurrence.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Grafeas.V1Beta1.Occurrence> UpdateOccurrence(global::Grafeas.V1Beta1.UpdateOccurrenceRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Gets the note attached to the specified occurrence. Consumer projects can
      /// use this method to get a note that belongs to a provider project.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Grafeas.V1Beta1.Note> GetOccurrenceNote(global::Grafeas.V1Beta1.GetOccurrenceNoteRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Gets the specified note.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Grafeas.V1Beta1.Note> GetNote(global::Grafeas.V1Beta1.GetNoteRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Lists notes for the specified project.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Grafeas.V1Beta1.ListNotesResponse> ListNotes(global::Grafeas.V1Beta1.ListNotesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Deletes the specified note.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Protobuf.WellKnownTypes.Empty> DeleteNote(global::Grafeas.V1Beta1.DeleteNoteRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Creates a new note.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Grafeas.V1Beta1.Note> CreateNote(global::Grafeas.V1Beta1.CreateNoteRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Creates new notes in batch.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Grafeas.V1Beta1.BatchCreateNotesResponse> BatchCreateNotes(global::Grafeas.V1Beta1.BatchCreateNotesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Updates the specified note.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Grafeas.V1Beta1.Note> UpdateNote(global::Grafeas.V1Beta1.UpdateNoteRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Lists occurrences referencing the specified note. Provider projects can use
      /// this method to get all occurrences across consumer projects referencing the
      /// specified note.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Grafeas.V1Beta1.ListNoteOccurrencesResponse> ListNoteOccurrences(global::Grafeas.V1Beta1.ListNoteOccurrencesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Gets a summary of the number and severity of occurrences.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Grafeas.V1Beta1.VulnerabilityOccurrencesSummary> GetVulnerabilityOccurrencesSummary(global::Grafeas.V1Beta1.GetVulnerabilityOccurrencesSummaryRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for GrafeasV1Beta1</summary>
    public partial class GrafeasV1Beta1Client : grpc::ClientBase<GrafeasV1Beta1Client>
    {
      /// <summary>Creates a new client for GrafeasV1Beta1</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public GrafeasV1Beta1Client(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for GrafeasV1Beta1 that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public GrafeasV1Beta1Client(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected GrafeasV1Beta1Client() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected GrafeasV1Beta1Client(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Gets the specified occurrence.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Grafeas.V1Beta1.Occurrence GetOccurrence(global::Grafeas.V1Beta1.GetOccurrenceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetOccurrence(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets the specified occurrence.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Grafeas.V1Beta1.Occurrence GetOccurrence(global::Grafeas.V1Beta1.GetOccurrenceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetOccurrence, null, options, request);
      }
      /// <summary>
      /// Gets the specified occurrence.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Grafeas.V1Beta1.Occurrence> GetOccurrenceAsync(global::Grafeas.V1Beta1.GetOccurrenceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetOccurrenceAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets the specified occurrence.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Grafeas.V1Beta1.Occurrence> GetOccurrenceAsync(global::Grafeas.V1Beta1.GetOccurrenceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetOccurrence, null, options, request);
      }
      /// <summary>
      /// Lists occurrences for the specified project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Grafeas.V1Beta1.ListOccurrencesResponse ListOccurrences(global::Grafeas.V1Beta1.ListOccurrencesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListOccurrences(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists occurrences for the specified project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Grafeas.V1Beta1.ListOccurrencesResponse ListOccurrences(global::Grafeas.V1Beta1.ListOccurrencesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListOccurrences, null, options, request);
      }
      /// <summary>
      /// Lists occurrences for the specified project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Grafeas.V1Beta1.ListOccurrencesResponse> ListOccurrencesAsync(global::Grafeas.V1Beta1.ListOccurrencesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListOccurrencesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists occurrences for the specified project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Grafeas.V1Beta1.ListOccurrencesResponse> ListOccurrencesAsync(global::Grafeas.V1Beta1.ListOccurrencesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListOccurrences, null, options, request);
      }
      /// <summary>
      /// Deletes the specified occurrence. For example, use this method to delete an
      /// occurrence when the occurrence is no longer applicable for the given
      /// resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Protobuf.WellKnownTypes.Empty DeleteOccurrence(global::Grafeas.V1Beta1.DeleteOccurrenceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteOccurrence(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes the specified occurrence. For example, use this method to delete an
      /// occurrence when the occurrence is no longer applicable for the given
      /// resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Protobuf.WellKnownTypes.Empty DeleteOccurrence(global::Grafeas.V1Beta1.DeleteOccurrenceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteOccurrence, null, options, request);
      }
      /// <summary>
      /// Deletes the specified occurrence. For example, use this method to delete an
      /// occurrence when the occurrence is no longer applicable for the given
      /// resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> DeleteOccurrenceAsync(global::Grafeas.V1Beta1.DeleteOccurrenceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteOccurrenceAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes the specified occurrence. For example, use this method to delete an
      /// occurrence when the occurrence is no longer applicable for the given
      /// resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> DeleteOccurrenceAsync(global::Grafeas.V1Beta1.DeleteOccurrenceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteOccurrence, null, options, request);
      }
      /// <summary>
      /// Creates a new occurrence.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Grafeas.V1Beta1.Occurrence CreateOccurrence(global::Grafeas.V1Beta1.CreateOccurrenceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateOccurrence(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a new occurrence.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Grafeas.V1Beta1.Occurrence CreateOccurrence(global::Grafeas.V1Beta1.CreateOccurrenceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateOccurrence, null, options, request);
      }
      /// <summary>
      /// Creates a new occurrence.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Grafeas.V1Beta1.Occurrence> CreateOccurrenceAsync(global::Grafeas.V1Beta1.CreateOccurrenceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateOccurrenceAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a new occurrence.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Grafeas.V1Beta1.Occurrence> CreateOccurrenceAsync(global::Grafeas.V1Beta1.CreateOccurrenceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateOccurrence, null, options, request);
      }
      /// <summary>
      /// Creates new occurrences in batch.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Grafeas.V1Beta1.BatchCreateOccurrencesResponse BatchCreateOccurrences(global::Grafeas.V1Beta1.BatchCreateOccurrencesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return BatchCreateOccurrences(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates new occurrences in batch.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Grafeas.V1Beta1.BatchCreateOccurrencesResponse BatchCreateOccurrences(global::Grafeas.V1Beta1.BatchCreateOccurrencesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_BatchCreateOccurrences, null, options, request);
      }
      /// <summary>
      /// Creates new occurrences in batch.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Grafeas.V1Beta1.BatchCreateOccurrencesResponse> BatchCreateOccurrencesAsync(global::Grafeas.V1Beta1.BatchCreateOccurrencesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return BatchCreateOccurrencesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates new occurrences in batch.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Grafeas.V1Beta1.BatchCreateOccurrencesResponse> BatchCreateOccurrencesAsync(global::Grafeas.V1Beta1.BatchCreateOccurrencesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_BatchCreateOccurrences, null, options, request);
      }
      /// <summary>
      /// Updates the specified occurrence.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Grafeas.V1Beta1.Occurrence UpdateOccurrence(global::Grafeas.V1Beta1.UpdateOccurrenceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateOccurrence(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates the specified occurrence.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Grafeas.V1Beta1.Occurrence UpdateOccurrence(global::Grafeas.V1Beta1.UpdateOccurrenceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateOccurrence, null, options, request);
      }
      /// <summary>
      /// Updates the specified occurrence.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Grafeas.V1Beta1.Occurrence> UpdateOccurrenceAsync(global::Grafeas.V1Beta1.UpdateOccurrenceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateOccurrenceAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates the specified occurrence.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Grafeas.V1Beta1.Occurrence> UpdateOccurrenceAsync(global::Grafeas.V1Beta1.UpdateOccurrenceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateOccurrence, null, options, request);
      }
      /// <summary>
      /// Gets the note attached to the specified occurrence. Consumer projects can
      /// use this method to get a note that belongs to a provider project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Grafeas.V1Beta1.Note GetOccurrenceNote(global::Grafeas.V1Beta1.GetOccurrenceNoteRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetOccurrenceNote(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets the note attached to the specified occurrence. Consumer projects can
      /// use this method to get a note that belongs to a provider project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Grafeas.V1Beta1.Note GetOccurrenceNote(global::Grafeas.V1Beta1.GetOccurrenceNoteRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetOccurrenceNote, null, options, request);
      }
      /// <summary>
      /// Gets the note attached to the specified occurrence. Consumer projects can
      /// use this method to get a note that belongs to a provider project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Grafeas.V1Beta1.Note> GetOccurrenceNoteAsync(global::Grafeas.V1Beta1.GetOccurrenceNoteRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetOccurrenceNoteAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets the note attached to the specified occurrence. Consumer projects can
      /// use this method to get a note that belongs to a provider project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Grafeas.V1Beta1.Note> GetOccurrenceNoteAsync(global::Grafeas.V1Beta1.GetOccurrenceNoteRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetOccurrenceNote, null, options, request);
      }
      /// <summary>
      /// Gets the specified note.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Grafeas.V1Beta1.Note GetNote(global::Grafeas.V1Beta1.GetNoteRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetNote(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets the specified note.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Grafeas.V1Beta1.Note GetNote(global::Grafeas.V1Beta1.GetNoteRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetNote, null, options, request);
      }
      /// <summary>
      /// Gets the specified note.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Grafeas.V1Beta1.Note> GetNoteAsync(global::Grafeas.V1Beta1.GetNoteRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetNoteAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets the specified note.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Grafeas.V1Beta1.Note> GetNoteAsync(global::Grafeas.V1Beta1.GetNoteRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetNote, null, options, request);
      }
      /// <summary>
      /// Lists notes for the specified project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Grafeas.V1Beta1.ListNotesResponse ListNotes(global::Grafeas.V1Beta1.ListNotesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListNotes(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists notes for the specified project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Grafeas.V1Beta1.ListNotesResponse ListNotes(global::Grafeas.V1Beta1.ListNotesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListNotes, null, options, request);
      }
      /// <summary>
      /// Lists notes for the specified project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Grafeas.V1Beta1.ListNotesResponse> ListNotesAsync(global::Grafeas.V1Beta1.ListNotesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListNotesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists notes for the specified project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Grafeas.V1Beta1.ListNotesResponse> ListNotesAsync(global::Grafeas.V1Beta1.ListNotesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListNotes, null, options, request);
      }
      /// <summary>
      /// Deletes the specified note.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Protobuf.WellKnownTypes.Empty DeleteNote(global::Grafeas.V1Beta1.DeleteNoteRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteNote(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes the specified note.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Protobuf.WellKnownTypes.Empty DeleteNote(global::Grafeas.V1Beta1.DeleteNoteRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteNote, null, options, request);
      }
      /// <summary>
      /// Deletes the specified note.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> DeleteNoteAsync(global::Grafeas.V1Beta1.DeleteNoteRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteNoteAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes the specified note.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> DeleteNoteAsync(global::Grafeas.V1Beta1.DeleteNoteRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteNote, null, options, request);
      }
      /// <summary>
      /// Creates a new note.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Grafeas.V1Beta1.Note CreateNote(global::Grafeas.V1Beta1.CreateNoteRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateNote(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a new note.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Grafeas.V1Beta1.Note CreateNote(global::Grafeas.V1Beta1.CreateNoteRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateNote, null, options, request);
      }
      /// <summary>
      /// Creates a new note.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Grafeas.V1Beta1.Note> CreateNoteAsync(global::Grafeas.V1Beta1.CreateNoteRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateNoteAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a new note.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Grafeas.V1Beta1.Note> CreateNoteAsync(global::Grafeas.V1Beta1.CreateNoteRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateNote, null, options, request);
      }
      /// <summary>
      /// Creates new notes in batch.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Grafeas.V1Beta1.BatchCreateNotesResponse BatchCreateNotes(global::Grafeas.V1Beta1.BatchCreateNotesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return BatchCreateNotes(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates new notes in batch.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Grafeas.V1Beta1.BatchCreateNotesResponse BatchCreateNotes(global::Grafeas.V1Beta1.BatchCreateNotesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_BatchCreateNotes, null, options, request);
      }
      /// <summary>
      /// Creates new notes in batch.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Grafeas.V1Beta1.BatchCreateNotesResponse> BatchCreateNotesAsync(global::Grafeas.V1Beta1.BatchCreateNotesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return BatchCreateNotesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates new notes in batch.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Grafeas.V1Beta1.BatchCreateNotesResponse> BatchCreateNotesAsync(global::Grafeas.V1Beta1.BatchCreateNotesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_BatchCreateNotes, null, options, request);
      }
      /// <summary>
      /// Updates the specified note.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Grafeas.V1Beta1.Note UpdateNote(global::Grafeas.V1Beta1.UpdateNoteRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateNote(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates the specified note.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Grafeas.V1Beta1.Note UpdateNote(global::Grafeas.V1Beta1.UpdateNoteRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateNote, null, options, request);
      }
      /// <summary>
      /// Updates the specified note.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Grafeas.V1Beta1.Note> UpdateNoteAsync(global::Grafeas.V1Beta1.UpdateNoteRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateNoteAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates the specified note.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Grafeas.V1Beta1.Note> UpdateNoteAsync(global::Grafeas.V1Beta1.UpdateNoteRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateNote, null, options, request);
      }
      /// <summary>
      /// Lists occurrences referencing the specified note. Provider projects can use
      /// this method to get all occurrences across consumer projects referencing the
      /// specified note.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Grafeas.V1Beta1.ListNoteOccurrencesResponse ListNoteOccurrences(global::Grafeas.V1Beta1.ListNoteOccurrencesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListNoteOccurrences(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists occurrences referencing the specified note. Provider projects can use
      /// this method to get all occurrences across consumer projects referencing the
      /// specified note.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Grafeas.V1Beta1.ListNoteOccurrencesResponse ListNoteOccurrences(global::Grafeas.V1Beta1.ListNoteOccurrencesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListNoteOccurrences, null, options, request);
      }
      /// <summary>
      /// Lists occurrences referencing the specified note. Provider projects can use
      /// this method to get all occurrences across consumer projects referencing the
      /// specified note.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Grafeas.V1Beta1.ListNoteOccurrencesResponse> ListNoteOccurrencesAsync(global::Grafeas.V1Beta1.ListNoteOccurrencesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListNoteOccurrencesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists occurrences referencing the specified note. Provider projects can use
      /// this method to get all occurrences across consumer projects referencing the
      /// specified note.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Grafeas.V1Beta1.ListNoteOccurrencesResponse> ListNoteOccurrencesAsync(global::Grafeas.V1Beta1.ListNoteOccurrencesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListNoteOccurrences, null, options, request);
      }
      /// <summary>
      /// Gets a summary of the number and severity of occurrences.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Grafeas.V1Beta1.VulnerabilityOccurrencesSummary GetVulnerabilityOccurrencesSummary(global::Grafeas.V1Beta1.GetVulnerabilityOccurrencesSummaryRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetVulnerabilityOccurrencesSummary(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets a summary of the number and severity of occurrences.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Grafeas.V1Beta1.VulnerabilityOccurrencesSummary GetVulnerabilityOccurrencesSummary(global::Grafeas.V1Beta1.GetVulnerabilityOccurrencesSummaryRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetVulnerabilityOccurrencesSummary, null, options, request);
      }
      /// <summary>
      /// Gets a summary of the number and severity of occurrences.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Grafeas.V1Beta1.VulnerabilityOccurrencesSummary> GetVulnerabilityOccurrencesSummaryAsync(global::Grafeas.V1Beta1.GetVulnerabilityOccurrencesSummaryRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetVulnerabilityOccurrencesSummaryAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets a summary of the number and severity of occurrences.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Grafeas.V1Beta1.VulnerabilityOccurrencesSummary> GetVulnerabilityOccurrencesSummaryAsync(global::Grafeas.V1Beta1.GetVulnerabilityOccurrencesSummaryRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetVulnerabilityOccurrencesSummary, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override GrafeasV1Beta1Client NewInstance(ClientBaseConfiguration configuration)
      {
        return new GrafeasV1Beta1Client(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(GrafeasV1Beta1Base serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_GetOccurrence, serviceImpl.GetOccurrence)
          .AddMethod(__Method_ListOccurrences, serviceImpl.ListOccurrences)
          .AddMethod(__Method_DeleteOccurrence, serviceImpl.DeleteOccurrence)
          .AddMethod(__Method_CreateOccurrence, serviceImpl.CreateOccurrence)
          .AddMethod(__Method_BatchCreateOccurrences, serviceImpl.BatchCreateOccurrences)
          .AddMethod(__Method_UpdateOccurrence, serviceImpl.UpdateOccurrence)
          .AddMethod(__Method_GetOccurrenceNote, serviceImpl.GetOccurrenceNote)
          .AddMethod(__Method_GetNote, serviceImpl.GetNote)
          .AddMethod(__Method_ListNotes, serviceImpl.ListNotes)
          .AddMethod(__Method_DeleteNote, serviceImpl.DeleteNote)
          .AddMethod(__Method_CreateNote, serviceImpl.CreateNote)
          .AddMethod(__Method_BatchCreateNotes, serviceImpl.BatchCreateNotes)
          .AddMethod(__Method_UpdateNote, serviceImpl.UpdateNote)
          .AddMethod(__Method_ListNoteOccurrences, serviceImpl.ListNoteOccurrences)
          .AddMethod(__Method_GetVulnerabilityOccurrencesSummary, serviceImpl.GetVulnerabilityOccurrencesSummary).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, GrafeasV1Beta1Base serviceImpl)
    {
      serviceBinder.AddMethod(__Method_GetOccurrence, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Grafeas.V1Beta1.GetOccurrenceRequest, global::Grafeas.V1Beta1.Occurrence>(serviceImpl.GetOccurrence));
      serviceBinder.AddMethod(__Method_ListOccurrences, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Grafeas.V1Beta1.ListOccurrencesRequest, global::Grafeas.V1Beta1.ListOccurrencesResponse>(serviceImpl.ListOccurrences));
      serviceBinder.AddMethod(__Method_DeleteOccurrence, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Grafeas.V1Beta1.DeleteOccurrenceRequest, global::Google.Protobuf.WellKnownTypes.Empty>(serviceImpl.DeleteOccurrence));
      serviceBinder.AddMethod(__Method_CreateOccurrence, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Grafeas.V1Beta1.CreateOccurrenceRequest, global::Grafeas.V1Beta1.Occurrence>(serviceImpl.CreateOccurrence));
      serviceBinder.AddMethod(__Method_BatchCreateOccurrences, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Grafeas.V1Beta1.BatchCreateOccurrencesRequest, global::Grafeas.V1Beta1.BatchCreateOccurrencesResponse>(serviceImpl.BatchCreateOccurrences));
      serviceBinder.AddMethod(__Method_UpdateOccurrence, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Grafeas.V1Beta1.UpdateOccurrenceRequest, global::Grafeas.V1Beta1.Occurrence>(serviceImpl.UpdateOccurrence));
      serviceBinder.AddMethod(__Method_GetOccurrenceNote, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Grafeas.V1Beta1.GetOccurrenceNoteRequest, global::Grafeas.V1Beta1.Note>(serviceImpl.GetOccurrenceNote));
      serviceBinder.AddMethod(__Method_GetNote, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Grafeas.V1Beta1.GetNoteRequest, global::Grafeas.V1Beta1.Note>(serviceImpl.GetNote));
      serviceBinder.AddMethod(__Method_ListNotes, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Grafeas.V1Beta1.ListNotesRequest, global::Grafeas.V1Beta1.ListNotesResponse>(serviceImpl.ListNotes));
      serviceBinder.AddMethod(__Method_DeleteNote, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Grafeas.V1Beta1.DeleteNoteRequest, global::Google.Protobuf.WellKnownTypes.Empty>(serviceImpl.DeleteNote));
      serviceBinder.AddMethod(__Method_CreateNote, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Grafeas.V1Beta1.CreateNoteRequest, global::Grafeas.V1Beta1.Note>(serviceImpl.CreateNote));
      serviceBinder.AddMethod(__Method_BatchCreateNotes, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Grafeas.V1Beta1.BatchCreateNotesRequest, global::Grafeas.V1Beta1.BatchCreateNotesResponse>(serviceImpl.BatchCreateNotes));
      serviceBinder.AddMethod(__Method_UpdateNote, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Grafeas.V1Beta1.UpdateNoteRequest, global::Grafeas.V1Beta1.Note>(serviceImpl.UpdateNote));
      serviceBinder.AddMethod(__Method_ListNoteOccurrences, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Grafeas.V1Beta1.ListNoteOccurrencesRequest, global::Grafeas.V1Beta1.ListNoteOccurrencesResponse>(serviceImpl.ListNoteOccurrences));
      serviceBinder.AddMethod(__Method_GetVulnerabilityOccurrencesSummary, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Grafeas.V1Beta1.GetVulnerabilityOccurrencesSummaryRequest, global::Grafeas.V1Beta1.VulnerabilityOccurrencesSummary>(serviceImpl.GetVulnerabilityOccurrencesSummary));
    }

  }
}
#endregion
