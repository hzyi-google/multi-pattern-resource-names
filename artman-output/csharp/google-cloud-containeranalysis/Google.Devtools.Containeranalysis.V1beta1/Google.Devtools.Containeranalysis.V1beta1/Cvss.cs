// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: google/devtools/containeranalysis/v1beta1/cvss/cvss.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Grafeas.V1Beta1.Vulnerability {

  /// <summary>Holder for reflection information generated from google/devtools/containeranalysis/v1beta1/cvss/cvss.proto</summary>
  public static partial class CvssReflection {

    #region Descriptor
    /// <summary>File descriptor for google/devtools/containeranalysis/v1beta1/cvss/cvss.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static CvssReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cjlnb29nbGUvZGV2dG9vbHMvY29udGFpbmVyYW5hbHlzaXMvdjFiZXRhMS9j",
            "dnNzL2N2c3MucHJvdG8SHWdyYWZlYXMudjFiZXRhMS52dWxuZXJhYmlsaXR5",
            "It0KCgZDVlNTdjMSEgoKYmFzZV9zY29yZRgBIAEoAhIcChRleHBsb2l0YWJp",
            "bGl0eV9zY29yZRgCIAEoAhIUCgxpbXBhY3Rfc2NvcmUYAyABKAISSQoNYXR0",
            "YWNrX3ZlY3RvchgFIAEoDjIyLmdyYWZlYXMudjFiZXRhMS52dWxuZXJhYmls",
            "aXR5LkNWU1N2My5BdHRhY2tWZWN0b3ISUQoRYXR0YWNrX2NvbXBsZXhpdHkY",
            "BiABKA4yNi5ncmFmZWFzLnYxYmV0YTEudnVsbmVyYWJpbGl0eS5DVlNTdjMu",
            "QXR0YWNrQ29tcGxleGl0eRJVChNwcml2aWxlZ2VzX3JlcXVpcmVkGAcgASgO",
            "MjguZ3JhZmVhcy52MWJldGExLnZ1bG5lcmFiaWxpdHkuQ1ZTU3YzLlByaXZp",
            "bGVnZXNSZXF1aXJlZBJPChB1c2VyX2ludGVyYWN0aW9uGAggASgOMjUuZ3Jh",
            "ZmVhcy52MWJldGExLnZ1bG5lcmFiaWxpdHkuQ1ZTU3YzLlVzZXJJbnRlcmFj",
            "dGlvbhI6CgVzY29wZRgJIAEoDjIrLmdyYWZlYXMudjFiZXRhMS52dWxuZXJh",
            "YmlsaXR5LkNWU1N2My5TY29wZRJMChZjb25maWRlbnRpYWxpdHlfaW1wYWN0",
            "GAogASgOMiwuZ3JhZmVhcy52MWJldGExLnZ1bG5lcmFiaWxpdHkuQ1ZTU3Yz",
            "LkltcGFjdBJGChBpbnRlZ3JpdHlfaW1wYWN0GAsgASgOMiwuZ3JhZmVhcy52",
            "MWJldGExLnZ1bG5lcmFiaWxpdHkuQ1ZTU3YzLkltcGFjdBJJChNhdmFpbGFi",
            "aWxpdHlfaW1wYWN0GAwgASgOMiwuZ3JhZmVhcy52MWJldGExLnZ1bG5lcmFi",
            "aWxpdHkuQ1ZTU3YzLkltcGFjdCKZAQoMQXR0YWNrVmVjdG9yEh0KGUFUVEFD",
            "S19WRUNUT1JfVU5TUEVDSUZJRUQQABIZChVBVFRBQ0tfVkVDVE9SX05FVFdP",
            "UksQARIaChZBVFRBQ0tfVkVDVE9SX0FESkFDRU5UEAISFwoTQVRUQUNLX1ZF",
            "Q1RPUl9MT0NBTBADEhoKFkFUVEFDS19WRUNUT1JfUEhZU0lDQUwQBCJsChBB",
            "dHRhY2tDb21wbGV4aXR5EiEKHUFUVEFDS19DT01QTEVYSVRZX1VOU1BFQ0lG",
            "SUVEEAASGQoVQVRUQUNLX0NPTVBMRVhJVFlfTE9XEAESGgoWQVRUQUNLX0NP",
            "TVBMRVhJVFlfSElHSBACIpIBChJQcml2aWxlZ2VzUmVxdWlyZWQSIwofUFJJ",
            "VklMRUdFU19SRVFVSVJFRF9VTlNQRUNJRklFRBAAEhwKGFBSSVZJTEVHRVNf",
            "UkVRVUlSRURfTk9ORRABEhsKF1BSSVZJTEVHRVNfUkVRVUlSRURfTE9XEAIS",
            "HAoYUFJJVklMRUdFU19SRVFVSVJFRF9ISUdIEAMibQoPVXNlckludGVyYWN0",
            "aW9uEiAKHFVTRVJfSU5URVJBQ1RJT05fVU5TUEVDSUZJRUQQABIZChVVU0VS",
            "X0lOVEVSQUNUSU9OX05PTkUQARIdChlVU0VSX0lOVEVSQUNUSU9OX1JFUVVJ",
            "UkVEEAIiRgoFU2NvcGUSFQoRU0NPUEVfVU5TUEVDSUZJRUQQABITCg9TQ09Q",
            "RV9VTkNIQU5HRUQQARIRCg1TQ09QRV9DSEFOR0VEEAIiUgoGSW1wYWN0EhYK",
            "EklNUEFDVF9VTlNQRUNJRklFRBAAEg8KC0lNUEFDVF9ISUdIEAESDgoKSU1Q",
            "QUNUX0xPVxACEg8KC0lNUEFDVF9OT05FEANCfgogaW8uZ3JhZmVhcy52MWJl",
            "dGExLnZ1bG5lcmFiaWxpdHlQAVpSZ29vZ2xlLmdvbGFuZy5vcmcvZ2VucHJv",
            "dG8vZ29vZ2xlYXBpcy9kZXZ0b29scy9jb250YWluZXJhbmFseXNpcy92MWJl",
            "dGExL2N2c3M7Y3Zzc6ICA0dSQWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Grafeas.V1Beta1.Vulnerability.CVSSv3), global::Grafeas.V1Beta1.Vulnerability.CVSSv3.Parser, new[]{ "BaseScore", "ExploitabilityScore", "ImpactScore", "AttackVector", "AttackComplexity", "PrivilegesRequired", "UserInteraction", "Scope", "ConfidentialityImpact", "IntegrityImpact", "AvailabilityImpact" }, null, new[]{ typeof(global::Grafeas.V1Beta1.Vulnerability.CVSSv3.Types.AttackVector), typeof(global::Grafeas.V1Beta1.Vulnerability.CVSSv3.Types.AttackComplexity), typeof(global::Grafeas.V1Beta1.Vulnerability.CVSSv3.Types.PrivilegesRequired), typeof(global::Grafeas.V1Beta1.Vulnerability.CVSSv3.Types.UserInteraction), typeof(global::Grafeas.V1Beta1.Vulnerability.CVSSv3.Types.Scope), typeof(global::Grafeas.V1Beta1.Vulnerability.CVSSv3.Types.Impact) }, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// Common Vulnerability Scoring System version 3.
  /// For details, see https://www.first.org/cvss/specification-document
  /// </summary>
  public sealed partial class CVSSv3 : pb::IMessage<CVSSv3> {
    private static readonly pb::MessageParser<CVSSv3> _parser = new pb::MessageParser<CVSSv3>(() => new CVSSv3());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CVSSv3> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Grafeas.V1Beta1.Vulnerability.CvssReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CVSSv3() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CVSSv3(CVSSv3 other) : this() {
      baseScore_ = other.baseScore_;
      exploitabilityScore_ = other.exploitabilityScore_;
      impactScore_ = other.impactScore_;
      attackVector_ = other.attackVector_;
      attackComplexity_ = other.attackComplexity_;
      privilegesRequired_ = other.privilegesRequired_;
      userInteraction_ = other.userInteraction_;
      scope_ = other.scope_;
      confidentialityImpact_ = other.confidentialityImpact_;
      integrityImpact_ = other.integrityImpact_;
      availabilityImpact_ = other.availabilityImpact_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CVSSv3 Clone() {
      return new CVSSv3(this);
    }

    /// <summary>Field number for the "base_score" field.</summary>
    public const int BaseScoreFieldNumber = 1;
    private float baseScore_;
    /// <summary>
    /// The base score is a function of the base metric scores.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float BaseScore {
      get { return baseScore_; }
      set {
        baseScore_ = value;
      }
    }

    /// <summary>Field number for the "exploitability_score" field.</summary>
    public const int ExploitabilityScoreFieldNumber = 2;
    private float exploitabilityScore_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ExploitabilityScore {
      get { return exploitabilityScore_; }
      set {
        exploitabilityScore_ = value;
      }
    }

    /// <summary>Field number for the "impact_score" field.</summary>
    public const int ImpactScoreFieldNumber = 3;
    private float impactScore_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ImpactScore {
      get { return impactScore_; }
      set {
        impactScore_ = value;
      }
    }

    /// <summary>Field number for the "attack_vector" field.</summary>
    public const int AttackVectorFieldNumber = 5;
    private global::Grafeas.V1Beta1.Vulnerability.CVSSv3.Types.AttackVector attackVector_ = global::Grafeas.V1Beta1.Vulnerability.CVSSv3.Types.AttackVector.Unspecified;
    /// <summary>
    /// Base Metrics
    /// Represents the intrinsic characteristics of a vulnerability that are
    /// constant over time and across user environments.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Grafeas.V1Beta1.Vulnerability.CVSSv3.Types.AttackVector AttackVector {
      get { return attackVector_; }
      set {
        attackVector_ = value;
      }
    }

    /// <summary>Field number for the "attack_complexity" field.</summary>
    public const int AttackComplexityFieldNumber = 6;
    private global::Grafeas.V1Beta1.Vulnerability.CVSSv3.Types.AttackComplexity attackComplexity_ = global::Grafeas.V1Beta1.Vulnerability.CVSSv3.Types.AttackComplexity.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Grafeas.V1Beta1.Vulnerability.CVSSv3.Types.AttackComplexity AttackComplexity {
      get { return attackComplexity_; }
      set {
        attackComplexity_ = value;
      }
    }

    /// <summary>Field number for the "privileges_required" field.</summary>
    public const int PrivilegesRequiredFieldNumber = 7;
    private global::Grafeas.V1Beta1.Vulnerability.CVSSv3.Types.PrivilegesRequired privilegesRequired_ = global::Grafeas.V1Beta1.Vulnerability.CVSSv3.Types.PrivilegesRequired.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Grafeas.V1Beta1.Vulnerability.CVSSv3.Types.PrivilegesRequired PrivilegesRequired {
      get { return privilegesRequired_; }
      set {
        privilegesRequired_ = value;
      }
    }

    /// <summary>Field number for the "user_interaction" field.</summary>
    public const int UserInteractionFieldNumber = 8;
    private global::Grafeas.V1Beta1.Vulnerability.CVSSv3.Types.UserInteraction userInteraction_ = global::Grafeas.V1Beta1.Vulnerability.CVSSv3.Types.UserInteraction.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Grafeas.V1Beta1.Vulnerability.CVSSv3.Types.UserInteraction UserInteraction {
      get { return userInteraction_; }
      set {
        userInteraction_ = value;
      }
    }

    /// <summary>Field number for the "scope" field.</summary>
    public const int ScopeFieldNumber = 9;
    private global::Grafeas.V1Beta1.Vulnerability.CVSSv3.Types.Scope scope_ = global::Grafeas.V1Beta1.Vulnerability.CVSSv3.Types.Scope.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Grafeas.V1Beta1.Vulnerability.CVSSv3.Types.Scope Scope {
      get { return scope_; }
      set {
        scope_ = value;
      }
    }

    /// <summary>Field number for the "confidentiality_impact" field.</summary>
    public const int ConfidentialityImpactFieldNumber = 10;
    private global::Grafeas.V1Beta1.Vulnerability.CVSSv3.Types.Impact confidentialityImpact_ = global::Grafeas.V1Beta1.Vulnerability.CVSSv3.Types.Impact.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Grafeas.V1Beta1.Vulnerability.CVSSv3.Types.Impact ConfidentialityImpact {
      get { return confidentialityImpact_; }
      set {
        confidentialityImpact_ = value;
      }
    }

    /// <summary>Field number for the "integrity_impact" field.</summary>
    public const int IntegrityImpactFieldNumber = 11;
    private global::Grafeas.V1Beta1.Vulnerability.CVSSv3.Types.Impact integrityImpact_ = global::Grafeas.V1Beta1.Vulnerability.CVSSv3.Types.Impact.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Grafeas.V1Beta1.Vulnerability.CVSSv3.Types.Impact IntegrityImpact {
      get { return integrityImpact_; }
      set {
        integrityImpact_ = value;
      }
    }

    /// <summary>Field number for the "availability_impact" field.</summary>
    public const int AvailabilityImpactFieldNumber = 12;
    private global::Grafeas.V1Beta1.Vulnerability.CVSSv3.Types.Impact availabilityImpact_ = global::Grafeas.V1Beta1.Vulnerability.CVSSv3.Types.Impact.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Grafeas.V1Beta1.Vulnerability.CVSSv3.Types.Impact AvailabilityImpact {
      get { return availabilityImpact_; }
      set {
        availabilityImpact_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CVSSv3);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CVSSv3 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(BaseScore, other.BaseScore)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ExploitabilityScore, other.ExploitabilityScore)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ImpactScore, other.ImpactScore)) return false;
      if (AttackVector != other.AttackVector) return false;
      if (AttackComplexity != other.AttackComplexity) return false;
      if (PrivilegesRequired != other.PrivilegesRequired) return false;
      if (UserInteraction != other.UserInteraction) return false;
      if (Scope != other.Scope) return false;
      if (ConfidentialityImpact != other.ConfidentialityImpact) return false;
      if (IntegrityImpact != other.IntegrityImpact) return false;
      if (AvailabilityImpact != other.AvailabilityImpact) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (BaseScore != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(BaseScore);
      if (ExploitabilityScore != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ExploitabilityScore);
      if (ImpactScore != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ImpactScore);
      if (AttackVector != global::Grafeas.V1Beta1.Vulnerability.CVSSv3.Types.AttackVector.Unspecified) hash ^= AttackVector.GetHashCode();
      if (AttackComplexity != global::Grafeas.V1Beta1.Vulnerability.CVSSv3.Types.AttackComplexity.Unspecified) hash ^= AttackComplexity.GetHashCode();
      if (PrivilegesRequired != global::Grafeas.V1Beta1.Vulnerability.CVSSv3.Types.PrivilegesRequired.Unspecified) hash ^= PrivilegesRequired.GetHashCode();
      if (UserInteraction != global::Grafeas.V1Beta1.Vulnerability.CVSSv3.Types.UserInteraction.Unspecified) hash ^= UserInteraction.GetHashCode();
      if (Scope != global::Grafeas.V1Beta1.Vulnerability.CVSSv3.Types.Scope.Unspecified) hash ^= Scope.GetHashCode();
      if (ConfidentialityImpact != global::Grafeas.V1Beta1.Vulnerability.CVSSv3.Types.Impact.Unspecified) hash ^= ConfidentialityImpact.GetHashCode();
      if (IntegrityImpact != global::Grafeas.V1Beta1.Vulnerability.CVSSv3.Types.Impact.Unspecified) hash ^= IntegrityImpact.GetHashCode();
      if (AvailabilityImpact != global::Grafeas.V1Beta1.Vulnerability.CVSSv3.Types.Impact.Unspecified) hash ^= AvailabilityImpact.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BaseScore != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(BaseScore);
      }
      if (ExploitabilityScore != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(ExploitabilityScore);
      }
      if (ImpactScore != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(ImpactScore);
      }
      if (AttackVector != global::Grafeas.V1Beta1.Vulnerability.CVSSv3.Types.AttackVector.Unspecified) {
        output.WriteRawTag(40);
        output.WriteEnum((int) AttackVector);
      }
      if (AttackComplexity != global::Grafeas.V1Beta1.Vulnerability.CVSSv3.Types.AttackComplexity.Unspecified) {
        output.WriteRawTag(48);
        output.WriteEnum((int) AttackComplexity);
      }
      if (PrivilegesRequired != global::Grafeas.V1Beta1.Vulnerability.CVSSv3.Types.PrivilegesRequired.Unspecified) {
        output.WriteRawTag(56);
        output.WriteEnum((int) PrivilegesRequired);
      }
      if (UserInteraction != global::Grafeas.V1Beta1.Vulnerability.CVSSv3.Types.UserInteraction.Unspecified) {
        output.WriteRawTag(64);
        output.WriteEnum((int) UserInteraction);
      }
      if (Scope != global::Grafeas.V1Beta1.Vulnerability.CVSSv3.Types.Scope.Unspecified) {
        output.WriteRawTag(72);
        output.WriteEnum((int) Scope);
      }
      if (ConfidentialityImpact != global::Grafeas.V1Beta1.Vulnerability.CVSSv3.Types.Impact.Unspecified) {
        output.WriteRawTag(80);
        output.WriteEnum((int) ConfidentialityImpact);
      }
      if (IntegrityImpact != global::Grafeas.V1Beta1.Vulnerability.CVSSv3.Types.Impact.Unspecified) {
        output.WriteRawTag(88);
        output.WriteEnum((int) IntegrityImpact);
      }
      if (AvailabilityImpact != global::Grafeas.V1Beta1.Vulnerability.CVSSv3.Types.Impact.Unspecified) {
        output.WriteRawTag(96);
        output.WriteEnum((int) AvailabilityImpact);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BaseScore != 0F) {
        size += 1 + 4;
      }
      if (ExploitabilityScore != 0F) {
        size += 1 + 4;
      }
      if (ImpactScore != 0F) {
        size += 1 + 4;
      }
      if (AttackVector != global::Grafeas.V1Beta1.Vulnerability.CVSSv3.Types.AttackVector.Unspecified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) AttackVector);
      }
      if (AttackComplexity != global::Grafeas.V1Beta1.Vulnerability.CVSSv3.Types.AttackComplexity.Unspecified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) AttackComplexity);
      }
      if (PrivilegesRequired != global::Grafeas.V1Beta1.Vulnerability.CVSSv3.Types.PrivilegesRequired.Unspecified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PrivilegesRequired);
      }
      if (UserInteraction != global::Grafeas.V1Beta1.Vulnerability.CVSSv3.Types.UserInteraction.Unspecified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) UserInteraction);
      }
      if (Scope != global::Grafeas.V1Beta1.Vulnerability.CVSSv3.Types.Scope.Unspecified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Scope);
      }
      if (ConfidentialityImpact != global::Grafeas.V1Beta1.Vulnerability.CVSSv3.Types.Impact.Unspecified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ConfidentialityImpact);
      }
      if (IntegrityImpact != global::Grafeas.V1Beta1.Vulnerability.CVSSv3.Types.Impact.Unspecified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) IntegrityImpact);
      }
      if (AvailabilityImpact != global::Grafeas.V1Beta1.Vulnerability.CVSSv3.Types.Impact.Unspecified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) AvailabilityImpact);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CVSSv3 other) {
      if (other == null) {
        return;
      }
      if (other.BaseScore != 0F) {
        BaseScore = other.BaseScore;
      }
      if (other.ExploitabilityScore != 0F) {
        ExploitabilityScore = other.ExploitabilityScore;
      }
      if (other.ImpactScore != 0F) {
        ImpactScore = other.ImpactScore;
      }
      if (other.AttackVector != global::Grafeas.V1Beta1.Vulnerability.CVSSv3.Types.AttackVector.Unspecified) {
        AttackVector = other.AttackVector;
      }
      if (other.AttackComplexity != global::Grafeas.V1Beta1.Vulnerability.CVSSv3.Types.AttackComplexity.Unspecified) {
        AttackComplexity = other.AttackComplexity;
      }
      if (other.PrivilegesRequired != global::Grafeas.V1Beta1.Vulnerability.CVSSv3.Types.PrivilegesRequired.Unspecified) {
        PrivilegesRequired = other.PrivilegesRequired;
      }
      if (other.UserInteraction != global::Grafeas.V1Beta1.Vulnerability.CVSSv3.Types.UserInteraction.Unspecified) {
        UserInteraction = other.UserInteraction;
      }
      if (other.Scope != global::Grafeas.V1Beta1.Vulnerability.CVSSv3.Types.Scope.Unspecified) {
        Scope = other.Scope;
      }
      if (other.ConfidentialityImpact != global::Grafeas.V1Beta1.Vulnerability.CVSSv3.Types.Impact.Unspecified) {
        ConfidentialityImpact = other.ConfidentialityImpact;
      }
      if (other.IntegrityImpact != global::Grafeas.V1Beta1.Vulnerability.CVSSv3.Types.Impact.Unspecified) {
        IntegrityImpact = other.IntegrityImpact;
      }
      if (other.AvailabilityImpact != global::Grafeas.V1Beta1.Vulnerability.CVSSv3.Types.Impact.Unspecified) {
        AvailabilityImpact = other.AvailabilityImpact;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            BaseScore = input.ReadFloat();
            break;
          }
          case 21: {
            ExploitabilityScore = input.ReadFloat();
            break;
          }
          case 29: {
            ImpactScore = input.ReadFloat();
            break;
          }
          case 40: {
            AttackVector = (global::Grafeas.V1Beta1.Vulnerability.CVSSv3.Types.AttackVector) input.ReadEnum();
            break;
          }
          case 48: {
            AttackComplexity = (global::Grafeas.V1Beta1.Vulnerability.CVSSv3.Types.AttackComplexity) input.ReadEnum();
            break;
          }
          case 56: {
            PrivilegesRequired = (global::Grafeas.V1Beta1.Vulnerability.CVSSv3.Types.PrivilegesRequired) input.ReadEnum();
            break;
          }
          case 64: {
            UserInteraction = (global::Grafeas.V1Beta1.Vulnerability.CVSSv3.Types.UserInteraction) input.ReadEnum();
            break;
          }
          case 72: {
            Scope = (global::Grafeas.V1Beta1.Vulnerability.CVSSv3.Types.Scope) input.ReadEnum();
            break;
          }
          case 80: {
            ConfidentialityImpact = (global::Grafeas.V1Beta1.Vulnerability.CVSSv3.Types.Impact) input.ReadEnum();
            break;
          }
          case 88: {
            IntegrityImpact = (global::Grafeas.V1Beta1.Vulnerability.CVSSv3.Types.Impact) input.ReadEnum();
            break;
          }
          case 96: {
            AvailabilityImpact = (global::Grafeas.V1Beta1.Vulnerability.CVSSv3.Types.Impact) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the CVSSv3 message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum AttackVector {
        [pbr::OriginalName("ATTACK_VECTOR_UNSPECIFIED")] Unspecified = 0,
        [pbr::OriginalName("ATTACK_VECTOR_NETWORK")] Network = 1,
        [pbr::OriginalName("ATTACK_VECTOR_ADJACENT")] Adjacent = 2,
        [pbr::OriginalName("ATTACK_VECTOR_LOCAL")] Local = 3,
        [pbr::OriginalName("ATTACK_VECTOR_PHYSICAL")] Physical = 4,
      }

      public enum AttackComplexity {
        [pbr::OriginalName("ATTACK_COMPLEXITY_UNSPECIFIED")] Unspecified = 0,
        [pbr::OriginalName("ATTACK_COMPLEXITY_LOW")] Low = 1,
        [pbr::OriginalName("ATTACK_COMPLEXITY_HIGH")] High = 2,
      }

      public enum PrivilegesRequired {
        [pbr::OriginalName("PRIVILEGES_REQUIRED_UNSPECIFIED")] Unspecified = 0,
        [pbr::OriginalName("PRIVILEGES_REQUIRED_NONE")] None = 1,
        [pbr::OriginalName("PRIVILEGES_REQUIRED_LOW")] Low = 2,
        [pbr::OriginalName("PRIVILEGES_REQUIRED_HIGH")] High = 3,
      }

      public enum UserInteraction {
        [pbr::OriginalName("USER_INTERACTION_UNSPECIFIED")] Unspecified = 0,
        [pbr::OriginalName("USER_INTERACTION_NONE")] None = 1,
        [pbr::OriginalName("USER_INTERACTION_REQUIRED")] Required = 2,
      }

      public enum Scope {
        [pbr::OriginalName("SCOPE_UNSPECIFIED")] Unspecified = 0,
        [pbr::OriginalName("SCOPE_UNCHANGED")] Unchanged = 1,
        [pbr::OriginalName("SCOPE_CHANGED")] Changed = 2,
      }

      public enum Impact {
        [pbr::OriginalName("IMPACT_UNSPECIFIED")] Unspecified = 0,
        [pbr::OriginalName("IMPACT_HIGH")] High = 1,
        [pbr::OriginalName("IMPACT_LOW")] Low = 2,
        [pbr::OriginalName("IMPACT_NONE")] None = 3,
      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
