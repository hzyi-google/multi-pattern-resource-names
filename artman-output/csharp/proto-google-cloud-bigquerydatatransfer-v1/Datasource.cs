// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: google/cloud/bigquery/datatransfer/v1/datasource.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Google.Cloud.BigQuery.DataTransfer.V1 {

  /// <summary>Holder for reflection information generated from google/cloud/bigquery/datatransfer/v1/datasource.proto</summary>
  public static partial class DatasourceReflection {

    #region Descriptor
    /// <summary>File descriptor for google/cloud/bigquery/datatransfer/v1/datasource.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static DatasourceReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CjZnb29nbGUvY2xvdWQvYmlncXVlcnkvZGF0YXRyYW5zZmVyL3YxL2RhdGFz",
            "b3VyY2UucHJvdG8SJWdvb2dsZS5jbG91ZC5iaWdxdWVyeS5kYXRhdHJhbnNm",
            "ZXIudjEaHGdvb2dsZS9hcGkvYW5ub3RhdGlvbnMucHJvdG8aOGdvb2dsZS9j",
            "bG91ZC9iaWdxdWVyeS9kYXRhdHJhbnNmZXIvdjEvZGF0YXRyYW5zZmVyLnBy",
            "b3RvGjRnb29nbGUvY2xvdWQvYmlncXVlcnkvZGF0YXRyYW5zZmVyL3YxL3Ry",
            "YW5zZmVyLnByb3RvGh5nb29nbGUvcHJvdG9idWYvZHVyYXRpb24ucHJvdG8a",
            "G2dvb2dsZS9wcm90b2J1Zi9lbXB0eS5wcm90bxogZ29vZ2xlL3Byb3RvYnVm",
            "L2ZpZWxkX21hc2sucHJvdG8aH2dvb2dsZS9wcm90b2J1Zi90aW1lc3RhbXAu",
            "cHJvdG8aHmdvb2dsZS9wcm90b2J1Zi93cmFwcGVycy5wcm90bxoXZ29vZ2xl",
            "L2FwaS9jbGllbnQucHJvdG8ing4KEEltcG9ydGVkRGF0YUluZm8SCwoDc3Fs",
            "GAEgASgJEhwKFGRlc3RpbmF0aW9uX3RhYmxlX2lkGAIgASgJEiUKHWRlc3Rp",
            "bmF0aW9uX3RhYmxlX2Rlc2NyaXB0aW9uGAogASgJElsKCnRhYmxlX2RlZnMY",
            "AyADKAsyRy5nb29nbGUuY2xvdWQuYmlncXVlcnkuZGF0YXRyYW5zZmVyLnYx",
            "LkltcG9ydGVkRGF0YUluZm8uVGFibGVEZWZpbml0aW9uEh4KFnVzZXJfZGVm",
            "aW5lZF9mdW5jdGlvbnMYBCADKAkSUgoRd3JpdGVfZGlzcG9zaXRpb24YBiAB",
            "KA4yNy5nb29nbGUuY2xvdWQuYmlncXVlcnkuZGF0YXRyYW5zZmVyLnYxLldy",
            "aXRlRGlzcG9zaXRpb24arQMKC0ZpZWxkU2NoZW1hEhIKCmZpZWxkX25hbWUY",
            "ASABKAkSVgoEdHlwZRgCIAEoDjJILmdvb2dsZS5jbG91ZC5iaWdxdWVyeS5k",
            "YXRhdHJhbnNmZXIudjEuSW1wb3J0ZWREYXRhSW5mby5GaWVsZFNjaGVtYS5U",
            "eXBlEhMKC2lzX3JlcGVhdGVkGAMgASgIEhMKC2Rlc2NyaXB0aW9uGAQgASgJ",
            "ElQKBnNjaGVtYRgFIAEoCzJELmdvb2dsZS5jbG91ZC5iaWdxdWVyeS5kYXRh",
            "dHJhbnNmZXIudjEuSW1wb3J0ZWREYXRhSW5mby5SZWNvcmRTY2hlbWEisQEK",
            "BFR5cGUSFAoQVFlQRV9VTlNQRUNJRklFRBAAEgoKBlNUUklORxABEgsKB0lO",
            "VEVHRVIQAhIJCgVGTE9BVBADEgoKBlJFQ09SRBAEEgkKBUJZVEVTEAUSCwoH",
            "Qk9PTEVBThAGEg0KCVRJTUVTVEFNUBAHEggKBERBVEUQCBIICgRUSU1FEAkS",
            "DAoIREFURVRJTUUQChILCgdOVU1FUklDEAsSDQoJR0VPR1JBUEhZEAwaYwoM",
            "UmVjb3JkU2NoZW1hElMKBmZpZWxkcxgBIAMoCzJDLmdvb2dsZS5jbG91ZC5i",
            "aWdxdWVyeS5kYXRhdHJhbnNmZXIudjEuSW1wb3J0ZWREYXRhSW5mby5GaWVs",
            "ZFNjaGVtYRqRBgoPVGFibGVEZWZpbml0aW9uEhAKCHRhYmxlX2lkGAEgASgJ",
            "EhMKC3NvdXJjZV91cmlzGAIgAygJEk4KBmZvcm1hdBgDIAEoDjI+Lmdvb2ds",
            "ZS5jbG91ZC5iaWdxdWVyeS5kYXRhdHJhbnNmZXIudjEuSW1wb3J0ZWREYXRh",
            "SW5mby5Gb3JtYXQSFwoPbWF4X2JhZF9yZWNvcmRzGAQgASgFElIKCGVuY29k",
            "aW5nGAUgASgOMkAuZ29vZ2xlLmNsb3VkLmJpZ3F1ZXJ5LmRhdGF0cmFuc2Zl",
            "ci52MS5JbXBvcnRlZERhdGFJbmZvLkVuY29kaW5nEmcKC2Nzdl9vcHRpb25z",
            "GAYgASgLMlIuZ29vZ2xlLmNsb3VkLmJpZ3F1ZXJ5LmRhdGF0cmFuc2Zlci52",
            "MS5JbXBvcnRlZERhdGFJbmZvLlRhYmxlRGVmaW5pdGlvbi5Dc3ZPcHRpb25z",
            "ElQKBnNjaGVtYRgHIAEoCzJELmdvb2dsZS5jbG91ZC5iaWdxdWVyeS5kYXRh",
            "dHJhbnNmZXIudjEuSW1wb3J0ZWREYXRhSW5mby5SZWNvcmRTY2hlbWESOQoV",
            "aWdub3JlX3Vua25vd25fdmFsdWVzGAogASgLMhouZ29vZ2xlLnByb3RvYnVm",
            "LkJvb2xWYWx1ZRqfAgoKQ3N2T3B0aW9ucxI1Cg9maWVsZF9kZWxpbWl0ZXIY",
            "ASABKAsyHC5nb29nbGUucHJvdG9idWYuU3RyaW5nVmFsdWUSOQoVYWxsb3df",
            "cXVvdGVkX25ld2xpbmVzGAIgASgLMhouZ29vZ2xlLnByb3RvYnVmLkJvb2xW",
            "YWx1ZRIwCgpxdW90ZV9jaGFyGAMgASgLMhwuZ29vZ2xlLnByb3RvYnVmLlN0",
            "cmluZ1ZhbHVlEjYKEXNraXBfbGVhZGluZ19yb3dzGAQgASgLMhsuZ29vZ2xl",
            "LnByb3RvYnVmLkludDY0VmFsdWUSNQoRYWxsb3dfamFnZ2VkX3Jvd3MYBSAB",
            "KAsyGi5nb29nbGUucHJvdG9idWYuQm9vbFZhbHVlIn4KBkZvcm1hdBIWChJG",
            "T1JNQVRfVU5TUEVDSUZJRUQQABIHCgNDU1YQARIICgRKU09OEAISCAoEQVZS",
            "TxADEgwKCFJFQ09SRElPEAQSDAoIQ09MVU1OSU8QBRINCglDQVBBQ0lUT1IQ",
            "BhILCgdQQVJRVUVUEAcSBwoDT1JDEAgiPgoIRW5jb2RpbmcSGAoURU5DT0RJ",
            "TkdfVU5TUEVDSUZJRUQQABIOCgpJU09fODg1OV8xEAESCAoEVVRGOBACIpUB",
            "ChhVcGRhdGVUcmFuc2ZlclJ1blJlcXVlc3QSSAoMdHJhbnNmZXJfcnVuGAEg",
            "ASgLMjIuZ29vZ2xlLmNsb3VkLmJpZ3F1ZXJ5LmRhdGF0cmFuc2Zlci52MS5U",
            "cmFuc2ZlclJ1bhIvCgt1cGRhdGVfbWFzaxgCIAEoCzIaLmdvb2dsZS5wcm90",
            "b2J1Zi5GaWVsZE1hc2sigAEKHUxvZ1RyYW5zZmVyUnVuTWVzc2FnZXNSZXF1",
            "ZXN0EgwKBG5hbWUYASABKAkSUQoRdHJhbnNmZXJfbWVzc2FnZXMYAiADKAsy",
            "Ni5nb29nbGUuY2xvdWQuYmlncXVlcnkuZGF0YXRyYW5zZmVyLnYxLlRyYW5z",
            "ZmVyTWVzc2FnZSKrAQoYU3RhcnRCaWdRdWVyeUpvYnNSZXF1ZXN0EgwKBG5h",
            "bWUYASABKAkSTgoNaW1wb3J0ZWRfZGF0YRgCIAMoCzI3Lmdvb2dsZS5jbG91",
            "ZC5iaWdxdWVyeS5kYXRhdHJhbnNmZXIudjEuSW1wb3J0ZWREYXRhSW5mbxIY",
            "ChB1c2VyX2NyZWRlbnRpYWxzGAMgASgMEhcKD21heF9wYXJhbGxlbGlzbRgI",
            "IAEoBSIgChBGaW5pc2hSdW5SZXF1ZXN0EgwKBG5hbWUYASABKAkikAEKIUNy",
            "ZWF0ZURhdGFTb3VyY2VEZWZpbml0aW9uUmVxdWVzdBIOCgZwYXJlbnQYASAB",
            "KAkSWwoWZGF0YV9zb3VyY2VfZGVmaW5pdGlvbhgCIAEoCzI7Lmdvb2dsZS5j",
            "bG91ZC5iaWdxdWVyeS5kYXRhdHJhbnNmZXIudjEuRGF0YVNvdXJjZURlZmlu",
            "aXRpb24isQEKIVVwZGF0ZURhdGFTb3VyY2VEZWZpbml0aW9uUmVxdWVzdBJb",
            "ChZkYXRhX3NvdXJjZV9kZWZpbml0aW9uGAEgASgLMjsuZ29vZ2xlLmNsb3Vk",
            "LmJpZ3F1ZXJ5LmRhdGF0cmFuc2Zlci52MS5EYXRhU291cmNlRGVmaW5pdGlv",
            "bhIvCgt1cGRhdGVfbWFzaxgCIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5GaWVs",
            "ZE1hc2siMQohRGVsZXRlRGF0YVNvdXJjZURlZmluaXRpb25SZXF1ZXN0EgwK",
            "BG5hbWUYASABKAkiLgoeR2V0RGF0YVNvdXJjZURlZmluaXRpb25SZXF1ZXN0",
            "EgwKBG5hbWUYASABKAkiWQogTGlzdERhdGFTb3VyY2VEZWZpbml0aW9uc1Jl",
            "cXVlc3QSDgoGcGFyZW50GAEgASgJEhIKCnBhZ2VfdG9rZW4YAiABKAkSEQoJ",
            "cGFnZV9zaXplGAMgASgFIpoBCiFMaXN0RGF0YVNvdXJjZURlZmluaXRpb25z",
            "UmVzcG9uc2USXAoXZGF0YV9zb3VyY2VfZGVmaW5pdGlvbnMYASADKAsyOy5n",
            "b29nbGUuY2xvdWQuYmlncXVlcnkuZGF0YXRyYW5zZmVyLnYxLkRhdGFTb3Vy",
            "Y2VEZWZpbml0aW9uEhcKD25leHRfcGFnZV90b2tlbhgCIAEoCSLLAgoURGF0",
            "YVNvdXJjZURlZmluaXRpb24SDAoEbmFtZRgVIAEoCRJGCgtkYXRhX3NvdXJj",
            "ZRgBIAEoCzIxLmdvb2dsZS5jbG91ZC5iaWdxdWVyeS5kYXRhdHJhbnNmZXIu",
            "djEuRGF0YVNvdXJjZRIhChl0cmFuc2Zlcl9ydW5fcHVic3ViX3RvcGljGA0g",
            "ASgJEjIKD3J1bl90aW1lX29mZnNldBgQIAEoCzIZLmdvb2dsZS5wcm90b2J1",
            "Zi5EdXJhdGlvbhIVCg1zdXBwb3J0X2VtYWlsGBYgASgJEhcKD3NlcnZpY2Vf",
            "YWNjb3VudBgCIAEoCRIQCghkaXNhYmxlZBgFIAEoCBIkChx0cmFuc2Zlcl9j",
            "b25maWdfcHVic3ViX3RvcGljGAwgASgJEh4KFnN1cHBvcnRlZF9sb2NhdGlv",
            "bl9pZHMYFyADKAkqWwoQV3JpdGVEaXNwb3NpdGlvbhIhCh1XUklURV9ESVNQ",
            "T1NJVElPTl9VTlNQRUNJRklFRBAAEhIKDldSSVRFX1RSVU5DQVRFEAESEAoM",
            "V1JJVEVfQVBQRU5EEAIynRAKEURhdGFTb3VyY2VTZXJ2aWNlEucBChFVcGRh",
            "dGVUcmFuc2ZlclJ1bhI/Lmdvb2dsZS5jbG91ZC5iaWdxdWVyeS5kYXRhdHJh",
            "bnNmZXIudjEuVXBkYXRlVHJhbnNmZXJSdW5SZXF1ZXN0GjIuZ29vZ2xlLmNs",
            "b3VkLmJpZ3F1ZXJ5LmRhdGF0cmFuc2Zlci52MS5UcmFuc2ZlclJ1biJdgtPk",
            "kwJXMkcvdjEve3RyYW5zZmVyX3J1bi5uYW1lPXByb2plY3RzLyovbG9jYXRp",
            "b25zLyovdHJhbnNmZXJDb25maWdzLyovcnVucy8qfToMdHJhbnNmZXJfcnVu",
            "EskBChZMb2dUcmFuc2ZlclJ1bk1lc3NhZ2VzEkQuZ29vZ2xlLmNsb3VkLmJp",
            "Z3F1ZXJ5LmRhdGF0cmFuc2Zlci52MS5Mb2dUcmFuc2ZlclJ1bk1lc3NhZ2Vz",
            "UmVxdWVzdBoWLmdvb2dsZS5wcm90b2J1Zi5FbXB0eSJRgtPkkwJLIkYvdjEv",
            "e25hbWU9cHJvamVjdHMvKi9sb2NhdGlvbnMvKi90cmFuc2ZlckNvbmZpZ3Mv",
            "Ki9ydW5zLyp9OmxvZ01lc3NhZ2VzOgEqEsUBChFTdGFydEJpZ1F1ZXJ5Sm9i",
            "cxI/Lmdvb2dsZS5jbG91ZC5iaWdxdWVyeS5kYXRhdHJhbnNmZXIudjEuU3Rh",
            "cnRCaWdRdWVyeUpvYnNSZXF1ZXN0GhYuZ29vZ2xlLnByb3RvYnVmLkVtcHR5",
            "IleC0+STAlEiTC92MS97bmFtZT1wcm9qZWN0cy8qL2xvY2F0aW9ucy8qL3Ry",
            "YW5zZmVyQ29uZmlncy8qL3J1bnMvKn06c3RhcnRCaWdRdWVyeUpvYnM6ASoS",
            "rQEKCUZpbmlzaFJ1bhI3Lmdvb2dsZS5jbG91ZC5iaWdxdWVyeS5kYXRhdHJh",
            "bnNmZXIudjEuRmluaXNoUnVuUmVxdWVzdBoWLmdvb2dsZS5wcm90b2J1Zi5F",
            "bXB0eSJPgtPkkwJJIkQvdjEve25hbWU9cHJvamVjdHMvKi9sb2NhdGlvbnMv",
            "Ki90cmFuc2ZlckNvbmZpZ3MvKi9ydW5zLyp9OmZpbmlzaFJ1bjoBKhL+AQoa",
            "Q3JlYXRlRGF0YVNvdXJjZURlZmluaXRpb24SSC5nb29nbGUuY2xvdWQuYmln",
            "cXVlcnkuZGF0YXRyYW5zZmVyLnYxLkNyZWF0ZURhdGFTb3VyY2VEZWZpbml0",
            "aW9uUmVxdWVzdBo7Lmdvb2dsZS5jbG91ZC5iaWdxdWVyeS5kYXRhdHJhbnNm",
            "ZXIudjEuRGF0YVNvdXJjZURlZmluaXRpb24iWYLT5JMCUyI5L3YxL3twYXJl",
            "bnQ9cHJvamVjdHMvKi9sb2NhdGlvbnMvKn0vZGF0YVNvdXJjZURlZmluaXRp",
            "b25zOhZkYXRhX3NvdXJjZV9kZWZpbml0aW9uEpUCChpVcGRhdGVEYXRhU291",
            "cmNlRGVmaW5pdGlvbhJILmdvb2dsZS5jbG91ZC5iaWdxdWVyeS5kYXRhdHJh",
            "bnNmZXIudjEuVXBkYXRlRGF0YVNvdXJjZURlZmluaXRpb25SZXF1ZXN0Gjsu",
            "Z29vZ2xlLmNsb3VkLmJpZ3F1ZXJ5LmRhdGF0cmFuc2Zlci52MS5EYXRhU291",
            "cmNlRGVmaW5pdGlvbiJwgtPkkwJqMlAvdjEve2RhdGFfc291cmNlX2RlZmlu",
            "aXRpb24ubmFtZT1wcm9qZWN0cy8qL2xvY2F0aW9ucy8qL2RhdGFTb3VyY2VE",
            "ZWZpbml0aW9ucy8qfToWZGF0YV9zb3VyY2VfZGVmaW5pdGlvbhLBAQoaRGVs",
            "ZXRlRGF0YVNvdXJjZURlZmluaXRpb24SSC5nb29nbGUuY2xvdWQuYmlncXVl",
            "cnkuZGF0YXRyYW5zZmVyLnYxLkRlbGV0ZURhdGFTb3VyY2VEZWZpbml0aW9u",
            "UmVxdWVzdBoWLmdvb2dsZS5wcm90b2J1Zi5FbXB0eSJBgtPkkwI7KjkvdjEv",
            "e25hbWU9cHJvamVjdHMvKi9sb2NhdGlvbnMvKi9kYXRhU291cmNlRGVmaW5p",
            "dGlvbnMvKn0S4AEKF0dldERhdGFTb3VyY2VEZWZpbml0aW9uEkUuZ29vZ2xl",
            "LmNsb3VkLmJpZ3F1ZXJ5LmRhdGF0cmFuc2Zlci52MS5HZXREYXRhU291cmNl",
            "RGVmaW5pdGlvblJlcXVlc3QaOy5nb29nbGUuY2xvdWQuYmlncXVlcnkuZGF0",
            "YXRyYW5zZmVyLnYxLkRhdGFTb3VyY2VEZWZpbml0aW9uIkGC0+STAjsSOS92",
            "MS97bmFtZT1wcm9qZWN0cy8qL2xvY2F0aW9ucy8qL2RhdGFTb3VyY2VEZWZp",
            "bml0aW9ucy8qfRLxAQoZTGlzdERhdGFTb3VyY2VEZWZpbml0aW9ucxJHLmdv",
            "b2dsZS5jbG91ZC5iaWdxdWVyeS5kYXRhdHJhbnNmZXIudjEuTGlzdERhdGFT",
            "b3VyY2VEZWZpbml0aW9uc1JlcXVlc3QaSC5nb29nbGUuY2xvdWQuYmlncXVl",
            "cnkuZGF0YXRyYW5zZmVyLnYxLkxpc3REYXRhU291cmNlRGVmaW5pdGlvbnNS",
            "ZXNwb25zZSJBgtPkkwI7EjkvdjEve3BhcmVudD1wcm9qZWN0cy8qL2xvY2F0",
            "aW9ucy8qfS9kYXRhU291cmNlRGVmaW5pdGlvbnMaJspBI2JpZ3F1ZXJ5ZGF0",
            "YXRyYW5zZmVyLmdvb2dsZWFwaXMuY29tQuEBCiljb20uZ29vZ2xlLmNsb3Vk",
            "LmJpZ3F1ZXJ5LmRhdGF0cmFuc2Zlci52MUIPRGF0YVNvdXJjZVByb3RvUAFa",
            "UWdvb2dsZS5nb2xhbmcub3JnL2dlbnByb3RvL2dvb2dsZWFwaXMvY2xvdWQv",
            "YmlncXVlcnkvZGF0YXRyYW5zZmVyL3YxO2RhdGF0cmFuc2ZlcqoCJUdvb2ds",
            "ZS5DbG91ZC5CaWdRdWVyeS5EYXRhVHJhbnNmZXIuVjHKAiVHb29nbGVcQ2xv",
            "dWRcQmlnUXVlcnlcRGF0YVRyYW5zZmVyXFYxYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Api.AnnotationsReflection.Descriptor, global::Google.Cloud.BigQuery.DataTransfer.V1.DatatransferReflection.Descriptor, global::Google.Cloud.BigQuery.DataTransfer.V1.TransferReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.DurationReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.EmptyReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.FieldMaskReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.TimestampReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.WrappersReflection.Descriptor, global::Google.Api.ClientReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Google.Cloud.BigQuery.DataTransfer.V1.WriteDisposition), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.BigQuery.DataTransfer.V1.ImportedDataInfo), global::Google.Cloud.BigQuery.DataTransfer.V1.ImportedDataInfo.Parser, new[]{ "Sql", "DestinationTableId", "DestinationTableDescription", "TableDefs", "UserDefinedFunctions", "WriteDisposition" }, null, new[]{ typeof(global::Google.Cloud.BigQuery.DataTransfer.V1.ImportedDataInfo.Types.Format), typeof(global::Google.Cloud.BigQuery.DataTransfer.V1.ImportedDataInfo.Types.Encoding) }, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.BigQuery.DataTransfer.V1.ImportedDataInfo.Types.FieldSchema), global::Google.Cloud.BigQuery.DataTransfer.V1.ImportedDataInfo.Types.FieldSchema.Parser, new[]{ "FieldName", "Type", "IsRepeated", "Description", "Schema" }, null, new[]{ typeof(global::Google.Cloud.BigQuery.DataTransfer.V1.ImportedDataInfo.Types.FieldSchema.Types.Type) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.BigQuery.DataTransfer.V1.ImportedDataInfo.Types.RecordSchema), global::Google.Cloud.BigQuery.DataTransfer.V1.ImportedDataInfo.Types.RecordSchema.Parser, new[]{ "Fields" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.BigQuery.DataTransfer.V1.ImportedDataInfo.Types.TableDefinition), global::Google.Cloud.BigQuery.DataTransfer.V1.ImportedDataInfo.Types.TableDefinition.Parser, new[]{ "TableId", "SourceUris", "Format", "MaxBadRecords", "Encoding", "CsvOptions", "Schema", "IgnoreUnknownValues" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.BigQuery.DataTransfer.V1.ImportedDataInfo.Types.TableDefinition.Types.CsvOptions), global::Google.Cloud.BigQuery.DataTransfer.V1.ImportedDataInfo.Types.TableDefinition.Types.CsvOptions.Parser, new[]{ "FieldDelimiter", "AllowQuotedNewlines", "QuoteChar", "SkipLeadingRows", "AllowJaggedRows" }, null, null, null)})}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.BigQuery.DataTransfer.V1.UpdateTransferRunRequest), global::Google.Cloud.BigQuery.DataTransfer.V1.UpdateTransferRunRequest.Parser, new[]{ "TransferRun", "UpdateMask" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.BigQuery.DataTransfer.V1.LogTransferRunMessagesRequest), global::Google.Cloud.BigQuery.DataTransfer.V1.LogTransferRunMessagesRequest.Parser, new[]{ "Name", "TransferMessages" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.BigQuery.DataTransfer.V1.StartBigQueryJobsRequest), global::Google.Cloud.BigQuery.DataTransfer.V1.StartBigQueryJobsRequest.Parser, new[]{ "Name", "ImportedData", "UserCredentials", "MaxParallelism" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.BigQuery.DataTransfer.V1.FinishRunRequest), global::Google.Cloud.BigQuery.DataTransfer.V1.FinishRunRequest.Parser, new[]{ "Name" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.BigQuery.DataTransfer.V1.CreateDataSourceDefinitionRequest), global::Google.Cloud.BigQuery.DataTransfer.V1.CreateDataSourceDefinitionRequest.Parser, new[]{ "Parent", "DataSourceDefinition" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.BigQuery.DataTransfer.V1.UpdateDataSourceDefinitionRequest), global::Google.Cloud.BigQuery.DataTransfer.V1.UpdateDataSourceDefinitionRequest.Parser, new[]{ "DataSourceDefinition", "UpdateMask" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.BigQuery.DataTransfer.V1.DeleteDataSourceDefinitionRequest), global::Google.Cloud.BigQuery.DataTransfer.V1.DeleteDataSourceDefinitionRequest.Parser, new[]{ "Name" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.BigQuery.DataTransfer.V1.GetDataSourceDefinitionRequest), global::Google.Cloud.BigQuery.DataTransfer.V1.GetDataSourceDefinitionRequest.Parser, new[]{ "Name" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.BigQuery.DataTransfer.V1.ListDataSourceDefinitionsRequest), global::Google.Cloud.BigQuery.DataTransfer.V1.ListDataSourceDefinitionsRequest.Parser, new[]{ "Parent", "PageToken", "PageSize" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.BigQuery.DataTransfer.V1.ListDataSourceDefinitionsResponse), global::Google.Cloud.BigQuery.DataTransfer.V1.ListDataSourceDefinitionsResponse.Parser, new[]{ "DataSourceDefinitions", "NextPageToken" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.BigQuery.DataTransfer.V1.DataSourceDefinition), global::Google.Cloud.BigQuery.DataTransfer.V1.DataSourceDefinition.Parser, new[]{ "Name", "DataSource", "TransferRunPubsubTopic", "RunTimeOffset", "SupportEmail", "ServiceAccount", "Disabled", "TransferConfigPubsubTopic", "SupportedLocationIds" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  /// <summary>
  /// Options for writing to the table.
  /// The WRITE_EMPTY option is intentionally excluded from the enum and is not
  /// supported by the data transfer service.
  /// </summary>
  public enum WriteDisposition {
    /// <summary>
    /// The default writeDispostion
    /// </summary>
    [pbr::OriginalName("WRITE_DISPOSITION_UNSPECIFIED")] Unspecified = 0,
    /// <summary>
    /// overwrites the table data.
    /// </summary>
    [pbr::OriginalName("WRITE_TRUNCATE")] WriteTruncate = 1,
    /// <summary>
    /// the data is appended to the table.
    /// Note duplication might happen if this mode is used.
    /// </summary>
    [pbr::OriginalName("WRITE_APPEND")] WriteAppend = 2,
  }

  #endregion

  #region Messages
  /// <summary>
  /// Describes data which should be imported.
  /// </summary>
  public sealed partial class ImportedDataInfo : pb::IMessage<ImportedDataInfo> {
    private static readonly pb::MessageParser<ImportedDataInfo> _parser = new pb::MessageParser<ImportedDataInfo>(() => new ImportedDataInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ImportedDataInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.BigQuery.DataTransfer.V1.DatasourceReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ImportedDataInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ImportedDataInfo(ImportedDataInfo other) : this() {
      sql_ = other.sql_;
      destinationTableId_ = other.destinationTableId_;
      destinationTableDescription_ = other.destinationTableDescription_;
      tableDefs_ = other.tableDefs_.Clone();
      userDefinedFunctions_ = other.userDefinedFunctions_.Clone();
      writeDisposition_ = other.writeDisposition_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ImportedDataInfo Clone() {
      return new ImportedDataInfo(this);
    }

    /// <summary>Field number for the "sql" field.</summary>
    public const int SqlFieldNumber = 1;
    private string sql_ = "";
    /// <summary>
    /// SQL query to run. When empty, API checks that there is only one
    /// table_def specified and loads this table. Only Standard SQL queries
    /// are accepted. Legacy SQL is not allowed.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Sql {
      get { return sql_; }
      set {
        sql_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "destination_table_id" field.</summary>
    public const int DestinationTableIdFieldNumber = 2;
    private string destinationTableId_ = "";
    /// <summary>
    /// Table where results should be written.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DestinationTableId {
      get { return destinationTableId_; }
      set {
        destinationTableId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "destination_table_description" field.</summary>
    public const int DestinationTableDescriptionFieldNumber = 10;
    private string destinationTableDescription_ = "";
    /// <summary>
    /// The description of a destination table. This can be several sentences
    /// or paragraphs describing the table contents in detail.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DestinationTableDescription {
      get { return destinationTableDescription_; }
      set {
        destinationTableDescription_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "table_defs" field.</summary>
    public const int TableDefsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Google.Cloud.BigQuery.DataTransfer.V1.ImportedDataInfo.Types.TableDefinition> _repeated_tableDefs_codec
        = pb::FieldCodec.ForMessage(26, global::Google.Cloud.BigQuery.DataTransfer.V1.ImportedDataInfo.Types.TableDefinition.Parser);
    private readonly pbc::RepeatedField<global::Google.Cloud.BigQuery.DataTransfer.V1.ImportedDataInfo.Types.TableDefinition> tableDefs_ = new pbc::RepeatedField<global::Google.Cloud.BigQuery.DataTransfer.V1.ImportedDataInfo.Types.TableDefinition>();
    /// <summary>
    /// When used WITHOUT the "sql" parameter, describes the schema of the
    /// destination table.
    /// When used WITH the "sql" parameter, describes tables with data stored
    /// outside of BigQuery.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Cloud.BigQuery.DataTransfer.V1.ImportedDataInfo.Types.TableDefinition> TableDefs {
      get { return tableDefs_; }
    }

    /// <summary>Field number for the "user_defined_functions" field.</summary>
    public const int UserDefinedFunctionsFieldNumber = 4;
    private static readonly pb::FieldCodec<string> _repeated_userDefinedFunctions_codec
        = pb::FieldCodec.ForString(34);
    private readonly pbc::RepeatedField<string> userDefinedFunctions_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// Inline code for User-defined function resources.
    /// Ignored when "sql" parameter is empty.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> UserDefinedFunctions {
      get { return userDefinedFunctions_; }
    }

    /// <summary>Field number for the "write_disposition" field.</summary>
    public const int WriteDispositionFieldNumber = 6;
    private global::Google.Cloud.BigQuery.DataTransfer.V1.WriteDisposition writeDisposition_ = 0;
    /// <summary>
    /// Specifies the action if the destination table already exists.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.BigQuery.DataTransfer.V1.WriteDisposition WriteDisposition {
      get { return writeDisposition_; }
      set {
        writeDisposition_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ImportedDataInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ImportedDataInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Sql != other.Sql) return false;
      if (DestinationTableId != other.DestinationTableId) return false;
      if (DestinationTableDescription != other.DestinationTableDescription) return false;
      if(!tableDefs_.Equals(other.tableDefs_)) return false;
      if(!userDefinedFunctions_.Equals(other.userDefinedFunctions_)) return false;
      if (WriteDisposition != other.WriteDisposition) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Sql.Length != 0) hash ^= Sql.GetHashCode();
      if (DestinationTableId.Length != 0) hash ^= DestinationTableId.GetHashCode();
      if (DestinationTableDescription.Length != 0) hash ^= DestinationTableDescription.GetHashCode();
      hash ^= tableDefs_.GetHashCode();
      hash ^= userDefinedFunctions_.GetHashCode();
      if (WriteDisposition != 0) hash ^= WriteDisposition.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Sql.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Sql);
      }
      if (DestinationTableId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(DestinationTableId);
      }
      tableDefs_.WriteTo(output, _repeated_tableDefs_codec);
      userDefinedFunctions_.WriteTo(output, _repeated_userDefinedFunctions_codec);
      if (WriteDisposition != 0) {
        output.WriteRawTag(48);
        output.WriteEnum((int) WriteDisposition);
      }
      if (DestinationTableDescription.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(DestinationTableDescription);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Sql.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Sql);
      }
      if (DestinationTableId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DestinationTableId);
      }
      if (DestinationTableDescription.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DestinationTableDescription);
      }
      size += tableDefs_.CalculateSize(_repeated_tableDefs_codec);
      size += userDefinedFunctions_.CalculateSize(_repeated_userDefinedFunctions_codec);
      if (WriteDisposition != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) WriteDisposition);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ImportedDataInfo other) {
      if (other == null) {
        return;
      }
      if (other.Sql.Length != 0) {
        Sql = other.Sql;
      }
      if (other.DestinationTableId.Length != 0) {
        DestinationTableId = other.DestinationTableId;
      }
      if (other.DestinationTableDescription.Length != 0) {
        DestinationTableDescription = other.DestinationTableDescription;
      }
      tableDefs_.Add(other.tableDefs_);
      userDefinedFunctions_.Add(other.userDefinedFunctions_);
      if (other.WriteDisposition != 0) {
        WriteDisposition = other.WriteDisposition;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Sql = input.ReadString();
            break;
          }
          case 18: {
            DestinationTableId = input.ReadString();
            break;
          }
          case 26: {
            tableDefs_.AddEntriesFrom(input, _repeated_tableDefs_codec);
            break;
          }
          case 34: {
            userDefinedFunctions_.AddEntriesFrom(input, _repeated_userDefinedFunctions_codec);
            break;
          }
          case 48: {
            WriteDisposition = (global::Google.Cloud.BigQuery.DataTransfer.V1.WriteDisposition) input.ReadEnum();
            break;
          }
          case 82: {
            DestinationTableDescription = input.ReadString();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the ImportedDataInfo message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// Data format.
      /// </summary>
      public enum Format {
        /// <summary>
        /// Unspecified format. In this case, we have to infer the format from the
        /// data source.
        /// </summary>
        [pbr::OriginalName("FORMAT_UNSPECIFIED")] Unspecified = 0,
        /// <summary>
        /// CSV format.
        /// </summary>
        [pbr::OriginalName("CSV")] Csv = 1,
        /// <summary>
        /// Newline-delimited JSON.
        /// </summary>
        [pbr::OriginalName("JSON")] Json = 2,
        /// <summary>
        /// Avro format. See http://avro.apache.org .
        /// </summary>
        [pbr::OriginalName("AVRO")] Avro = 3,
        /// <summary>
        /// RecordIO.
        /// </summary>
        [pbr::OriginalName("RECORDIO")] Recordio = 4,
        /// <summary>
        /// ColumnIO.
        /// </summary>
        [pbr::OriginalName("COLUMNIO")] Columnio = 5,
        /// <summary>
        /// Capacitor.
        /// </summary>
        [pbr::OriginalName("CAPACITOR")] Capacitor = 6,
        /// <summary>
        /// Parquet format. See https://parquet.apache.org .
        /// </summary>
        [pbr::OriginalName("PARQUET")] Parquet = 7,
        /// <summary>
        /// ORC format. See https://orc.apache.org .
        /// </summary>
        [pbr::OriginalName("ORC")] Orc = 8,
      }

      /// <summary>
      /// Encoding of input data in CSV/JSON format.
      /// </summary>
      public enum Encoding {
        /// <summary>
        /// Default encoding (UTF8).
        /// </summary>
        [pbr::OriginalName("ENCODING_UNSPECIFIED")] Unspecified = 0,
        /// <summary>
        /// ISO_8859_1 encoding.
        /// </summary>
        [pbr::OriginalName("ISO_8859_1")] Iso88591 = 1,
        /// <summary>
        /// UTF8 encoding.
        /// </summary>
        [pbr::OriginalName("UTF8")] Utf8 = 2,
      }

      /// <summary>
      /// Defines schema of a field in the imported data.
      /// </summary>
      public sealed partial class FieldSchema : pb::IMessage<FieldSchema> {
        private static readonly pb::MessageParser<FieldSchema> _parser = new pb::MessageParser<FieldSchema>(() => new FieldSchema());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<FieldSchema> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Google.Cloud.BigQuery.DataTransfer.V1.ImportedDataInfo.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public FieldSchema() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public FieldSchema(FieldSchema other) : this() {
          fieldName_ = other.fieldName_;
          type_ = other.type_;
          isRepeated_ = other.isRepeated_;
          description_ = other.description_;
          schema_ = other.schema_ != null ? other.schema_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public FieldSchema Clone() {
          return new FieldSchema(this);
        }

        /// <summary>Field number for the "field_name" field.</summary>
        public const int FieldNameFieldNumber = 1;
        private string fieldName_ = "";
        /// <summary>
        /// Field name. Matches: [A-Za-z_][A-Za-z_0-9]{0,127}
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string FieldName {
          get { return fieldName_; }
          set {
            fieldName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "type" field.</summary>
        public const int TypeFieldNumber = 2;
        private global::Google.Cloud.BigQuery.DataTransfer.V1.ImportedDataInfo.Types.FieldSchema.Types.Type type_ = 0;
        /// <summary>
        /// Field type
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Google.Cloud.BigQuery.DataTransfer.V1.ImportedDataInfo.Types.FieldSchema.Types.Type Type {
          get { return type_; }
          set {
            type_ = value;
          }
        }

        /// <summary>Field number for the "is_repeated" field.</summary>
        public const int IsRepeatedFieldNumber = 3;
        private bool isRepeated_;
        /// <summary>
        /// Is field repeated.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool IsRepeated {
          get { return isRepeated_; }
          set {
            isRepeated_ = value;
          }
        }

        /// <summary>Field number for the "description" field.</summary>
        public const int DescriptionFieldNumber = 4;
        private string description_ = "";
        /// <summary>
        /// Description for this field.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Description {
          get { return description_; }
          set {
            description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "schema" field.</summary>
        public const int SchemaFieldNumber = 5;
        private global::Google.Cloud.BigQuery.DataTransfer.V1.ImportedDataInfo.Types.RecordSchema schema_;
        /// <summary>
        /// Present iff type == RECORD.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Google.Cloud.BigQuery.DataTransfer.V1.ImportedDataInfo.Types.RecordSchema Schema {
          get { return schema_; }
          set {
            schema_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as FieldSchema);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(FieldSchema other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (FieldName != other.FieldName) return false;
          if (Type != other.Type) return false;
          if (IsRepeated != other.IsRepeated) return false;
          if (Description != other.Description) return false;
          if (!object.Equals(Schema, other.Schema)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (FieldName.Length != 0) hash ^= FieldName.GetHashCode();
          if (Type != 0) hash ^= Type.GetHashCode();
          if (IsRepeated != false) hash ^= IsRepeated.GetHashCode();
          if (Description.Length != 0) hash ^= Description.GetHashCode();
          if (schema_ != null) hash ^= Schema.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (FieldName.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(FieldName);
          }
          if (Type != 0) {
            output.WriteRawTag(16);
            output.WriteEnum((int) Type);
          }
          if (IsRepeated != false) {
            output.WriteRawTag(24);
            output.WriteBool(IsRepeated);
          }
          if (Description.Length != 0) {
            output.WriteRawTag(34);
            output.WriteString(Description);
          }
          if (schema_ != null) {
            output.WriteRawTag(42);
            output.WriteMessage(Schema);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (FieldName.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(FieldName);
          }
          if (Type != 0) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
          }
          if (IsRepeated != false) {
            size += 1 + 1;
          }
          if (Description.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
          }
          if (schema_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Schema);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(FieldSchema other) {
          if (other == null) {
            return;
          }
          if (other.FieldName.Length != 0) {
            FieldName = other.FieldName;
          }
          if (other.Type != 0) {
            Type = other.Type;
          }
          if (other.IsRepeated != false) {
            IsRepeated = other.IsRepeated;
          }
          if (other.Description.Length != 0) {
            Description = other.Description;
          }
          if (other.schema_ != null) {
            if (schema_ == null) {
              Schema = new global::Google.Cloud.BigQuery.DataTransfer.V1.ImportedDataInfo.Types.RecordSchema();
            }
            Schema.MergeFrom(other.Schema);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                FieldName = input.ReadString();
                break;
              }
              case 16: {
                Type = (global::Google.Cloud.BigQuery.DataTransfer.V1.ImportedDataInfo.Types.FieldSchema.Types.Type) input.ReadEnum();
                break;
              }
              case 24: {
                IsRepeated = input.ReadBool();
                break;
              }
              case 34: {
                Description = input.ReadString();
                break;
              }
              case 42: {
                if (schema_ == null) {
                  Schema = new global::Google.Cloud.BigQuery.DataTransfer.V1.ImportedDataInfo.Types.RecordSchema();
                }
                input.ReadMessage(Schema);
                break;
              }
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the FieldSchema message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          /// <summary>
          /// LINT.IfChange
          /// Field type.
          /// </summary>
          public enum Type {
            /// <summary>
            /// Illegal value.
            /// </summary>
            [pbr::OriginalName("TYPE_UNSPECIFIED")] Unspecified = 0,
            /// <summary>
            /// 64K, UTF8.
            /// </summary>
            [pbr::OriginalName("STRING")] String = 1,
            /// <summary>
            /// 64-bit signed.
            /// </summary>
            [pbr::OriginalName("INTEGER")] Integer = 2,
            /// <summary>
            /// 64-bit IEEE floating point.
            /// </summary>
            [pbr::OriginalName("FLOAT")] Float = 3,
            /// <summary>
            /// Aggregate type.
            /// </summary>
            [pbr::OriginalName("RECORD")] Record = 4,
            /// <summary>
            /// 64K, Binary.
            /// </summary>
            [pbr::OriginalName("BYTES")] Bytes = 5,
            /// <summary>
            /// 2-valued.
            /// </summary>
            [pbr::OriginalName("BOOLEAN")] Boolean = 6,
            /// <summary>
            /// 64-bit signed usec since UTC epoch.
            /// </summary>
            [pbr::OriginalName("TIMESTAMP")] Timestamp = 7,
            /// <summary>
            /// Civil date - Year, Month, Day.
            /// </summary>
            [pbr::OriginalName("DATE")] Date = 8,
            /// <summary>
            /// Civil time - Hour, Minute, Second, Microseconds.
            /// </summary>
            [pbr::OriginalName("TIME")] Time = 9,
            /// <summary>
            /// Combination of civil date and civil time.
            /// </summary>
            [pbr::OriginalName("DATETIME")] Datetime = 10,
            /// <summary>
            /// Numeric type with 38 decimal digits of precision and 9 decimal digits
            /// of scale.
            /// </summary>
            [pbr::OriginalName("NUMERIC")] Numeric = 11,
            /// <summary>
            /// Geography object (go/googlesql_geography).
            /// </summary>
            [pbr::OriginalName("GEOGRAPHY")] Geography = 12,
          }

        }
        #endregion

      }

      /// <summary>
      /// Describes schema of the data to be ingested.
      /// </summary>
      public sealed partial class RecordSchema : pb::IMessage<RecordSchema> {
        private static readonly pb::MessageParser<RecordSchema> _parser = new pb::MessageParser<RecordSchema>(() => new RecordSchema());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<RecordSchema> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Google.Cloud.BigQuery.DataTransfer.V1.ImportedDataInfo.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RecordSchema() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RecordSchema(RecordSchema other) : this() {
          fields_ = other.fields_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RecordSchema Clone() {
          return new RecordSchema(this);
        }

        /// <summary>Field number for the "fields" field.</summary>
        public const int FieldsFieldNumber = 1;
        private static readonly pb::FieldCodec<global::Google.Cloud.BigQuery.DataTransfer.V1.ImportedDataInfo.Types.FieldSchema> _repeated_fields_codec
            = pb::FieldCodec.ForMessage(10, global::Google.Cloud.BigQuery.DataTransfer.V1.ImportedDataInfo.Types.FieldSchema.Parser);
        private readonly pbc::RepeatedField<global::Google.Cloud.BigQuery.DataTransfer.V1.ImportedDataInfo.Types.FieldSchema> fields_ = new pbc::RepeatedField<global::Google.Cloud.BigQuery.DataTransfer.V1.ImportedDataInfo.Types.FieldSchema>();
        /// <summary>
        /// One field per column in the record.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Google.Cloud.BigQuery.DataTransfer.V1.ImportedDataInfo.Types.FieldSchema> Fields {
          get { return fields_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as RecordSchema);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(RecordSchema other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if(!fields_.Equals(other.fields_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          hash ^= fields_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          fields_.WriteTo(output, _repeated_fields_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          size += fields_.CalculateSize(_repeated_fields_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(RecordSchema other) {
          if (other == null) {
            return;
          }
          fields_.Add(other.fields_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                fields_.AddEntriesFrom(input, _repeated_fields_codec);
                break;
              }
            }
          }
        }

      }

      /// <summary>
      /// External table definition. These tables can be referenced with 'name'
      /// in the query and can be read just like any other table.
      /// </summary>
      public sealed partial class TableDefinition : pb::IMessage<TableDefinition> {
        private static readonly pb::MessageParser<TableDefinition> _parser = new pb::MessageParser<TableDefinition>(() => new TableDefinition());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<TableDefinition> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Google.Cloud.BigQuery.DataTransfer.V1.ImportedDataInfo.Descriptor.NestedTypes[2]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TableDefinition() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TableDefinition(TableDefinition other) : this() {
          tableId_ = other.tableId_;
          sourceUris_ = other.sourceUris_.Clone();
          format_ = other.format_;
          maxBadRecords_ = other.maxBadRecords_;
          encoding_ = other.encoding_;
          csvOptions_ = other.csvOptions_ != null ? other.csvOptions_.Clone() : null;
          schema_ = other.schema_ != null ? other.schema_.Clone() : null;
          IgnoreUnknownValues = other.IgnoreUnknownValues;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TableDefinition Clone() {
          return new TableDefinition(this);
        }

        /// <summary>Field number for the "table_id" field.</summary>
        public const int TableIdFieldNumber = 1;
        private string tableId_ = "";
        /// <summary>
        /// BigQuery table_id (required). This will be used to reference this
        /// table in the query.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string TableId {
          get { return tableId_; }
          set {
            tableId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "source_uris" field.</summary>
        public const int SourceUrisFieldNumber = 2;
        private static readonly pb::FieldCodec<string> _repeated_sourceUris_codec
            = pb::FieldCodec.ForString(18);
        private readonly pbc::RepeatedField<string> sourceUris_ = new pbc::RepeatedField<string>();
        /// <summary>
        /// URIs for the data to be imported. All URIs must be from the same storage
        /// system.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<string> SourceUris {
          get { return sourceUris_; }
        }

        /// <summary>Field number for the "format" field.</summary>
        public const int FormatFieldNumber = 3;
        private global::Google.Cloud.BigQuery.DataTransfer.V1.ImportedDataInfo.Types.Format format_ = 0;
        /// <summary>
        /// Describes the format of the data in source_uri.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Google.Cloud.BigQuery.DataTransfer.V1.ImportedDataInfo.Types.Format Format {
          get { return format_; }
          set {
            format_ = value;
          }
        }

        /// <summary>Field number for the "max_bad_records" field.</summary>
        public const int MaxBadRecordsFieldNumber = 4;
        private int maxBadRecords_;
        /// <summary>
        /// Specify the maximum number of bad records that can be ignored.
        /// If bad records exceed this threshold the query is aborted.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int MaxBadRecords {
          get { return maxBadRecords_; }
          set {
            maxBadRecords_ = value;
          }
        }

        /// <summary>Field number for the "encoding" field.</summary>
        public const int EncodingFieldNumber = 5;
        private global::Google.Cloud.BigQuery.DataTransfer.V1.ImportedDataInfo.Types.Encoding encoding_ = 0;
        /// <summary>
        /// Character encoding of the input when applicable (CSV, JSON).
        /// Defaults to UTF8.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Google.Cloud.BigQuery.DataTransfer.V1.ImportedDataInfo.Types.Encoding Encoding {
          get { return encoding_; }
          set {
            encoding_ = value;
          }
        }

        /// <summary>Field number for the "csv_options" field.</summary>
        public const int CsvOptionsFieldNumber = 6;
        private global::Google.Cloud.BigQuery.DataTransfer.V1.ImportedDataInfo.Types.TableDefinition.Types.CsvOptions csvOptions_;
        /// <summary>
        /// CSV specific options.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Google.Cloud.BigQuery.DataTransfer.V1.ImportedDataInfo.Types.TableDefinition.Types.CsvOptions CsvOptions {
          get { return csvOptions_; }
          set {
            csvOptions_ = value;
          }
        }

        /// <summary>Field number for the "schema" field.</summary>
        public const int SchemaFieldNumber = 7;
        private global::Google.Cloud.BigQuery.DataTransfer.V1.ImportedDataInfo.Types.RecordSchema schema_;
        /// <summary>
        /// Optional schema for the data. When not specified for JSON and CSV formats
        /// we will try to detect it automatically.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Google.Cloud.BigQuery.DataTransfer.V1.ImportedDataInfo.Types.RecordSchema Schema {
          get { return schema_; }
          set {
            schema_ = value;
          }
        }

        /// <summary>Field number for the "ignore_unknown_values" field.</summary>
        public const int IgnoreUnknownValuesFieldNumber = 10;
        private static readonly pb::FieldCodec<bool?> _single_ignoreUnknownValues_codec = pb::FieldCodec.ForStructWrapper<bool>(82);
        private bool? ignoreUnknownValues_;
        /// <summary>
        /// Indicates if extra values that are not represented in the table schema is
        /// allowed.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool? IgnoreUnknownValues {
          get { return ignoreUnknownValues_; }
          set {
            ignoreUnknownValues_ = value;
          }
        }


        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as TableDefinition);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(TableDefinition other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (TableId != other.TableId) return false;
          if(!sourceUris_.Equals(other.sourceUris_)) return false;
          if (Format != other.Format) return false;
          if (MaxBadRecords != other.MaxBadRecords) return false;
          if (Encoding != other.Encoding) return false;
          if (!object.Equals(CsvOptions, other.CsvOptions)) return false;
          if (!object.Equals(Schema, other.Schema)) return false;
          if (IgnoreUnknownValues != other.IgnoreUnknownValues) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (TableId.Length != 0) hash ^= TableId.GetHashCode();
          hash ^= sourceUris_.GetHashCode();
          if (Format != 0) hash ^= Format.GetHashCode();
          if (MaxBadRecords != 0) hash ^= MaxBadRecords.GetHashCode();
          if (Encoding != 0) hash ^= Encoding.GetHashCode();
          if (csvOptions_ != null) hash ^= CsvOptions.GetHashCode();
          if (schema_ != null) hash ^= Schema.GetHashCode();
          if (ignoreUnknownValues_ != null) hash ^= IgnoreUnknownValues.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (TableId.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(TableId);
          }
          sourceUris_.WriteTo(output, _repeated_sourceUris_codec);
          if (Format != 0) {
            output.WriteRawTag(24);
            output.WriteEnum((int) Format);
          }
          if (MaxBadRecords != 0) {
            output.WriteRawTag(32);
            output.WriteInt32(MaxBadRecords);
          }
          if (Encoding != 0) {
            output.WriteRawTag(40);
            output.WriteEnum((int) Encoding);
          }
          if (csvOptions_ != null) {
            output.WriteRawTag(50);
            output.WriteMessage(CsvOptions);
          }
          if (schema_ != null) {
            output.WriteRawTag(58);
            output.WriteMessage(Schema);
          }
          if (ignoreUnknownValues_ != null) {
            _single_ignoreUnknownValues_codec.WriteTagAndValue(output, IgnoreUnknownValues);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (TableId.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(TableId);
          }
          size += sourceUris_.CalculateSize(_repeated_sourceUris_codec);
          if (Format != 0) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Format);
          }
          if (MaxBadRecords != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxBadRecords);
          }
          if (Encoding != 0) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Encoding);
          }
          if (csvOptions_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(CsvOptions);
          }
          if (schema_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Schema);
          }
          if (ignoreUnknownValues_ != null) {
            size += _single_ignoreUnknownValues_codec.CalculateSizeWithTag(IgnoreUnknownValues);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(TableDefinition other) {
          if (other == null) {
            return;
          }
          if (other.TableId.Length != 0) {
            TableId = other.TableId;
          }
          sourceUris_.Add(other.sourceUris_);
          if (other.Format != 0) {
            Format = other.Format;
          }
          if (other.MaxBadRecords != 0) {
            MaxBadRecords = other.MaxBadRecords;
          }
          if (other.Encoding != 0) {
            Encoding = other.Encoding;
          }
          if (other.csvOptions_ != null) {
            if (csvOptions_ == null) {
              CsvOptions = new global::Google.Cloud.BigQuery.DataTransfer.V1.ImportedDataInfo.Types.TableDefinition.Types.CsvOptions();
            }
            CsvOptions.MergeFrom(other.CsvOptions);
          }
          if (other.schema_ != null) {
            if (schema_ == null) {
              Schema = new global::Google.Cloud.BigQuery.DataTransfer.V1.ImportedDataInfo.Types.RecordSchema();
            }
            Schema.MergeFrom(other.Schema);
          }
          if (other.ignoreUnknownValues_ != null) {
            if (ignoreUnknownValues_ == null || other.IgnoreUnknownValues != false) {
              IgnoreUnknownValues = other.IgnoreUnknownValues;
            }
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                TableId = input.ReadString();
                break;
              }
              case 18: {
                sourceUris_.AddEntriesFrom(input, _repeated_sourceUris_codec);
                break;
              }
              case 24: {
                Format = (global::Google.Cloud.BigQuery.DataTransfer.V1.ImportedDataInfo.Types.Format) input.ReadEnum();
                break;
              }
              case 32: {
                MaxBadRecords = input.ReadInt32();
                break;
              }
              case 40: {
                Encoding = (global::Google.Cloud.BigQuery.DataTransfer.V1.ImportedDataInfo.Types.Encoding) input.ReadEnum();
                break;
              }
              case 50: {
                if (csvOptions_ == null) {
                  CsvOptions = new global::Google.Cloud.BigQuery.DataTransfer.V1.ImportedDataInfo.Types.TableDefinition.Types.CsvOptions();
                }
                input.ReadMessage(CsvOptions);
                break;
              }
              case 58: {
                if (schema_ == null) {
                  Schema = new global::Google.Cloud.BigQuery.DataTransfer.V1.ImportedDataInfo.Types.RecordSchema();
                }
                input.ReadMessage(Schema);
                break;
              }
              case 82: {
                bool? value = _single_ignoreUnknownValues_codec.Read(input);
                if (ignoreUnknownValues_ == null || value != false) {
                  IgnoreUnknownValues = value;
                }
                break;
              }
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the TableDefinition message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          /// <summary>
          /// CSV specific options.
          /// </summary>
          public sealed partial class CsvOptions : pb::IMessage<CsvOptions> {
            private static readonly pb::MessageParser<CsvOptions> _parser = new pb::MessageParser<CsvOptions>(() => new CsvOptions());
            private pb::UnknownFieldSet _unknownFields;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<CsvOptions> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::Google.Cloud.BigQuery.DataTransfer.V1.ImportedDataInfo.Types.TableDefinition.Descriptor.NestedTypes[0]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public CsvOptions() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public CsvOptions(CsvOptions other) : this() {
              FieldDelimiter = other.FieldDelimiter;
              AllowQuotedNewlines = other.AllowQuotedNewlines;
              QuoteChar = other.QuoteChar;
              SkipLeadingRows = other.SkipLeadingRows;
              AllowJaggedRows = other.AllowJaggedRows;
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public CsvOptions Clone() {
              return new CsvOptions(this);
            }

            /// <summary>Field number for the "field_delimiter" field.</summary>
            public const int FieldDelimiterFieldNumber = 1;
            private static readonly pb::FieldCodec<string> _single_fieldDelimiter_codec = pb::FieldCodec.ForClassWrapper<string>(10);
            private string fieldDelimiter_;
            /// <summary>
            /// The delimiter.  We currently restrict this to U+0001 to U+00FF and
            /// apply additional constraints during validation.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public string FieldDelimiter {
              get { return fieldDelimiter_; }
              set {
                fieldDelimiter_ = value;
              }
            }


            /// <summary>Field number for the "allow_quoted_newlines" field.</summary>
            public const int AllowQuotedNewlinesFieldNumber = 2;
            private static readonly pb::FieldCodec<bool?> _single_allowQuotedNewlines_codec = pb::FieldCodec.ForStructWrapper<bool>(18);
            private bool? allowQuotedNewlines_;
            /// <summary>
            /// Whether CSV files are allowed to have quoted newlines. If quoted
            /// newlines are allowed, we can't split CSV files.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool? AllowQuotedNewlines {
              get { return allowQuotedNewlines_; }
              set {
                allowQuotedNewlines_ = value;
              }
            }


            /// <summary>Field number for the "quote_char" field.</summary>
            public const int QuoteCharFieldNumber = 3;
            private static readonly pb::FieldCodec<string> _single_quoteChar_codec = pb::FieldCodec.ForClassWrapper<string>(26);
            private string quoteChar_;
            /// <summary>
            /// The quote character.  We currently restrict this to U+0000 to U+00FF
            /// and apply additional constraints during validation. Set to '\0' to
            /// indicate no quote is used.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public string QuoteChar {
              get { return quoteChar_; }
              set {
                quoteChar_ = value;
              }
            }


            /// <summary>Field number for the "skip_leading_rows" field.</summary>
            public const int SkipLeadingRowsFieldNumber = 4;
            private static readonly pb::FieldCodec<long?> _single_skipLeadingRows_codec = pb::FieldCodec.ForStructWrapper<long>(34);
            private long? skipLeadingRows_;
            /// <summary>
            /// Number of leading rows to skip.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public long? SkipLeadingRows {
              get { return skipLeadingRows_; }
              set {
                skipLeadingRows_ = value;
              }
            }


            /// <summary>Field number for the "allow_jagged_rows" field.</summary>
            public const int AllowJaggedRowsFieldNumber = 5;
            private static readonly pb::FieldCodec<bool?> _single_allowJaggedRows_codec = pb::FieldCodec.ForStructWrapper<bool>(42);
            private bool? allowJaggedRows_;
            /// <summary>
            /// Accept rows that are missing trailing optional columns.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool? AllowJaggedRows {
              get { return allowJaggedRows_; }
              set {
                allowJaggedRows_ = value;
              }
            }


            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as CsvOptions);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(CsvOptions other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (FieldDelimiter != other.FieldDelimiter) return false;
              if (AllowQuotedNewlines != other.AllowQuotedNewlines) return false;
              if (QuoteChar != other.QuoteChar) return false;
              if (SkipLeadingRows != other.SkipLeadingRows) return false;
              if (AllowJaggedRows != other.AllowJaggedRows) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (fieldDelimiter_ != null) hash ^= FieldDelimiter.GetHashCode();
              if (allowQuotedNewlines_ != null) hash ^= AllowQuotedNewlines.GetHashCode();
              if (quoteChar_ != null) hash ^= QuoteChar.GetHashCode();
              if (skipLeadingRows_ != null) hash ^= SkipLeadingRows.GetHashCode();
              if (allowJaggedRows_ != null) hash ^= AllowJaggedRows.GetHashCode();
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              if (fieldDelimiter_ != null) {
                _single_fieldDelimiter_codec.WriteTagAndValue(output, FieldDelimiter);
              }
              if (allowQuotedNewlines_ != null) {
                _single_allowQuotedNewlines_codec.WriteTagAndValue(output, AllowQuotedNewlines);
              }
              if (quoteChar_ != null) {
                _single_quoteChar_codec.WriteTagAndValue(output, QuoteChar);
              }
              if (skipLeadingRows_ != null) {
                _single_skipLeadingRows_codec.WriteTagAndValue(output, SkipLeadingRows);
              }
              if (allowJaggedRows_ != null) {
                _single_allowJaggedRows_codec.WriteTagAndValue(output, AllowJaggedRows);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (fieldDelimiter_ != null) {
                size += _single_fieldDelimiter_codec.CalculateSizeWithTag(FieldDelimiter);
              }
              if (allowQuotedNewlines_ != null) {
                size += _single_allowQuotedNewlines_codec.CalculateSizeWithTag(AllowQuotedNewlines);
              }
              if (quoteChar_ != null) {
                size += _single_quoteChar_codec.CalculateSizeWithTag(QuoteChar);
              }
              if (skipLeadingRows_ != null) {
                size += _single_skipLeadingRows_codec.CalculateSizeWithTag(SkipLeadingRows);
              }
              if (allowJaggedRows_ != null) {
                size += _single_allowJaggedRows_codec.CalculateSizeWithTag(AllowJaggedRows);
              }
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(CsvOptions other) {
              if (other == null) {
                return;
              }
              if (other.fieldDelimiter_ != null) {
                if (fieldDelimiter_ == null || other.FieldDelimiter != "") {
                  FieldDelimiter = other.FieldDelimiter;
                }
              }
              if (other.allowQuotedNewlines_ != null) {
                if (allowQuotedNewlines_ == null || other.AllowQuotedNewlines != false) {
                  AllowQuotedNewlines = other.AllowQuotedNewlines;
                }
              }
              if (other.quoteChar_ != null) {
                if (quoteChar_ == null || other.QuoteChar != "") {
                  QuoteChar = other.QuoteChar;
                }
              }
              if (other.skipLeadingRows_ != null) {
                if (skipLeadingRows_ == null || other.SkipLeadingRows != 0L) {
                  SkipLeadingRows = other.SkipLeadingRows;
                }
              }
              if (other.allowJaggedRows_ != null) {
                if (allowJaggedRows_ == null || other.AllowJaggedRows != false) {
                  AllowJaggedRows = other.AllowJaggedRows;
                }
              }
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 10: {
                    string value = _single_fieldDelimiter_codec.Read(input);
                    if (fieldDelimiter_ == null || value != "") {
                      FieldDelimiter = value;
                    }
                    break;
                  }
                  case 18: {
                    bool? value = _single_allowQuotedNewlines_codec.Read(input);
                    if (allowQuotedNewlines_ == null || value != false) {
                      AllowQuotedNewlines = value;
                    }
                    break;
                  }
                  case 26: {
                    string value = _single_quoteChar_codec.Read(input);
                    if (quoteChar_ == null || value != "") {
                      QuoteChar = value;
                    }
                    break;
                  }
                  case 34: {
                    long? value = _single_skipLeadingRows_codec.Read(input);
                    if (skipLeadingRows_ == null || value != 0L) {
                      SkipLeadingRows = value;
                    }
                    break;
                  }
                  case 42: {
                    bool? value = _single_allowJaggedRows_codec.Read(input);
                    if (allowJaggedRows_ == null || value != false) {
                      AllowJaggedRows = value;
                    }
                    break;
                  }
                }
              }
            }

          }

        }
        #endregion

      }

    }
    #endregion

  }

  /// <summary>
  /// A request to update a transfer run.
  /// </summary>
  public sealed partial class UpdateTransferRunRequest : pb::IMessage<UpdateTransferRunRequest> {
    private static readonly pb::MessageParser<UpdateTransferRunRequest> _parser = new pb::MessageParser<UpdateTransferRunRequest>(() => new UpdateTransferRunRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpdateTransferRunRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.BigQuery.DataTransfer.V1.DatasourceReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateTransferRunRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateTransferRunRequest(UpdateTransferRunRequest other) : this() {
      transferRun_ = other.transferRun_ != null ? other.transferRun_.Clone() : null;
      updateMask_ = other.updateMask_ != null ? other.updateMask_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateTransferRunRequest Clone() {
      return new UpdateTransferRunRequest(this);
    }

    /// <summary>Field number for the "transfer_run" field.</summary>
    public const int TransferRunFieldNumber = 1;
    private global::Google.Cloud.BigQuery.DataTransfer.V1.TransferRun transferRun_;
    /// <summary>
    /// Run name must be set and correspond to an already existing run. Only
    /// state, error_status, and data_version fields will be updated. All other
    /// fields will be ignored.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.BigQuery.DataTransfer.V1.TransferRun TransferRun {
      get { return transferRun_; }
      set {
        transferRun_ = value;
      }
    }

    /// <summary>Field number for the "update_mask" field.</summary>
    public const int UpdateMaskFieldNumber = 2;
    private global::Google.Protobuf.WellKnownTypes.FieldMask updateMask_;
    /// <summary>
    /// Required list of fields to be updated in this request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.FieldMask UpdateMask {
      get { return updateMask_; }
      set {
        updateMask_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpdateTransferRunRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpdateTransferRunRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(TransferRun, other.TransferRun)) return false;
      if (!object.Equals(UpdateMask, other.UpdateMask)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (transferRun_ != null) hash ^= TransferRun.GetHashCode();
      if (updateMask_ != null) hash ^= UpdateMask.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (transferRun_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(TransferRun);
      }
      if (updateMask_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(UpdateMask);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (transferRun_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TransferRun);
      }
      if (updateMask_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UpdateMask);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpdateTransferRunRequest other) {
      if (other == null) {
        return;
      }
      if (other.transferRun_ != null) {
        if (transferRun_ == null) {
          TransferRun = new global::Google.Cloud.BigQuery.DataTransfer.V1.TransferRun();
        }
        TransferRun.MergeFrom(other.TransferRun);
      }
      if (other.updateMask_ != null) {
        if (updateMask_ == null) {
          UpdateMask = new global::Google.Protobuf.WellKnownTypes.FieldMask();
        }
        UpdateMask.MergeFrom(other.UpdateMask);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (transferRun_ == null) {
              TransferRun = new global::Google.Cloud.BigQuery.DataTransfer.V1.TransferRun();
            }
            input.ReadMessage(TransferRun);
            break;
          }
          case 18: {
            if (updateMask_ == null) {
              UpdateMask = new global::Google.Protobuf.WellKnownTypes.FieldMask();
            }
            input.ReadMessage(UpdateMask);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// A request to add transfer status messages to the run.
  /// </summary>
  public sealed partial class LogTransferRunMessagesRequest : pb::IMessage<LogTransferRunMessagesRequest> {
    private static readonly pb::MessageParser<LogTransferRunMessagesRequest> _parser = new pb::MessageParser<LogTransferRunMessagesRequest>(() => new LogTransferRunMessagesRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LogTransferRunMessagesRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.BigQuery.DataTransfer.V1.DatasourceReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LogTransferRunMessagesRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LogTransferRunMessagesRequest(LogTransferRunMessagesRequest other) : this() {
      name_ = other.name_;
      transferMessages_ = other.transferMessages_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LogTransferRunMessagesRequest Clone() {
      return new LogTransferRunMessagesRequest(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// Name of the resource in the form:
    /// "projects/{project_id}/locations/{location_id}/transferConfigs/{config_id}/runs/{run_id}"
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "transfer_messages" field.</summary>
    public const int TransferMessagesFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Google.Cloud.BigQuery.DataTransfer.V1.TransferMessage> _repeated_transferMessages_codec
        = pb::FieldCodec.ForMessage(18, global::Google.Cloud.BigQuery.DataTransfer.V1.TransferMessage.Parser);
    private readonly pbc::RepeatedField<global::Google.Cloud.BigQuery.DataTransfer.V1.TransferMessage> transferMessages_ = new pbc::RepeatedField<global::Google.Cloud.BigQuery.DataTransfer.V1.TransferMessage>();
    /// <summary>
    /// Messages to append.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Cloud.BigQuery.DataTransfer.V1.TransferMessage> TransferMessages {
      get { return transferMessages_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LogTransferRunMessagesRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LogTransferRunMessagesRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if(!transferMessages_.Equals(other.transferMessages_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      hash ^= transferMessages_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      transferMessages_.WriteTo(output, _repeated_transferMessages_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      size += transferMessages_.CalculateSize(_repeated_transferMessages_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LogTransferRunMessagesRequest other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      transferMessages_.Add(other.transferMessages_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            transferMessages_.AddEntriesFrom(input, _repeated_transferMessages_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// A request to start and monitor a BigQuery load job.
  /// </summary>
  public sealed partial class StartBigQueryJobsRequest : pb::IMessage<StartBigQueryJobsRequest> {
    private static readonly pb::MessageParser<StartBigQueryJobsRequest> _parser = new pb::MessageParser<StartBigQueryJobsRequest>(() => new StartBigQueryJobsRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StartBigQueryJobsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.BigQuery.DataTransfer.V1.DatasourceReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StartBigQueryJobsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StartBigQueryJobsRequest(StartBigQueryJobsRequest other) : this() {
      name_ = other.name_;
      importedData_ = other.importedData_.Clone();
      userCredentials_ = other.userCredentials_;
      maxParallelism_ = other.maxParallelism_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StartBigQueryJobsRequest Clone() {
      return new StartBigQueryJobsRequest(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// Name of the resource in the form:
    /// "projects/{project_id}/locations/{location_id}/transferConfigs/{config_id}/runs/{run_id}"
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "imported_data" field.</summary>
    public const int ImportedDataFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Google.Cloud.BigQuery.DataTransfer.V1.ImportedDataInfo> _repeated_importedData_codec
        = pb::FieldCodec.ForMessage(18, global::Google.Cloud.BigQuery.DataTransfer.V1.ImportedDataInfo.Parser);
    private readonly pbc::RepeatedField<global::Google.Cloud.BigQuery.DataTransfer.V1.ImportedDataInfo> importedData_ = new pbc::RepeatedField<global::Google.Cloud.BigQuery.DataTransfer.V1.ImportedDataInfo>();
    /// <summary>
    /// Import jobs which should be started and monitored.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Cloud.BigQuery.DataTransfer.V1.ImportedDataInfo> ImportedData {
      get { return importedData_; }
    }

    /// <summary>Field number for the "user_credentials" field.</summary>
    public const int UserCredentialsFieldNumber = 3;
    private pb::ByteString userCredentials_ = pb::ByteString.Empty;
    /// <summary>
    /// User credentials which should be used to start/monitor
    /// BigQuery jobs. If not specified, then jobs
    /// are started using data source service account credentials.
    /// This may be OAuth token or JWT token.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString UserCredentials {
      get { return userCredentials_; }
      set {
        userCredentials_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "max_parallelism" field.</summary>
    public const int MaxParallelismFieldNumber = 8;
    private int maxParallelism_;
    /// <summary>
    /// The number of BQ Jobs that can run in parallel.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxParallelism {
      get { return maxParallelism_; }
      set {
        maxParallelism_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StartBigQueryJobsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StartBigQueryJobsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if(!importedData_.Equals(other.importedData_)) return false;
      if (UserCredentials != other.UserCredentials) return false;
      if (MaxParallelism != other.MaxParallelism) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      hash ^= importedData_.GetHashCode();
      if (UserCredentials.Length != 0) hash ^= UserCredentials.GetHashCode();
      if (MaxParallelism != 0) hash ^= MaxParallelism.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      importedData_.WriteTo(output, _repeated_importedData_codec);
      if (UserCredentials.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(UserCredentials);
      }
      if (MaxParallelism != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(MaxParallelism);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      size += importedData_.CalculateSize(_repeated_importedData_codec);
      if (UserCredentials.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(UserCredentials);
      }
      if (MaxParallelism != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxParallelism);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StartBigQueryJobsRequest other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      importedData_.Add(other.importedData_);
      if (other.UserCredentials.Length != 0) {
        UserCredentials = other.UserCredentials;
      }
      if (other.MaxParallelism != 0) {
        MaxParallelism = other.MaxParallelism;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            importedData_.AddEntriesFrom(input, _repeated_importedData_codec);
            break;
          }
          case 26: {
            UserCredentials = input.ReadBytes();
            break;
          }
          case 64: {
            MaxParallelism = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// A request to finish a run.
  /// </summary>
  public sealed partial class FinishRunRequest : pb::IMessage<FinishRunRequest> {
    private static readonly pb::MessageParser<FinishRunRequest> _parser = new pb::MessageParser<FinishRunRequest>(() => new FinishRunRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FinishRunRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.BigQuery.DataTransfer.V1.DatasourceReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FinishRunRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FinishRunRequest(FinishRunRequest other) : this() {
      name_ = other.name_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FinishRunRequest Clone() {
      return new FinishRunRequest(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// Name of the resource in the form:
    /// "projects/{project_id}/locations/{location_id}/transferConfigs/{config_id}/runs/{run_id}"
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FinishRunRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FinishRunRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FinishRunRequest other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Represents the request of the CreateDataSourceDefinition method.
  /// </summary>
  public sealed partial class CreateDataSourceDefinitionRequest : pb::IMessage<CreateDataSourceDefinitionRequest> {
    private static readonly pb::MessageParser<CreateDataSourceDefinitionRequest> _parser = new pb::MessageParser<CreateDataSourceDefinitionRequest>(() => new CreateDataSourceDefinitionRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CreateDataSourceDefinitionRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.BigQuery.DataTransfer.V1.DatasourceReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateDataSourceDefinitionRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateDataSourceDefinitionRequest(CreateDataSourceDefinitionRequest other) : this() {
      parent_ = other.parent_;
      dataSourceDefinition_ = other.dataSourceDefinition_ != null ? other.dataSourceDefinition_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateDataSourceDefinitionRequest Clone() {
      return new CreateDataSourceDefinitionRequest(this);
    }

    /// <summary>Field number for the "parent" field.</summary>
    public const int ParentFieldNumber = 1;
    private string parent_ = "";
    /// <summary>
    /// The BigQuery project id for which data source definition is associated.
    /// Must be in the form: `projects/{project_id}/locations/{location_id}`
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Parent {
      get { return parent_; }
      set {
        parent_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "data_source_definition" field.</summary>
    public const int DataSourceDefinitionFieldNumber = 2;
    private global::Google.Cloud.BigQuery.DataTransfer.V1.DataSourceDefinition dataSourceDefinition_;
    /// <summary>
    /// Data source definition.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.BigQuery.DataTransfer.V1.DataSourceDefinition DataSourceDefinition {
      get { return dataSourceDefinition_; }
      set {
        dataSourceDefinition_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CreateDataSourceDefinitionRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CreateDataSourceDefinitionRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Parent != other.Parent) return false;
      if (!object.Equals(DataSourceDefinition, other.DataSourceDefinition)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Parent.Length != 0) hash ^= Parent.GetHashCode();
      if (dataSourceDefinition_ != null) hash ^= DataSourceDefinition.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Parent.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Parent);
      }
      if (dataSourceDefinition_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(DataSourceDefinition);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Parent.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Parent);
      }
      if (dataSourceDefinition_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DataSourceDefinition);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CreateDataSourceDefinitionRequest other) {
      if (other == null) {
        return;
      }
      if (other.Parent.Length != 0) {
        Parent = other.Parent;
      }
      if (other.dataSourceDefinition_ != null) {
        if (dataSourceDefinition_ == null) {
          DataSourceDefinition = new global::Google.Cloud.BigQuery.DataTransfer.V1.DataSourceDefinition();
        }
        DataSourceDefinition.MergeFrom(other.DataSourceDefinition);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Parent = input.ReadString();
            break;
          }
          case 18: {
            if (dataSourceDefinition_ == null) {
              DataSourceDefinition = new global::Google.Cloud.BigQuery.DataTransfer.V1.DataSourceDefinition();
            }
            input.ReadMessage(DataSourceDefinition);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Represents the request of the UpdateDataSourceDefinition method.
  /// </summary>
  public sealed partial class UpdateDataSourceDefinitionRequest : pb::IMessage<UpdateDataSourceDefinitionRequest> {
    private static readonly pb::MessageParser<UpdateDataSourceDefinitionRequest> _parser = new pb::MessageParser<UpdateDataSourceDefinitionRequest>(() => new UpdateDataSourceDefinitionRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpdateDataSourceDefinitionRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.BigQuery.DataTransfer.V1.DatasourceReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateDataSourceDefinitionRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateDataSourceDefinitionRequest(UpdateDataSourceDefinitionRequest other) : this() {
      dataSourceDefinition_ = other.dataSourceDefinition_ != null ? other.dataSourceDefinition_.Clone() : null;
      updateMask_ = other.updateMask_ != null ? other.updateMask_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateDataSourceDefinitionRequest Clone() {
      return new UpdateDataSourceDefinitionRequest(this);
    }

    /// <summary>Field number for the "data_source_definition" field.</summary>
    public const int DataSourceDefinitionFieldNumber = 1;
    private global::Google.Cloud.BigQuery.DataTransfer.V1.DataSourceDefinition dataSourceDefinition_;
    /// <summary>
    /// Data source definition.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.BigQuery.DataTransfer.V1.DataSourceDefinition DataSourceDefinition {
      get { return dataSourceDefinition_; }
      set {
        dataSourceDefinition_ = value;
      }
    }

    /// <summary>Field number for the "update_mask" field.</summary>
    public const int UpdateMaskFieldNumber = 2;
    private global::Google.Protobuf.WellKnownTypes.FieldMask updateMask_;
    /// <summary>
    /// Update field mask.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.FieldMask UpdateMask {
      get { return updateMask_; }
      set {
        updateMask_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpdateDataSourceDefinitionRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpdateDataSourceDefinitionRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(DataSourceDefinition, other.DataSourceDefinition)) return false;
      if (!object.Equals(UpdateMask, other.UpdateMask)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (dataSourceDefinition_ != null) hash ^= DataSourceDefinition.GetHashCode();
      if (updateMask_ != null) hash ^= UpdateMask.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (dataSourceDefinition_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(DataSourceDefinition);
      }
      if (updateMask_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(UpdateMask);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (dataSourceDefinition_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DataSourceDefinition);
      }
      if (updateMask_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UpdateMask);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpdateDataSourceDefinitionRequest other) {
      if (other == null) {
        return;
      }
      if (other.dataSourceDefinition_ != null) {
        if (dataSourceDefinition_ == null) {
          DataSourceDefinition = new global::Google.Cloud.BigQuery.DataTransfer.V1.DataSourceDefinition();
        }
        DataSourceDefinition.MergeFrom(other.DataSourceDefinition);
      }
      if (other.updateMask_ != null) {
        if (updateMask_ == null) {
          UpdateMask = new global::Google.Protobuf.WellKnownTypes.FieldMask();
        }
        UpdateMask.MergeFrom(other.UpdateMask);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (dataSourceDefinition_ == null) {
              DataSourceDefinition = new global::Google.Cloud.BigQuery.DataTransfer.V1.DataSourceDefinition();
            }
            input.ReadMessage(DataSourceDefinition);
            break;
          }
          case 18: {
            if (updateMask_ == null) {
              UpdateMask = new global::Google.Protobuf.WellKnownTypes.FieldMask();
            }
            input.ReadMessage(UpdateMask);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Represents the request of the DeleteDataSourceDefinition method. All transfer
  /// configs associated with the data source must be deleted first, before the
  /// data source can be deleted.
  /// </summary>
  public sealed partial class DeleteDataSourceDefinitionRequest : pb::IMessage<DeleteDataSourceDefinitionRequest> {
    private static readonly pb::MessageParser<DeleteDataSourceDefinitionRequest> _parser = new pb::MessageParser<DeleteDataSourceDefinitionRequest>(() => new DeleteDataSourceDefinitionRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeleteDataSourceDefinitionRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.BigQuery.DataTransfer.V1.DatasourceReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteDataSourceDefinitionRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteDataSourceDefinitionRequest(DeleteDataSourceDefinitionRequest other) : this() {
      name_ = other.name_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteDataSourceDefinitionRequest Clone() {
      return new DeleteDataSourceDefinitionRequest(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// The field will contain name of the resource requested, for example:
    /// `projects/{project_id}/locations/{location_id}/dataSourceDefinitions/{data_source_id}`
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeleteDataSourceDefinitionRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeleteDataSourceDefinitionRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeleteDataSourceDefinitionRequest other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Represents the request of the GetDataSourceDefinition method.
  /// </summary>
  public sealed partial class GetDataSourceDefinitionRequest : pb::IMessage<GetDataSourceDefinitionRequest> {
    private static readonly pb::MessageParser<GetDataSourceDefinitionRequest> _parser = new pb::MessageParser<GetDataSourceDefinitionRequest>(() => new GetDataSourceDefinitionRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetDataSourceDefinitionRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.BigQuery.DataTransfer.V1.DatasourceReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetDataSourceDefinitionRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetDataSourceDefinitionRequest(GetDataSourceDefinitionRequest other) : this() {
      name_ = other.name_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetDataSourceDefinitionRequest Clone() {
      return new GetDataSourceDefinitionRequest(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// The field will contain name of the resource requested.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetDataSourceDefinitionRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetDataSourceDefinitionRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetDataSourceDefinitionRequest other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Represents the request of the ListDataSourceDefinitions method.
  /// </summary>
  public sealed partial class ListDataSourceDefinitionsRequest : pb::IMessage<ListDataSourceDefinitionsRequest> {
    private static readonly pb::MessageParser<ListDataSourceDefinitionsRequest> _parser = new pb::MessageParser<ListDataSourceDefinitionsRequest>(() => new ListDataSourceDefinitionsRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListDataSourceDefinitionsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.BigQuery.DataTransfer.V1.DatasourceReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListDataSourceDefinitionsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListDataSourceDefinitionsRequest(ListDataSourceDefinitionsRequest other) : this() {
      parent_ = other.parent_;
      pageToken_ = other.pageToken_;
      pageSize_ = other.pageSize_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListDataSourceDefinitionsRequest Clone() {
      return new ListDataSourceDefinitionsRequest(this);
    }

    /// <summary>Field number for the "parent" field.</summary>
    public const int ParentFieldNumber = 1;
    private string parent_ = "";
    /// <summary>
    /// The BigQuery project id for which data sources should be returned.
    /// Must be in the form: `projects/{project_id}/locations/{location_id}`
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Parent {
      get { return parent_; }
      set {
        parent_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "page_token" field.</summary>
    public const int PageTokenFieldNumber = 2;
    private string pageToken_ = "";
    /// <summary>
    /// Pagination token, which can be used to request a specific page
    /// of `ListDataSourceDefinitionsRequest` list results. For multiple-page
    /// results, `ListDataSourceDefinitionsResponse` outputs a `next_page` token,
    /// which can be used as the `page_token` value to request the next page of
    /// the list results.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PageToken {
      get { return pageToken_; }
      set {
        pageToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "page_size" field.</summary>
    public const int PageSizeFieldNumber = 3;
    private int pageSize_;
    /// <summary>
    /// Page size. The default page size is the maximum value of 1000 results.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PageSize {
      get { return pageSize_; }
      set {
        pageSize_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListDataSourceDefinitionsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListDataSourceDefinitionsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Parent != other.Parent) return false;
      if (PageToken != other.PageToken) return false;
      if (PageSize != other.PageSize) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Parent.Length != 0) hash ^= Parent.GetHashCode();
      if (PageToken.Length != 0) hash ^= PageToken.GetHashCode();
      if (PageSize != 0) hash ^= PageSize.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Parent.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Parent);
      }
      if (PageToken.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(PageToken);
      }
      if (PageSize != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(PageSize);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Parent.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Parent);
      }
      if (PageToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PageToken);
      }
      if (PageSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PageSize);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListDataSourceDefinitionsRequest other) {
      if (other == null) {
        return;
      }
      if (other.Parent.Length != 0) {
        Parent = other.Parent;
      }
      if (other.PageToken.Length != 0) {
        PageToken = other.PageToken;
      }
      if (other.PageSize != 0) {
        PageSize = other.PageSize;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Parent = input.ReadString();
            break;
          }
          case 18: {
            PageToken = input.ReadString();
            break;
          }
          case 24: {
            PageSize = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Returns a list of supported data source definitions.
  /// </summary>
  public sealed partial class ListDataSourceDefinitionsResponse : pb::IMessage<ListDataSourceDefinitionsResponse> {
    private static readonly pb::MessageParser<ListDataSourceDefinitionsResponse> _parser = new pb::MessageParser<ListDataSourceDefinitionsResponse>(() => new ListDataSourceDefinitionsResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListDataSourceDefinitionsResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.BigQuery.DataTransfer.V1.DatasourceReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListDataSourceDefinitionsResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListDataSourceDefinitionsResponse(ListDataSourceDefinitionsResponse other) : this() {
      dataSourceDefinitions_ = other.dataSourceDefinitions_.Clone();
      nextPageToken_ = other.nextPageToken_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListDataSourceDefinitionsResponse Clone() {
      return new ListDataSourceDefinitionsResponse(this);
    }

    /// <summary>Field number for the "data_source_definitions" field.</summary>
    public const int DataSourceDefinitionsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Google.Cloud.BigQuery.DataTransfer.V1.DataSourceDefinition> _repeated_dataSourceDefinitions_codec
        = pb::FieldCodec.ForMessage(10, global::Google.Cloud.BigQuery.DataTransfer.V1.DataSourceDefinition.Parser);
    private readonly pbc::RepeatedField<global::Google.Cloud.BigQuery.DataTransfer.V1.DataSourceDefinition> dataSourceDefinitions_ = new pbc::RepeatedField<global::Google.Cloud.BigQuery.DataTransfer.V1.DataSourceDefinition>();
    /// <summary>
    /// List of supported data source definitions.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Cloud.BigQuery.DataTransfer.V1.DataSourceDefinition> DataSourceDefinitions {
      get { return dataSourceDefinitions_; }
    }

    /// <summary>Field number for the "next_page_token" field.</summary>
    public const int NextPageTokenFieldNumber = 2;
    private string nextPageToken_ = "";
    /// <summary>
    /// Output only. The next-pagination token. For multiple-page list results,
    /// this token can be used as the
    /// `ListDataSourceDefinitionsRequest.page_token`
    /// to request the next page of the list results.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NextPageToken {
      get { return nextPageToken_; }
      set {
        nextPageToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListDataSourceDefinitionsResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListDataSourceDefinitionsResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!dataSourceDefinitions_.Equals(other.dataSourceDefinitions_)) return false;
      if (NextPageToken != other.NextPageToken) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= dataSourceDefinitions_.GetHashCode();
      if (NextPageToken.Length != 0) hash ^= NextPageToken.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      dataSourceDefinitions_.WriteTo(output, _repeated_dataSourceDefinitions_codec);
      if (NextPageToken.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(NextPageToken);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += dataSourceDefinitions_.CalculateSize(_repeated_dataSourceDefinitions_codec);
      if (NextPageToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NextPageToken);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListDataSourceDefinitionsResponse other) {
      if (other == null) {
        return;
      }
      dataSourceDefinitions_.Add(other.dataSourceDefinitions_);
      if (other.NextPageToken.Length != 0) {
        NextPageToken = other.NextPageToken;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            dataSourceDefinitions_.AddEntriesFrom(input, _repeated_dataSourceDefinitions_codec);
            break;
          }
          case 18: {
            NextPageToken = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Represents the data source definition.
  /// </summary>
  public sealed partial class DataSourceDefinition : pb::IMessage<DataSourceDefinition> {
    private static readonly pb::MessageParser<DataSourceDefinition> _parser = new pb::MessageParser<DataSourceDefinition>(() => new DataSourceDefinition());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DataSourceDefinition> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.BigQuery.DataTransfer.V1.DatasourceReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataSourceDefinition() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataSourceDefinition(DataSourceDefinition other) : this() {
      name_ = other.name_;
      dataSource_ = other.dataSource_ != null ? other.dataSource_.Clone() : null;
      transferRunPubsubTopic_ = other.transferRunPubsubTopic_;
      runTimeOffset_ = other.runTimeOffset_ != null ? other.runTimeOffset_.Clone() : null;
      supportEmail_ = other.supportEmail_;
      serviceAccount_ = other.serviceAccount_;
      disabled_ = other.disabled_;
      transferConfigPubsubTopic_ = other.transferConfigPubsubTopic_;
      supportedLocationIds_ = other.supportedLocationIds_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataSourceDefinition Clone() {
      return new DataSourceDefinition(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 21;
    private string name_ = "";
    /// <summary>
    /// The resource name of the data source definition.
    /// Data source definition names have the form
    /// `projects/{project_id}/locations/{location}/dataSourceDefinitions/{data_source_id}`.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "data_source" field.</summary>
    public const int DataSourceFieldNumber = 1;
    private global::Google.Cloud.BigQuery.DataTransfer.V1.DataSource dataSource_;
    /// <summary>
    /// Data source metadata.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.BigQuery.DataTransfer.V1.DataSource DataSource {
      get { return dataSource_; }
      set {
        dataSource_ = value;
      }
    }

    /// <summary>Field number for the "transfer_run_pubsub_topic" field.</summary>
    public const int TransferRunPubsubTopicFieldNumber = 13;
    private string transferRunPubsubTopic_ = "";
    /// <summary>
    /// The Pub/Sub topic to be used for broadcasting a message when a transfer run
    /// is created. Both this topic and transfer_config_pubsub_topic can be
    /// set to a custom topic. By default, both topics are auto-generated if none
    /// of them is provided when creating the definition. However, if one topic is
    /// manually set, the other topic has to be manually set as well. The only
    /// difference is that transfer_run_pubsub_topic must be a non-empty Pub/Sub
    /// topic, but transfer_config_pubsub_topic can be set to empty. The comments
    /// about "{location}" for transfer_config_pubsub_topic apply here too.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TransferRunPubsubTopic {
      get { return transferRunPubsubTopic_; }
      set {
        transferRunPubsubTopic_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "run_time_offset" field.</summary>
    public const int RunTimeOffsetFieldNumber = 16;
    private global::Google.Protobuf.WellKnownTypes.Duration runTimeOffset_;
    /// <summary>
    /// Duration which should be added to schedule_time to calculate
    /// run_time when job is scheduled. Only applicable for automatically
    /// scheduled transfer runs. Used to start a run early on a data source that
    /// supports continuous data refresh to compensate for unknown timezone
    /// offsets. Use a negative number to start a run late for data sources not
    /// supporting continuous data refresh.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Duration RunTimeOffset {
      get { return runTimeOffset_; }
      set {
        runTimeOffset_ = value;
      }
    }

    /// <summary>Field number for the "support_email" field.</summary>
    public const int SupportEmailFieldNumber = 22;
    private string supportEmail_ = "";
    /// <summary>
    /// Support e-mail address of the OAuth client's Brand, which contains the
    /// consent screen data.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SupportEmail {
      get { return supportEmail_; }
      set {
        supportEmail_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "service_account" field.</summary>
    public const int ServiceAccountFieldNumber = 2;
    private string serviceAccount_ = "";
    /// <summary>
    /// When service account is specified, BigQuery will share created dataset
    /// with the given service account. Also, this service account will be
    /// eligible to perform status updates and message logging for data transfer
    /// runs for the corresponding data_source_id.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ServiceAccount {
      get { return serviceAccount_; }
      set {
        serviceAccount_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "disabled" field.</summary>
    public const int DisabledFieldNumber = 5;
    private bool disabled_;
    /// <summary>
    /// Is data source disabled? If true, data_source is not visible.
    /// API will also stop returning any data transfer configs and/or runs
    /// associated with the data source. This setting has higher priority
    /// than whitelisted_project_ids.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Disabled {
      get { return disabled_; }
      set {
        disabled_ = value;
      }
    }

    /// <summary>Field number for the "transfer_config_pubsub_topic" field.</summary>
    public const int TransferConfigPubsubTopicFieldNumber = 12;
    private string transferConfigPubsubTopic_ = "";
    /// <summary>
    /// The Pub/Sub topic to use for broadcasting a message for transfer config. If
    /// empty, a message will not be broadcasted. Both this topic and
    /// transfer_run_pubsub_topic are auto-generated if none of them is provided
    /// when creating the definition. It is recommended to provide
    /// transfer_config_pubsub_topic if a user-owned transfer_run_pubsub_topic is
    /// provided. Otherwise, it will be set to empty. If "{location}" is found in
    /// the value, then that means, data source wants to handle message separately
    /// for datasets in different regions. We will replace {location} with the
    /// actual dataset location, as the actual topic name. For example,
    /// projects/connector/topics/scheduler-{location} could become
    /// projects/connector/topics/scheduler-us. If "{location}" is not found, then
    /// we will use the input value as topic name.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TransferConfigPubsubTopic {
      get { return transferConfigPubsubTopic_; }
      set {
        transferConfigPubsubTopic_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "supported_location_ids" field.</summary>
    public const int SupportedLocationIdsFieldNumber = 23;
    private static readonly pb::FieldCodec<string> _repeated_supportedLocationIds_codec
        = pb::FieldCodec.ForString(186);
    private readonly pbc::RepeatedField<string> supportedLocationIds_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// Supported location_ids used for deciding in which locations Pub/Sub topics
    /// need to be created. If custom Pub/Sub topics are used and they contains
    /// '{location}', the location_ids will be used for validating the topics by
    /// replacing the '{location}' with the individual location in the list. The
    /// valid values are the "location_id" field of the response of `GET
    /// https://bigquerydatatransfer.googleapis.com/v1/{name=projects/*}/locations`
    /// In addition, if the data source needs to support all available regions,
    /// supported_location_ids can be set to "global" (a single string element).
    /// When "global" is specified:
    /// 1) the data source implementation is supposed to stage the data in proper
    /// region of the destination dataset;
    /// 2) Data source developer should be aware of the implications (e.g., network
    /// traffic latency, potential charge associated with cross-region traffic,
    /// etc.) of supporting the "global" region;
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> SupportedLocationIds {
      get { return supportedLocationIds_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DataSourceDefinition);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DataSourceDefinition other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (!object.Equals(DataSource, other.DataSource)) return false;
      if (TransferRunPubsubTopic != other.TransferRunPubsubTopic) return false;
      if (!object.Equals(RunTimeOffset, other.RunTimeOffset)) return false;
      if (SupportEmail != other.SupportEmail) return false;
      if (ServiceAccount != other.ServiceAccount) return false;
      if (Disabled != other.Disabled) return false;
      if (TransferConfigPubsubTopic != other.TransferConfigPubsubTopic) return false;
      if(!supportedLocationIds_.Equals(other.supportedLocationIds_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (dataSource_ != null) hash ^= DataSource.GetHashCode();
      if (TransferRunPubsubTopic.Length != 0) hash ^= TransferRunPubsubTopic.GetHashCode();
      if (runTimeOffset_ != null) hash ^= RunTimeOffset.GetHashCode();
      if (SupportEmail.Length != 0) hash ^= SupportEmail.GetHashCode();
      if (ServiceAccount.Length != 0) hash ^= ServiceAccount.GetHashCode();
      if (Disabled != false) hash ^= Disabled.GetHashCode();
      if (TransferConfigPubsubTopic.Length != 0) hash ^= TransferConfigPubsubTopic.GetHashCode();
      hash ^= supportedLocationIds_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (dataSource_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(DataSource);
      }
      if (ServiceAccount.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ServiceAccount);
      }
      if (Disabled != false) {
        output.WriteRawTag(40);
        output.WriteBool(Disabled);
      }
      if (TransferConfigPubsubTopic.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(TransferConfigPubsubTopic);
      }
      if (TransferRunPubsubTopic.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(TransferRunPubsubTopic);
      }
      if (runTimeOffset_ != null) {
        output.WriteRawTag(130, 1);
        output.WriteMessage(RunTimeOffset);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(170, 1);
        output.WriteString(Name);
      }
      if (SupportEmail.Length != 0) {
        output.WriteRawTag(178, 1);
        output.WriteString(SupportEmail);
      }
      supportedLocationIds_.WriteTo(output, _repeated_supportedLocationIds_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (dataSource_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DataSource);
      }
      if (TransferRunPubsubTopic.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TransferRunPubsubTopic);
      }
      if (runTimeOffset_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(RunTimeOffset);
      }
      if (SupportEmail.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(SupportEmail);
      }
      if (ServiceAccount.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ServiceAccount);
      }
      if (Disabled != false) {
        size += 1 + 1;
      }
      if (TransferConfigPubsubTopic.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TransferConfigPubsubTopic);
      }
      size += supportedLocationIds_.CalculateSize(_repeated_supportedLocationIds_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DataSourceDefinition other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.dataSource_ != null) {
        if (dataSource_ == null) {
          DataSource = new global::Google.Cloud.BigQuery.DataTransfer.V1.DataSource();
        }
        DataSource.MergeFrom(other.DataSource);
      }
      if (other.TransferRunPubsubTopic.Length != 0) {
        TransferRunPubsubTopic = other.TransferRunPubsubTopic;
      }
      if (other.runTimeOffset_ != null) {
        if (runTimeOffset_ == null) {
          RunTimeOffset = new global::Google.Protobuf.WellKnownTypes.Duration();
        }
        RunTimeOffset.MergeFrom(other.RunTimeOffset);
      }
      if (other.SupportEmail.Length != 0) {
        SupportEmail = other.SupportEmail;
      }
      if (other.ServiceAccount.Length != 0) {
        ServiceAccount = other.ServiceAccount;
      }
      if (other.Disabled != false) {
        Disabled = other.Disabled;
      }
      if (other.TransferConfigPubsubTopic.Length != 0) {
        TransferConfigPubsubTopic = other.TransferConfigPubsubTopic;
      }
      supportedLocationIds_.Add(other.supportedLocationIds_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (dataSource_ == null) {
              DataSource = new global::Google.Cloud.BigQuery.DataTransfer.V1.DataSource();
            }
            input.ReadMessage(DataSource);
            break;
          }
          case 18: {
            ServiceAccount = input.ReadString();
            break;
          }
          case 40: {
            Disabled = input.ReadBool();
            break;
          }
          case 98: {
            TransferConfigPubsubTopic = input.ReadString();
            break;
          }
          case 106: {
            TransferRunPubsubTopic = input.ReadString();
            break;
          }
          case 130: {
            if (runTimeOffset_ == null) {
              RunTimeOffset = new global::Google.Protobuf.WellKnownTypes.Duration();
            }
            input.ReadMessage(RunTimeOffset);
            break;
          }
          case 170: {
            Name = input.ReadString();
            break;
          }
          case 178: {
            SupportEmail = input.ReadString();
            break;
          }
          case 186: {
            supportedLocationIds_.AddEntriesFrom(input, _repeated_supportedLocationIds_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
