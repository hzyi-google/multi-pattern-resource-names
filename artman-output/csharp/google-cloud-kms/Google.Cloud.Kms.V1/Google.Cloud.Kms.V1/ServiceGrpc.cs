// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: google/cloud/kms/v1/service.proto
// </auto-generated>
// Original file comments:
// Copyright 2019 Google LLC.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Google.Cloud.Kms.V1 {
  /// <summary>
  /// Google Cloud Key Management Service
  ///
  /// Manages cryptographic keys and operations using those keys. Implements a REST
  /// model with the following objects:
  ///
  /// * [KeyRing][google.cloud.kms.v1.KeyRing]
  /// * [CryptoKey][google.cloud.kms.v1.CryptoKey]
  /// * [CryptoKeyVersion][google.cloud.kms.v1.CryptoKeyVersion]
  /// * [ImportJob][google.cloud.kms.v1.ImportJob]
  ///
  /// If you are using manual gRPC libraries, see
  /// [Using gRPC with Cloud KMS](https://cloud.google.com/kms/docs/grpc).
  /// </summary>
  public static partial class KeyManagementService
  {
    static readonly string __ServiceName = "google.cloud.kms.v1.KeyManagementService";

    static readonly grpc::Marshaller<global::Google.Cloud.Kms.V1.ListKeyRingsRequest> __Marshaller_google_cloud_kms_v1_ListKeyRingsRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Kms.V1.ListKeyRingsRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Kms.V1.ListKeyRingsResponse> __Marshaller_google_cloud_kms_v1_ListKeyRingsResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Kms.V1.ListKeyRingsResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Kms.V1.ListCryptoKeysRequest> __Marshaller_google_cloud_kms_v1_ListCryptoKeysRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Kms.V1.ListCryptoKeysRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Kms.V1.ListCryptoKeysResponse> __Marshaller_google_cloud_kms_v1_ListCryptoKeysResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Kms.V1.ListCryptoKeysResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Kms.V1.ListCryptoKeyVersionsRequest> __Marshaller_google_cloud_kms_v1_ListCryptoKeyVersionsRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Kms.V1.ListCryptoKeyVersionsRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Kms.V1.ListCryptoKeyVersionsResponse> __Marshaller_google_cloud_kms_v1_ListCryptoKeyVersionsResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Kms.V1.ListCryptoKeyVersionsResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Kms.V1.ListImportJobsRequest> __Marshaller_google_cloud_kms_v1_ListImportJobsRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Kms.V1.ListImportJobsRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Kms.V1.ListImportJobsResponse> __Marshaller_google_cloud_kms_v1_ListImportJobsResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Kms.V1.ListImportJobsResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Kms.V1.GetKeyRingRequest> __Marshaller_google_cloud_kms_v1_GetKeyRingRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Kms.V1.GetKeyRingRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Kms.V1.KeyRing> __Marshaller_google_cloud_kms_v1_KeyRing = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Kms.V1.KeyRing.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Kms.V1.GetCryptoKeyRequest> __Marshaller_google_cloud_kms_v1_GetCryptoKeyRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Kms.V1.GetCryptoKeyRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Kms.V1.CryptoKey> __Marshaller_google_cloud_kms_v1_CryptoKey = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Kms.V1.CryptoKey.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Kms.V1.GetCryptoKeyVersionRequest> __Marshaller_google_cloud_kms_v1_GetCryptoKeyVersionRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Kms.V1.GetCryptoKeyVersionRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Kms.V1.CryptoKeyVersion> __Marshaller_google_cloud_kms_v1_CryptoKeyVersion = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Kms.V1.CryptoKeyVersion.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Kms.V1.GetPublicKeyRequest> __Marshaller_google_cloud_kms_v1_GetPublicKeyRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Kms.V1.GetPublicKeyRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Kms.V1.PublicKey> __Marshaller_google_cloud_kms_v1_PublicKey = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Kms.V1.PublicKey.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Kms.V1.GetImportJobRequest> __Marshaller_google_cloud_kms_v1_GetImportJobRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Kms.V1.GetImportJobRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Kms.V1.ImportJob> __Marshaller_google_cloud_kms_v1_ImportJob = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Kms.V1.ImportJob.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Kms.V1.CreateKeyRingRequest> __Marshaller_google_cloud_kms_v1_CreateKeyRingRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Kms.V1.CreateKeyRingRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Kms.V1.CreateCryptoKeyRequest> __Marshaller_google_cloud_kms_v1_CreateCryptoKeyRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Kms.V1.CreateCryptoKeyRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Kms.V1.CreateCryptoKeyVersionRequest> __Marshaller_google_cloud_kms_v1_CreateCryptoKeyVersionRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Kms.V1.CreateCryptoKeyVersionRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Kms.V1.ImportCryptoKeyVersionRequest> __Marshaller_google_cloud_kms_v1_ImportCryptoKeyVersionRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Kms.V1.ImportCryptoKeyVersionRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Kms.V1.CreateImportJobRequest> __Marshaller_google_cloud_kms_v1_CreateImportJobRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Kms.V1.CreateImportJobRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Kms.V1.UpdateCryptoKeyRequest> __Marshaller_google_cloud_kms_v1_UpdateCryptoKeyRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Kms.V1.UpdateCryptoKeyRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Kms.V1.UpdateCryptoKeyVersionRequest> __Marshaller_google_cloud_kms_v1_UpdateCryptoKeyVersionRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Kms.V1.UpdateCryptoKeyVersionRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Kms.V1.EncryptRequest> __Marshaller_google_cloud_kms_v1_EncryptRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Kms.V1.EncryptRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Kms.V1.EncryptResponse> __Marshaller_google_cloud_kms_v1_EncryptResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Kms.V1.EncryptResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Kms.V1.DecryptRequest> __Marshaller_google_cloud_kms_v1_DecryptRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Kms.V1.DecryptRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Kms.V1.DecryptResponse> __Marshaller_google_cloud_kms_v1_DecryptResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Kms.V1.DecryptResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Kms.V1.AsymmetricSignRequest> __Marshaller_google_cloud_kms_v1_AsymmetricSignRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Kms.V1.AsymmetricSignRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Kms.V1.AsymmetricSignResponse> __Marshaller_google_cloud_kms_v1_AsymmetricSignResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Kms.V1.AsymmetricSignResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Kms.V1.AsymmetricDecryptRequest> __Marshaller_google_cloud_kms_v1_AsymmetricDecryptRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Kms.V1.AsymmetricDecryptRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Kms.V1.AsymmetricDecryptResponse> __Marshaller_google_cloud_kms_v1_AsymmetricDecryptResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Kms.V1.AsymmetricDecryptResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Kms.V1.UpdateCryptoKeyPrimaryVersionRequest> __Marshaller_google_cloud_kms_v1_UpdateCryptoKeyPrimaryVersionRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Kms.V1.UpdateCryptoKeyPrimaryVersionRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Kms.V1.DestroyCryptoKeyVersionRequest> __Marshaller_google_cloud_kms_v1_DestroyCryptoKeyVersionRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Kms.V1.DestroyCryptoKeyVersionRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Kms.V1.RestoreCryptoKeyVersionRequest> __Marshaller_google_cloud_kms_v1_RestoreCryptoKeyVersionRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Kms.V1.RestoreCryptoKeyVersionRequest.Parser.ParseFrom);

    static readonly grpc::Method<global::Google.Cloud.Kms.V1.ListKeyRingsRequest, global::Google.Cloud.Kms.V1.ListKeyRingsResponse> __Method_ListKeyRings = new grpc::Method<global::Google.Cloud.Kms.V1.ListKeyRingsRequest, global::Google.Cloud.Kms.V1.ListKeyRingsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListKeyRings",
        __Marshaller_google_cloud_kms_v1_ListKeyRingsRequest,
        __Marshaller_google_cloud_kms_v1_ListKeyRingsResponse);

    static readonly grpc::Method<global::Google.Cloud.Kms.V1.ListCryptoKeysRequest, global::Google.Cloud.Kms.V1.ListCryptoKeysResponse> __Method_ListCryptoKeys = new grpc::Method<global::Google.Cloud.Kms.V1.ListCryptoKeysRequest, global::Google.Cloud.Kms.V1.ListCryptoKeysResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListCryptoKeys",
        __Marshaller_google_cloud_kms_v1_ListCryptoKeysRequest,
        __Marshaller_google_cloud_kms_v1_ListCryptoKeysResponse);

    static readonly grpc::Method<global::Google.Cloud.Kms.V1.ListCryptoKeyVersionsRequest, global::Google.Cloud.Kms.V1.ListCryptoKeyVersionsResponse> __Method_ListCryptoKeyVersions = new grpc::Method<global::Google.Cloud.Kms.V1.ListCryptoKeyVersionsRequest, global::Google.Cloud.Kms.V1.ListCryptoKeyVersionsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListCryptoKeyVersions",
        __Marshaller_google_cloud_kms_v1_ListCryptoKeyVersionsRequest,
        __Marshaller_google_cloud_kms_v1_ListCryptoKeyVersionsResponse);

    static readonly grpc::Method<global::Google.Cloud.Kms.V1.ListImportJobsRequest, global::Google.Cloud.Kms.V1.ListImportJobsResponse> __Method_ListImportJobs = new grpc::Method<global::Google.Cloud.Kms.V1.ListImportJobsRequest, global::Google.Cloud.Kms.V1.ListImportJobsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListImportJobs",
        __Marshaller_google_cloud_kms_v1_ListImportJobsRequest,
        __Marshaller_google_cloud_kms_v1_ListImportJobsResponse);

    static readonly grpc::Method<global::Google.Cloud.Kms.V1.GetKeyRingRequest, global::Google.Cloud.Kms.V1.KeyRing> __Method_GetKeyRing = new grpc::Method<global::Google.Cloud.Kms.V1.GetKeyRingRequest, global::Google.Cloud.Kms.V1.KeyRing>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetKeyRing",
        __Marshaller_google_cloud_kms_v1_GetKeyRingRequest,
        __Marshaller_google_cloud_kms_v1_KeyRing);

    static readonly grpc::Method<global::Google.Cloud.Kms.V1.GetCryptoKeyRequest, global::Google.Cloud.Kms.V1.CryptoKey> __Method_GetCryptoKey = new grpc::Method<global::Google.Cloud.Kms.V1.GetCryptoKeyRequest, global::Google.Cloud.Kms.V1.CryptoKey>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetCryptoKey",
        __Marshaller_google_cloud_kms_v1_GetCryptoKeyRequest,
        __Marshaller_google_cloud_kms_v1_CryptoKey);

    static readonly grpc::Method<global::Google.Cloud.Kms.V1.GetCryptoKeyVersionRequest, global::Google.Cloud.Kms.V1.CryptoKeyVersion> __Method_GetCryptoKeyVersion = new grpc::Method<global::Google.Cloud.Kms.V1.GetCryptoKeyVersionRequest, global::Google.Cloud.Kms.V1.CryptoKeyVersion>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetCryptoKeyVersion",
        __Marshaller_google_cloud_kms_v1_GetCryptoKeyVersionRequest,
        __Marshaller_google_cloud_kms_v1_CryptoKeyVersion);

    static readonly grpc::Method<global::Google.Cloud.Kms.V1.GetPublicKeyRequest, global::Google.Cloud.Kms.V1.PublicKey> __Method_GetPublicKey = new grpc::Method<global::Google.Cloud.Kms.V1.GetPublicKeyRequest, global::Google.Cloud.Kms.V1.PublicKey>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetPublicKey",
        __Marshaller_google_cloud_kms_v1_GetPublicKeyRequest,
        __Marshaller_google_cloud_kms_v1_PublicKey);

    static readonly grpc::Method<global::Google.Cloud.Kms.V1.GetImportJobRequest, global::Google.Cloud.Kms.V1.ImportJob> __Method_GetImportJob = new grpc::Method<global::Google.Cloud.Kms.V1.GetImportJobRequest, global::Google.Cloud.Kms.V1.ImportJob>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetImportJob",
        __Marshaller_google_cloud_kms_v1_GetImportJobRequest,
        __Marshaller_google_cloud_kms_v1_ImportJob);

    static readonly grpc::Method<global::Google.Cloud.Kms.V1.CreateKeyRingRequest, global::Google.Cloud.Kms.V1.KeyRing> __Method_CreateKeyRing = new grpc::Method<global::Google.Cloud.Kms.V1.CreateKeyRingRequest, global::Google.Cloud.Kms.V1.KeyRing>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateKeyRing",
        __Marshaller_google_cloud_kms_v1_CreateKeyRingRequest,
        __Marshaller_google_cloud_kms_v1_KeyRing);

    static readonly grpc::Method<global::Google.Cloud.Kms.V1.CreateCryptoKeyRequest, global::Google.Cloud.Kms.V1.CryptoKey> __Method_CreateCryptoKey = new grpc::Method<global::Google.Cloud.Kms.V1.CreateCryptoKeyRequest, global::Google.Cloud.Kms.V1.CryptoKey>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateCryptoKey",
        __Marshaller_google_cloud_kms_v1_CreateCryptoKeyRequest,
        __Marshaller_google_cloud_kms_v1_CryptoKey);

    static readonly grpc::Method<global::Google.Cloud.Kms.V1.CreateCryptoKeyVersionRequest, global::Google.Cloud.Kms.V1.CryptoKeyVersion> __Method_CreateCryptoKeyVersion = new grpc::Method<global::Google.Cloud.Kms.V1.CreateCryptoKeyVersionRequest, global::Google.Cloud.Kms.V1.CryptoKeyVersion>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateCryptoKeyVersion",
        __Marshaller_google_cloud_kms_v1_CreateCryptoKeyVersionRequest,
        __Marshaller_google_cloud_kms_v1_CryptoKeyVersion);

    static readonly grpc::Method<global::Google.Cloud.Kms.V1.ImportCryptoKeyVersionRequest, global::Google.Cloud.Kms.V1.CryptoKeyVersion> __Method_ImportCryptoKeyVersion = new grpc::Method<global::Google.Cloud.Kms.V1.ImportCryptoKeyVersionRequest, global::Google.Cloud.Kms.V1.CryptoKeyVersion>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ImportCryptoKeyVersion",
        __Marshaller_google_cloud_kms_v1_ImportCryptoKeyVersionRequest,
        __Marshaller_google_cloud_kms_v1_CryptoKeyVersion);

    static readonly grpc::Method<global::Google.Cloud.Kms.V1.CreateImportJobRequest, global::Google.Cloud.Kms.V1.ImportJob> __Method_CreateImportJob = new grpc::Method<global::Google.Cloud.Kms.V1.CreateImportJobRequest, global::Google.Cloud.Kms.V1.ImportJob>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateImportJob",
        __Marshaller_google_cloud_kms_v1_CreateImportJobRequest,
        __Marshaller_google_cloud_kms_v1_ImportJob);

    static readonly grpc::Method<global::Google.Cloud.Kms.V1.UpdateCryptoKeyRequest, global::Google.Cloud.Kms.V1.CryptoKey> __Method_UpdateCryptoKey = new grpc::Method<global::Google.Cloud.Kms.V1.UpdateCryptoKeyRequest, global::Google.Cloud.Kms.V1.CryptoKey>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateCryptoKey",
        __Marshaller_google_cloud_kms_v1_UpdateCryptoKeyRequest,
        __Marshaller_google_cloud_kms_v1_CryptoKey);

    static readonly grpc::Method<global::Google.Cloud.Kms.V1.UpdateCryptoKeyVersionRequest, global::Google.Cloud.Kms.V1.CryptoKeyVersion> __Method_UpdateCryptoKeyVersion = new grpc::Method<global::Google.Cloud.Kms.V1.UpdateCryptoKeyVersionRequest, global::Google.Cloud.Kms.V1.CryptoKeyVersion>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateCryptoKeyVersion",
        __Marshaller_google_cloud_kms_v1_UpdateCryptoKeyVersionRequest,
        __Marshaller_google_cloud_kms_v1_CryptoKeyVersion);

    static readonly grpc::Method<global::Google.Cloud.Kms.V1.EncryptRequest, global::Google.Cloud.Kms.V1.EncryptResponse> __Method_Encrypt = new grpc::Method<global::Google.Cloud.Kms.V1.EncryptRequest, global::Google.Cloud.Kms.V1.EncryptResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Encrypt",
        __Marshaller_google_cloud_kms_v1_EncryptRequest,
        __Marshaller_google_cloud_kms_v1_EncryptResponse);

    static readonly grpc::Method<global::Google.Cloud.Kms.V1.DecryptRequest, global::Google.Cloud.Kms.V1.DecryptResponse> __Method_Decrypt = new grpc::Method<global::Google.Cloud.Kms.V1.DecryptRequest, global::Google.Cloud.Kms.V1.DecryptResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Decrypt",
        __Marshaller_google_cloud_kms_v1_DecryptRequest,
        __Marshaller_google_cloud_kms_v1_DecryptResponse);

    static readonly grpc::Method<global::Google.Cloud.Kms.V1.AsymmetricSignRequest, global::Google.Cloud.Kms.V1.AsymmetricSignResponse> __Method_AsymmetricSign = new grpc::Method<global::Google.Cloud.Kms.V1.AsymmetricSignRequest, global::Google.Cloud.Kms.V1.AsymmetricSignResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AsymmetricSign",
        __Marshaller_google_cloud_kms_v1_AsymmetricSignRequest,
        __Marshaller_google_cloud_kms_v1_AsymmetricSignResponse);

    static readonly grpc::Method<global::Google.Cloud.Kms.V1.AsymmetricDecryptRequest, global::Google.Cloud.Kms.V1.AsymmetricDecryptResponse> __Method_AsymmetricDecrypt = new grpc::Method<global::Google.Cloud.Kms.V1.AsymmetricDecryptRequest, global::Google.Cloud.Kms.V1.AsymmetricDecryptResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AsymmetricDecrypt",
        __Marshaller_google_cloud_kms_v1_AsymmetricDecryptRequest,
        __Marshaller_google_cloud_kms_v1_AsymmetricDecryptResponse);

    static readonly grpc::Method<global::Google.Cloud.Kms.V1.UpdateCryptoKeyPrimaryVersionRequest, global::Google.Cloud.Kms.V1.CryptoKey> __Method_UpdateCryptoKeyPrimaryVersion = new grpc::Method<global::Google.Cloud.Kms.V1.UpdateCryptoKeyPrimaryVersionRequest, global::Google.Cloud.Kms.V1.CryptoKey>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateCryptoKeyPrimaryVersion",
        __Marshaller_google_cloud_kms_v1_UpdateCryptoKeyPrimaryVersionRequest,
        __Marshaller_google_cloud_kms_v1_CryptoKey);

    static readonly grpc::Method<global::Google.Cloud.Kms.V1.DestroyCryptoKeyVersionRequest, global::Google.Cloud.Kms.V1.CryptoKeyVersion> __Method_DestroyCryptoKeyVersion = new grpc::Method<global::Google.Cloud.Kms.V1.DestroyCryptoKeyVersionRequest, global::Google.Cloud.Kms.V1.CryptoKeyVersion>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DestroyCryptoKeyVersion",
        __Marshaller_google_cloud_kms_v1_DestroyCryptoKeyVersionRequest,
        __Marshaller_google_cloud_kms_v1_CryptoKeyVersion);

    static readonly grpc::Method<global::Google.Cloud.Kms.V1.RestoreCryptoKeyVersionRequest, global::Google.Cloud.Kms.V1.CryptoKeyVersion> __Method_RestoreCryptoKeyVersion = new grpc::Method<global::Google.Cloud.Kms.V1.RestoreCryptoKeyVersionRequest, global::Google.Cloud.Kms.V1.CryptoKeyVersion>(
        grpc::MethodType.Unary,
        __ServiceName,
        "RestoreCryptoKeyVersion",
        __Marshaller_google_cloud_kms_v1_RestoreCryptoKeyVersionRequest,
        __Marshaller_google_cloud_kms_v1_CryptoKeyVersion);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Google.Cloud.Kms.V1.ServiceReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of KeyManagementService</summary>
    public abstract partial class KeyManagementServiceBase
    {
      /// <summary>
      /// Lists [KeyRings][google.cloud.kms.v1.KeyRing].
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Kms.V1.ListKeyRingsResponse> ListKeyRings(global::Google.Cloud.Kms.V1.ListKeyRingsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Lists [CryptoKeys][google.cloud.kms.v1.CryptoKey].
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Kms.V1.ListCryptoKeysResponse> ListCryptoKeys(global::Google.Cloud.Kms.V1.ListCryptoKeysRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Lists [CryptoKeyVersions][google.cloud.kms.v1.CryptoKeyVersion].
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Kms.V1.ListCryptoKeyVersionsResponse> ListCryptoKeyVersions(global::Google.Cloud.Kms.V1.ListCryptoKeyVersionsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Lists [ImportJobs][google.cloud.kms.v1.ImportJob].
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Kms.V1.ListImportJobsResponse> ListImportJobs(global::Google.Cloud.Kms.V1.ListImportJobsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Returns metadata for a given [KeyRing][google.cloud.kms.v1.KeyRing].
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Kms.V1.KeyRing> GetKeyRing(global::Google.Cloud.Kms.V1.GetKeyRingRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Returns metadata for a given [CryptoKey][google.cloud.kms.v1.CryptoKey], as well as its
      /// [primary][google.cloud.kms.v1.CryptoKey.primary] [CryptoKeyVersion][google.cloud.kms.v1.CryptoKeyVersion].
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Kms.V1.CryptoKey> GetCryptoKey(global::Google.Cloud.Kms.V1.GetCryptoKeyRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Returns metadata for a given [CryptoKeyVersion][google.cloud.kms.v1.CryptoKeyVersion].
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Kms.V1.CryptoKeyVersion> GetCryptoKeyVersion(global::Google.Cloud.Kms.V1.GetCryptoKeyVersionRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Returns the public key for the given [CryptoKeyVersion][google.cloud.kms.v1.CryptoKeyVersion]. The
      /// [CryptoKey.purpose][google.cloud.kms.v1.CryptoKey.purpose] must be
      /// [ASYMMETRIC_SIGN][google.cloud.kms.v1.CryptoKey.CryptoKeyPurpose.ASYMMETRIC_SIGN] or
      /// [ASYMMETRIC_DECRYPT][google.cloud.kms.v1.CryptoKey.CryptoKeyPurpose.ASYMMETRIC_DECRYPT].
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Kms.V1.PublicKey> GetPublicKey(global::Google.Cloud.Kms.V1.GetPublicKeyRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Returns metadata for a given [ImportJob][google.cloud.kms.v1.ImportJob].
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Kms.V1.ImportJob> GetImportJob(global::Google.Cloud.Kms.V1.GetImportJobRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Create a new [KeyRing][google.cloud.kms.v1.KeyRing] in a given Project and Location.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Kms.V1.KeyRing> CreateKeyRing(global::Google.Cloud.Kms.V1.CreateKeyRingRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Create a new [CryptoKey][google.cloud.kms.v1.CryptoKey] within a [KeyRing][google.cloud.kms.v1.KeyRing].
      ///
      /// [CryptoKey.purpose][google.cloud.kms.v1.CryptoKey.purpose] and
      /// [CryptoKey.version_template.algorithm][google.cloud.kms.v1.CryptoKeyVersionTemplate.algorithm]
      /// are required.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Kms.V1.CryptoKey> CreateCryptoKey(global::Google.Cloud.Kms.V1.CreateCryptoKeyRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Create a new [CryptoKeyVersion][google.cloud.kms.v1.CryptoKeyVersion] in a [CryptoKey][google.cloud.kms.v1.CryptoKey].
      ///
      /// The server will assign the next sequential id. If unset,
      /// [state][google.cloud.kms.v1.CryptoKeyVersion.state] will be set to
      /// [ENABLED][google.cloud.kms.v1.CryptoKeyVersion.CryptoKeyVersionState.ENABLED].
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Kms.V1.CryptoKeyVersion> CreateCryptoKeyVersion(global::Google.Cloud.Kms.V1.CreateCryptoKeyVersionRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Imports a new [CryptoKeyVersion][google.cloud.kms.v1.CryptoKeyVersion] into an existing [CryptoKey][google.cloud.kms.v1.CryptoKey] using the
      /// wrapped key material provided in the request.
      ///
      /// The version ID will be assigned the next sequential id within the
      /// [CryptoKey][google.cloud.kms.v1.CryptoKey].
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Kms.V1.CryptoKeyVersion> ImportCryptoKeyVersion(global::Google.Cloud.Kms.V1.ImportCryptoKeyVersionRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Create a new [ImportJob][google.cloud.kms.v1.ImportJob] within a [KeyRing][google.cloud.kms.v1.KeyRing].
      ///
      /// [ImportJob.import_method][google.cloud.kms.v1.ImportJob.import_method] is required.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Kms.V1.ImportJob> CreateImportJob(global::Google.Cloud.Kms.V1.CreateImportJobRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Update a [CryptoKey][google.cloud.kms.v1.CryptoKey].
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Kms.V1.CryptoKey> UpdateCryptoKey(global::Google.Cloud.Kms.V1.UpdateCryptoKeyRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Update a [CryptoKeyVersion][google.cloud.kms.v1.CryptoKeyVersion]'s metadata.
      ///
      /// [state][google.cloud.kms.v1.CryptoKeyVersion.state] may be changed between
      /// [ENABLED][google.cloud.kms.v1.CryptoKeyVersion.CryptoKeyVersionState.ENABLED] and
      /// [DISABLED][google.cloud.kms.v1.CryptoKeyVersion.CryptoKeyVersionState.DISABLED] using this
      /// method. See [DestroyCryptoKeyVersion][google.cloud.kms.v1.KeyManagementService.DestroyCryptoKeyVersion] and [RestoreCryptoKeyVersion][google.cloud.kms.v1.KeyManagementService.RestoreCryptoKeyVersion] to
      /// move between other states.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Kms.V1.CryptoKeyVersion> UpdateCryptoKeyVersion(global::Google.Cloud.Kms.V1.UpdateCryptoKeyVersionRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Encrypts data, so that it can only be recovered by a call to [Decrypt][google.cloud.kms.v1.KeyManagementService.Decrypt].
      /// The [CryptoKey.purpose][google.cloud.kms.v1.CryptoKey.purpose] must be
      /// [ENCRYPT_DECRYPT][google.cloud.kms.v1.CryptoKey.CryptoKeyPurpose.ENCRYPT_DECRYPT].
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Kms.V1.EncryptResponse> Encrypt(global::Google.Cloud.Kms.V1.EncryptRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Decrypts data that was protected by [Encrypt][google.cloud.kms.v1.KeyManagementService.Encrypt]. The [CryptoKey.purpose][google.cloud.kms.v1.CryptoKey.purpose]
      /// must be [ENCRYPT_DECRYPT][google.cloud.kms.v1.CryptoKey.CryptoKeyPurpose.ENCRYPT_DECRYPT].
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Kms.V1.DecryptResponse> Decrypt(global::Google.Cloud.Kms.V1.DecryptRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Signs data using a [CryptoKeyVersion][google.cloud.kms.v1.CryptoKeyVersion] with [CryptoKey.purpose][google.cloud.kms.v1.CryptoKey.purpose]
      /// ASYMMETRIC_SIGN, producing a signature that can be verified with the public
      /// key retrieved from [GetPublicKey][google.cloud.kms.v1.KeyManagementService.GetPublicKey].
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Kms.V1.AsymmetricSignResponse> AsymmetricSign(global::Google.Cloud.Kms.V1.AsymmetricSignRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Decrypts data that was encrypted with a public key retrieved from
      /// [GetPublicKey][google.cloud.kms.v1.KeyManagementService.GetPublicKey] corresponding to a [CryptoKeyVersion][google.cloud.kms.v1.CryptoKeyVersion] with
      /// [CryptoKey.purpose][google.cloud.kms.v1.CryptoKey.purpose] ASYMMETRIC_DECRYPT.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Kms.V1.AsymmetricDecryptResponse> AsymmetricDecrypt(global::Google.Cloud.Kms.V1.AsymmetricDecryptRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Update the version of a [CryptoKey][google.cloud.kms.v1.CryptoKey] that will be used in [Encrypt][google.cloud.kms.v1.KeyManagementService.Encrypt].
      ///
      /// Returns an error if called on an asymmetric key.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Kms.V1.CryptoKey> UpdateCryptoKeyPrimaryVersion(global::Google.Cloud.Kms.V1.UpdateCryptoKeyPrimaryVersionRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Schedule a [CryptoKeyVersion][google.cloud.kms.v1.CryptoKeyVersion] for destruction.
      ///
      /// Upon calling this method, [CryptoKeyVersion.state][google.cloud.kms.v1.CryptoKeyVersion.state] will be set to
      /// [DESTROY_SCHEDULED][google.cloud.kms.v1.CryptoKeyVersion.CryptoKeyVersionState.DESTROY_SCHEDULED]
      /// and [destroy_time][google.cloud.kms.v1.CryptoKeyVersion.destroy_time] will be set to a time 24
      /// hours in the future, at which point the [state][google.cloud.kms.v1.CryptoKeyVersion.state]
      /// will be changed to
      /// [DESTROYED][google.cloud.kms.v1.CryptoKeyVersion.CryptoKeyVersionState.DESTROYED], and the key
      /// material will be irrevocably destroyed.
      ///
      /// Before the [destroy_time][google.cloud.kms.v1.CryptoKeyVersion.destroy_time] is reached,
      /// [RestoreCryptoKeyVersion][google.cloud.kms.v1.KeyManagementService.RestoreCryptoKeyVersion] may be called to reverse the process.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Kms.V1.CryptoKeyVersion> DestroyCryptoKeyVersion(global::Google.Cloud.Kms.V1.DestroyCryptoKeyVersionRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Restore a [CryptoKeyVersion][google.cloud.kms.v1.CryptoKeyVersion] in the
      /// [DESTROY_SCHEDULED][google.cloud.kms.v1.CryptoKeyVersion.CryptoKeyVersionState.DESTROY_SCHEDULED]
      /// state.
      ///
      /// Upon restoration of the CryptoKeyVersion, [state][google.cloud.kms.v1.CryptoKeyVersion.state]
      /// will be set to [DISABLED][google.cloud.kms.v1.CryptoKeyVersion.CryptoKeyVersionState.DISABLED],
      /// and [destroy_time][google.cloud.kms.v1.CryptoKeyVersion.destroy_time] will be cleared.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Kms.V1.CryptoKeyVersion> RestoreCryptoKeyVersion(global::Google.Cloud.Kms.V1.RestoreCryptoKeyVersionRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for KeyManagementService</summary>
    public partial class KeyManagementServiceClient : grpc::ClientBase<KeyManagementServiceClient>
    {
      /// <summary>Creates a new client for KeyManagementService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public KeyManagementServiceClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for KeyManagementService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public KeyManagementServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected KeyManagementServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected KeyManagementServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Lists [KeyRings][google.cloud.kms.v1.KeyRing].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Kms.V1.ListKeyRingsResponse ListKeyRings(global::Google.Cloud.Kms.V1.ListKeyRingsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListKeyRings(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists [KeyRings][google.cloud.kms.v1.KeyRing].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Kms.V1.ListKeyRingsResponse ListKeyRings(global::Google.Cloud.Kms.V1.ListKeyRingsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListKeyRings, null, options, request);
      }
      /// <summary>
      /// Lists [KeyRings][google.cloud.kms.v1.KeyRing].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Kms.V1.ListKeyRingsResponse> ListKeyRingsAsync(global::Google.Cloud.Kms.V1.ListKeyRingsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListKeyRingsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists [KeyRings][google.cloud.kms.v1.KeyRing].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Kms.V1.ListKeyRingsResponse> ListKeyRingsAsync(global::Google.Cloud.Kms.V1.ListKeyRingsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListKeyRings, null, options, request);
      }
      /// <summary>
      /// Lists [CryptoKeys][google.cloud.kms.v1.CryptoKey].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Kms.V1.ListCryptoKeysResponse ListCryptoKeys(global::Google.Cloud.Kms.V1.ListCryptoKeysRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListCryptoKeys(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists [CryptoKeys][google.cloud.kms.v1.CryptoKey].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Kms.V1.ListCryptoKeysResponse ListCryptoKeys(global::Google.Cloud.Kms.V1.ListCryptoKeysRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListCryptoKeys, null, options, request);
      }
      /// <summary>
      /// Lists [CryptoKeys][google.cloud.kms.v1.CryptoKey].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Kms.V1.ListCryptoKeysResponse> ListCryptoKeysAsync(global::Google.Cloud.Kms.V1.ListCryptoKeysRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListCryptoKeysAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists [CryptoKeys][google.cloud.kms.v1.CryptoKey].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Kms.V1.ListCryptoKeysResponse> ListCryptoKeysAsync(global::Google.Cloud.Kms.V1.ListCryptoKeysRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListCryptoKeys, null, options, request);
      }
      /// <summary>
      /// Lists [CryptoKeyVersions][google.cloud.kms.v1.CryptoKeyVersion].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Kms.V1.ListCryptoKeyVersionsResponse ListCryptoKeyVersions(global::Google.Cloud.Kms.V1.ListCryptoKeyVersionsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListCryptoKeyVersions(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists [CryptoKeyVersions][google.cloud.kms.v1.CryptoKeyVersion].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Kms.V1.ListCryptoKeyVersionsResponse ListCryptoKeyVersions(global::Google.Cloud.Kms.V1.ListCryptoKeyVersionsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListCryptoKeyVersions, null, options, request);
      }
      /// <summary>
      /// Lists [CryptoKeyVersions][google.cloud.kms.v1.CryptoKeyVersion].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Kms.V1.ListCryptoKeyVersionsResponse> ListCryptoKeyVersionsAsync(global::Google.Cloud.Kms.V1.ListCryptoKeyVersionsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListCryptoKeyVersionsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists [CryptoKeyVersions][google.cloud.kms.v1.CryptoKeyVersion].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Kms.V1.ListCryptoKeyVersionsResponse> ListCryptoKeyVersionsAsync(global::Google.Cloud.Kms.V1.ListCryptoKeyVersionsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListCryptoKeyVersions, null, options, request);
      }
      /// <summary>
      /// Lists [ImportJobs][google.cloud.kms.v1.ImportJob].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Kms.V1.ListImportJobsResponse ListImportJobs(global::Google.Cloud.Kms.V1.ListImportJobsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListImportJobs(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists [ImportJobs][google.cloud.kms.v1.ImportJob].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Kms.V1.ListImportJobsResponse ListImportJobs(global::Google.Cloud.Kms.V1.ListImportJobsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListImportJobs, null, options, request);
      }
      /// <summary>
      /// Lists [ImportJobs][google.cloud.kms.v1.ImportJob].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Kms.V1.ListImportJobsResponse> ListImportJobsAsync(global::Google.Cloud.Kms.V1.ListImportJobsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListImportJobsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists [ImportJobs][google.cloud.kms.v1.ImportJob].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Kms.V1.ListImportJobsResponse> ListImportJobsAsync(global::Google.Cloud.Kms.V1.ListImportJobsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListImportJobs, null, options, request);
      }
      /// <summary>
      /// Returns metadata for a given [KeyRing][google.cloud.kms.v1.KeyRing].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Kms.V1.KeyRing GetKeyRing(global::Google.Cloud.Kms.V1.GetKeyRingRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetKeyRing(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns metadata for a given [KeyRing][google.cloud.kms.v1.KeyRing].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Kms.V1.KeyRing GetKeyRing(global::Google.Cloud.Kms.V1.GetKeyRingRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetKeyRing, null, options, request);
      }
      /// <summary>
      /// Returns metadata for a given [KeyRing][google.cloud.kms.v1.KeyRing].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Kms.V1.KeyRing> GetKeyRingAsync(global::Google.Cloud.Kms.V1.GetKeyRingRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetKeyRingAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns metadata for a given [KeyRing][google.cloud.kms.v1.KeyRing].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Kms.V1.KeyRing> GetKeyRingAsync(global::Google.Cloud.Kms.V1.GetKeyRingRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetKeyRing, null, options, request);
      }
      /// <summary>
      /// Returns metadata for a given [CryptoKey][google.cloud.kms.v1.CryptoKey], as well as its
      /// [primary][google.cloud.kms.v1.CryptoKey.primary] [CryptoKeyVersion][google.cloud.kms.v1.CryptoKeyVersion].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Kms.V1.CryptoKey GetCryptoKey(global::Google.Cloud.Kms.V1.GetCryptoKeyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetCryptoKey(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns metadata for a given [CryptoKey][google.cloud.kms.v1.CryptoKey], as well as its
      /// [primary][google.cloud.kms.v1.CryptoKey.primary] [CryptoKeyVersion][google.cloud.kms.v1.CryptoKeyVersion].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Kms.V1.CryptoKey GetCryptoKey(global::Google.Cloud.Kms.V1.GetCryptoKeyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetCryptoKey, null, options, request);
      }
      /// <summary>
      /// Returns metadata for a given [CryptoKey][google.cloud.kms.v1.CryptoKey], as well as its
      /// [primary][google.cloud.kms.v1.CryptoKey.primary] [CryptoKeyVersion][google.cloud.kms.v1.CryptoKeyVersion].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Kms.V1.CryptoKey> GetCryptoKeyAsync(global::Google.Cloud.Kms.V1.GetCryptoKeyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetCryptoKeyAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns metadata for a given [CryptoKey][google.cloud.kms.v1.CryptoKey], as well as its
      /// [primary][google.cloud.kms.v1.CryptoKey.primary] [CryptoKeyVersion][google.cloud.kms.v1.CryptoKeyVersion].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Kms.V1.CryptoKey> GetCryptoKeyAsync(global::Google.Cloud.Kms.V1.GetCryptoKeyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetCryptoKey, null, options, request);
      }
      /// <summary>
      /// Returns metadata for a given [CryptoKeyVersion][google.cloud.kms.v1.CryptoKeyVersion].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Kms.V1.CryptoKeyVersion GetCryptoKeyVersion(global::Google.Cloud.Kms.V1.GetCryptoKeyVersionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetCryptoKeyVersion(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns metadata for a given [CryptoKeyVersion][google.cloud.kms.v1.CryptoKeyVersion].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Kms.V1.CryptoKeyVersion GetCryptoKeyVersion(global::Google.Cloud.Kms.V1.GetCryptoKeyVersionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetCryptoKeyVersion, null, options, request);
      }
      /// <summary>
      /// Returns metadata for a given [CryptoKeyVersion][google.cloud.kms.v1.CryptoKeyVersion].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Kms.V1.CryptoKeyVersion> GetCryptoKeyVersionAsync(global::Google.Cloud.Kms.V1.GetCryptoKeyVersionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetCryptoKeyVersionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns metadata for a given [CryptoKeyVersion][google.cloud.kms.v1.CryptoKeyVersion].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Kms.V1.CryptoKeyVersion> GetCryptoKeyVersionAsync(global::Google.Cloud.Kms.V1.GetCryptoKeyVersionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetCryptoKeyVersion, null, options, request);
      }
      /// <summary>
      /// Returns the public key for the given [CryptoKeyVersion][google.cloud.kms.v1.CryptoKeyVersion]. The
      /// [CryptoKey.purpose][google.cloud.kms.v1.CryptoKey.purpose] must be
      /// [ASYMMETRIC_SIGN][google.cloud.kms.v1.CryptoKey.CryptoKeyPurpose.ASYMMETRIC_SIGN] or
      /// [ASYMMETRIC_DECRYPT][google.cloud.kms.v1.CryptoKey.CryptoKeyPurpose.ASYMMETRIC_DECRYPT].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Kms.V1.PublicKey GetPublicKey(global::Google.Cloud.Kms.V1.GetPublicKeyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetPublicKey(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns the public key for the given [CryptoKeyVersion][google.cloud.kms.v1.CryptoKeyVersion]. The
      /// [CryptoKey.purpose][google.cloud.kms.v1.CryptoKey.purpose] must be
      /// [ASYMMETRIC_SIGN][google.cloud.kms.v1.CryptoKey.CryptoKeyPurpose.ASYMMETRIC_SIGN] or
      /// [ASYMMETRIC_DECRYPT][google.cloud.kms.v1.CryptoKey.CryptoKeyPurpose.ASYMMETRIC_DECRYPT].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Kms.V1.PublicKey GetPublicKey(global::Google.Cloud.Kms.V1.GetPublicKeyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetPublicKey, null, options, request);
      }
      /// <summary>
      /// Returns the public key for the given [CryptoKeyVersion][google.cloud.kms.v1.CryptoKeyVersion]. The
      /// [CryptoKey.purpose][google.cloud.kms.v1.CryptoKey.purpose] must be
      /// [ASYMMETRIC_SIGN][google.cloud.kms.v1.CryptoKey.CryptoKeyPurpose.ASYMMETRIC_SIGN] or
      /// [ASYMMETRIC_DECRYPT][google.cloud.kms.v1.CryptoKey.CryptoKeyPurpose.ASYMMETRIC_DECRYPT].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Kms.V1.PublicKey> GetPublicKeyAsync(global::Google.Cloud.Kms.V1.GetPublicKeyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetPublicKeyAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns the public key for the given [CryptoKeyVersion][google.cloud.kms.v1.CryptoKeyVersion]. The
      /// [CryptoKey.purpose][google.cloud.kms.v1.CryptoKey.purpose] must be
      /// [ASYMMETRIC_SIGN][google.cloud.kms.v1.CryptoKey.CryptoKeyPurpose.ASYMMETRIC_SIGN] or
      /// [ASYMMETRIC_DECRYPT][google.cloud.kms.v1.CryptoKey.CryptoKeyPurpose.ASYMMETRIC_DECRYPT].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Kms.V1.PublicKey> GetPublicKeyAsync(global::Google.Cloud.Kms.V1.GetPublicKeyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetPublicKey, null, options, request);
      }
      /// <summary>
      /// Returns metadata for a given [ImportJob][google.cloud.kms.v1.ImportJob].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Kms.V1.ImportJob GetImportJob(global::Google.Cloud.Kms.V1.GetImportJobRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetImportJob(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns metadata for a given [ImportJob][google.cloud.kms.v1.ImportJob].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Kms.V1.ImportJob GetImportJob(global::Google.Cloud.Kms.V1.GetImportJobRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetImportJob, null, options, request);
      }
      /// <summary>
      /// Returns metadata for a given [ImportJob][google.cloud.kms.v1.ImportJob].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Kms.V1.ImportJob> GetImportJobAsync(global::Google.Cloud.Kms.V1.GetImportJobRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetImportJobAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns metadata for a given [ImportJob][google.cloud.kms.v1.ImportJob].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Kms.V1.ImportJob> GetImportJobAsync(global::Google.Cloud.Kms.V1.GetImportJobRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetImportJob, null, options, request);
      }
      /// <summary>
      /// Create a new [KeyRing][google.cloud.kms.v1.KeyRing] in a given Project and Location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Kms.V1.KeyRing CreateKeyRing(global::Google.Cloud.Kms.V1.CreateKeyRingRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateKeyRing(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Create a new [KeyRing][google.cloud.kms.v1.KeyRing] in a given Project and Location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Kms.V1.KeyRing CreateKeyRing(global::Google.Cloud.Kms.V1.CreateKeyRingRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateKeyRing, null, options, request);
      }
      /// <summary>
      /// Create a new [KeyRing][google.cloud.kms.v1.KeyRing] in a given Project and Location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Kms.V1.KeyRing> CreateKeyRingAsync(global::Google.Cloud.Kms.V1.CreateKeyRingRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateKeyRingAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Create a new [KeyRing][google.cloud.kms.v1.KeyRing] in a given Project and Location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Kms.V1.KeyRing> CreateKeyRingAsync(global::Google.Cloud.Kms.V1.CreateKeyRingRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateKeyRing, null, options, request);
      }
      /// <summary>
      /// Create a new [CryptoKey][google.cloud.kms.v1.CryptoKey] within a [KeyRing][google.cloud.kms.v1.KeyRing].
      ///
      /// [CryptoKey.purpose][google.cloud.kms.v1.CryptoKey.purpose] and
      /// [CryptoKey.version_template.algorithm][google.cloud.kms.v1.CryptoKeyVersionTemplate.algorithm]
      /// are required.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Kms.V1.CryptoKey CreateCryptoKey(global::Google.Cloud.Kms.V1.CreateCryptoKeyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateCryptoKey(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Create a new [CryptoKey][google.cloud.kms.v1.CryptoKey] within a [KeyRing][google.cloud.kms.v1.KeyRing].
      ///
      /// [CryptoKey.purpose][google.cloud.kms.v1.CryptoKey.purpose] and
      /// [CryptoKey.version_template.algorithm][google.cloud.kms.v1.CryptoKeyVersionTemplate.algorithm]
      /// are required.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Kms.V1.CryptoKey CreateCryptoKey(global::Google.Cloud.Kms.V1.CreateCryptoKeyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateCryptoKey, null, options, request);
      }
      /// <summary>
      /// Create a new [CryptoKey][google.cloud.kms.v1.CryptoKey] within a [KeyRing][google.cloud.kms.v1.KeyRing].
      ///
      /// [CryptoKey.purpose][google.cloud.kms.v1.CryptoKey.purpose] and
      /// [CryptoKey.version_template.algorithm][google.cloud.kms.v1.CryptoKeyVersionTemplate.algorithm]
      /// are required.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Kms.V1.CryptoKey> CreateCryptoKeyAsync(global::Google.Cloud.Kms.V1.CreateCryptoKeyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateCryptoKeyAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Create a new [CryptoKey][google.cloud.kms.v1.CryptoKey] within a [KeyRing][google.cloud.kms.v1.KeyRing].
      ///
      /// [CryptoKey.purpose][google.cloud.kms.v1.CryptoKey.purpose] and
      /// [CryptoKey.version_template.algorithm][google.cloud.kms.v1.CryptoKeyVersionTemplate.algorithm]
      /// are required.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Kms.V1.CryptoKey> CreateCryptoKeyAsync(global::Google.Cloud.Kms.V1.CreateCryptoKeyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateCryptoKey, null, options, request);
      }
      /// <summary>
      /// Create a new [CryptoKeyVersion][google.cloud.kms.v1.CryptoKeyVersion] in a [CryptoKey][google.cloud.kms.v1.CryptoKey].
      ///
      /// The server will assign the next sequential id. If unset,
      /// [state][google.cloud.kms.v1.CryptoKeyVersion.state] will be set to
      /// [ENABLED][google.cloud.kms.v1.CryptoKeyVersion.CryptoKeyVersionState.ENABLED].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Kms.V1.CryptoKeyVersion CreateCryptoKeyVersion(global::Google.Cloud.Kms.V1.CreateCryptoKeyVersionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateCryptoKeyVersion(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Create a new [CryptoKeyVersion][google.cloud.kms.v1.CryptoKeyVersion] in a [CryptoKey][google.cloud.kms.v1.CryptoKey].
      ///
      /// The server will assign the next sequential id. If unset,
      /// [state][google.cloud.kms.v1.CryptoKeyVersion.state] will be set to
      /// [ENABLED][google.cloud.kms.v1.CryptoKeyVersion.CryptoKeyVersionState.ENABLED].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Kms.V1.CryptoKeyVersion CreateCryptoKeyVersion(global::Google.Cloud.Kms.V1.CreateCryptoKeyVersionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateCryptoKeyVersion, null, options, request);
      }
      /// <summary>
      /// Create a new [CryptoKeyVersion][google.cloud.kms.v1.CryptoKeyVersion] in a [CryptoKey][google.cloud.kms.v1.CryptoKey].
      ///
      /// The server will assign the next sequential id. If unset,
      /// [state][google.cloud.kms.v1.CryptoKeyVersion.state] will be set to
      /// [ENABLED][google.cloud.kms.v1.CryptoKeyVersion.CryptoKeyVersionState.ENABLED].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Kms.V1.CryptoKeyVersion> CreateCryptoKeyVersionAsync(global::Google.Cloud.Kms.V1.CreateCryptoKeyVersionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateCryptoKeyVersionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Create a new [CryptoKeyVersion][google.cloud.kms.v1.CryptoKeyVersion] in a [CryptoKey][google.cloud.kms.v1.CryptoKey].
      ///
      /// The server will assign the next sequential id. If unset,
      /// [state][google.cloud.kms.v1.CryptoKeyVersion.state] will be set to
      /// [ENABLED][google.cloud.kms.v1.CryptoKeyVersion.CryptoKeyVersionState.ENABLED].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Kms.V1.CryptoKeyVersion> CreateCryptoKeyVersionAsync(global::Google.Cloud.Kms.V1.CreateCryptoKeyVersionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateCryptoKeyVersion, null, options, request);
      }
      /// <summary>
      /// Imports a new [CryptoKeyVersion][google.cloud.kms.v1.CryptoKeyVersion] into an existing [CryptoKey][google.cloud.kms.v1.CryptoKey] using the
      /// wrapped key material provided in the request.
      ///
      /// The version ID will be assigned the next sequential id within the
      /// [CryptoKey][google.cloud.kms.v1.CryptoKey].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Kms.V1.CryptoKeyVersion ImportCryptoKeyVersion(global::Google.Cloud.Kms.V1.ImportCryptoKeyVersionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ImportCryptoKeyVersion(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Imports a new [CryptoKeyVersion][google.cloud.kms.v1.CryptoKeyVersion] into an existing [CryptoKey][google.cloud.kms.v1.CryptoKey] using the
      /// wrapped key material provided in the request.
      ///
      /// The version ID will be assigned the next sequential id within the
      /// [CryptoKey][google.cloud.kms.v1.CryptoKey].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Kms.V1.CryptoKeyVersion ImportCryptoKeyVersion(global::Google.Cloud.Kms.V1.ImportCryptoKeyVersionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ImportCryptoKeyVersion, null, options, request);
      }
      /// <summary>
      /// Imports a new [CryptoKeyVersion][google.cloud.kms.v1.CryptoKeyVersion] into an existing [CryptoKey][google.cloud.kms.v1.CryptoKey] using the
      /// wrapped key material provided in the request.
      ///
      /// The version ID will be assigned the next sequential id within the
      /// [CryptoKey][google.cloud.kms.v1.CryptoKey].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Kms.V1.CryptoKeyVersion> ImportCryptoKeyVersionAsync(global::Google.Cloud.Kms.V1.ImportCryptoKeyVersionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ImportCryptoKeyVersionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Imports a new [CryptoKeyVersion][google.cloud.kms.v1.CryptoKeyVersion] into an existing [CryptoKey][google.cloud.kms.v1.CryptoKey] using the
      /// wrapped key material provided in the request.
      ///
      /// The version ID will be assigned the next sequential id within the
      /// [CryptoKey][google.cloud.kms.v1.CryptoKey].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Kms.V1.CryptoKeyVersion> ImportCryptoKeyVersionAsync(global::Google.Cloud.Kms.V1.ImportCryptoKeyVersionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ImportCryptoKeyVersion, null, options, request);
      }
      /// <summary>
      /// Create a new [ImportJob][google.cloud.kms.v1.ImportJob] within a [KeyRing][google.cloud.kms.v1.KeyRing].
      ///
      /// [ImportJob.import_method][google.cloud.kms.v1.ImportJob.import_method] is required.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Kms.V1.ImportJob CreateImportJob(global::Google.Cloud.Kms.V1.CreateImportJobRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateImportJob(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Create a new [ImportJob][google.cloud.kms.v1.ImportJob] within a [KeyRing][google.cloud.kms.v1.KeyRing].
      ///
      /// [ImportJob.import_method][google.cloud.kms.v1.ImportJob.import_method] is required.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Kms.V1.ImportJob CreateImportJob(global::Google.Cloud.Kms.V1.CreateImportJobRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateImportJob, null, options, request);
      }
      /// <summary>
      /// Create a new [ImportJob][google.cloud.kms.v1.ImportJob] within a [KeyRing][google.cloud.kms.v1.KeyRing].
      ///
      /// [ImportJob.import_method][google.cloud.kms.v1.ImportJob.import_method] is required.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Kms.V1.ImportJob> CreateImportJobAsync(global::Google.Cloud.Kms.V1.CreateImportJobRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateImportJobAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Create a new [ImportJob][google.cloud.kms.v1.ImportJob] within a [KeyRing][google.cloud.kms.v1.KeyRing].
      ///
      /// [ImportJob.import_method][google.cloud.kms.v1.ImportJob.import_method] is required.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Kms.V1.ImportJob> CreateImportJobAsync(global::Google.Cloud.Kms.V1.CreateImportJobRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateImportJob, null, options, request);
      }
      /// <summary>
      /// Update a [CryptoKey][google.cloud.kms.v1.CryptoKey].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Kms.V1.CryptoKey UpdateCryptoKey(global::Google.Cloud.Kms.V1.UpdateCryptoKeyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateCryptoKey(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Update a [CryptoKey][google.cloud.kms.v1.CryptoKey].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Kms.V1.CryptoKey UpdateCryptoKey(global::Google.Cloud.Kms.V1.UpdateCryptoKeyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateCryptoKey, null, options, request);
      }
      /// <summary>
      /// Update a [CryptoKey][google.cloud.kms.v1.CryptoKey].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Kms.V1.CryptoKey> UpdateCryptoKeyAsync(global::Google.Cloud.Kms.V1.UpdateCryptoKeyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateCryptoKeyAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Update a [CryptoKey][google.cloud.kms.v1.CryptoKey].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Kms.V1.CryptoKey> UpdateCryptoKeyAsync(global::Google.Cloud.Kms.V1.UpdateCryptoKeyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateCryptoKey, null, options, request);
      }
      /// <summary>
      /// Update a [CryptoKeyVersion][google.cloud.kms.v1.CryptoKeyVersion]'s metadata.
      ///
      /// [state][google.cloud.kms.v1.CryptoKeyVersion.state] may be changed between
      /// [ENABLED][google.cloud.kms.v1.CryptoKeyVersion.CryptoKeyVersionState.ENABLED] and
      /// [DISABLED][google.cloud.kms.v1.CryptoKeyVersion.CryptoKeyVersionState.DISABLED] using this
      /// method. See [DestroyCryptoKeyVersion][google.cloud.kms.v1.KeyManagementService.DestroyCryptoKeyVersion] and [RestoreCryptoKeyVersion][google.cloud.kms.v1.KeyManagementService.RestoreCryptoKeyVersion] to
      /// move between other states.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Kms.V1.CryptoKeyVersion UpdateCryptoKeyVersion(global::Google.Cloud.Kms.V1.UpdateCryptoKeyVersionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateCryptoKeyVersion(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Update a [CryptoKeyVersion][google.cloud.kms.v1.CryptoKeyVersion]'s metadata.
      ///
      /// [state][google.cloud.kms.v1.CryptoKeyVersion.state] may be changed between
      /// [ENABLED][google.cloud.kms.v1.CryptoKeyVersion.CryptoKeyVersionState.ENABLED] and
      /// [DISABLED][google.cloud.kms.v1.CryptoKeyVersion.CryptoKeyVersionState.DISABLED] using this
      /// method. See [DestroyCryptoKeyVersion][google.cloud.kms.v1.KeyManagementService.DestroyCryptoKeyVersion] and [RestoreCryptoKeyVersion][google.cloud.kms.v1.KeyManagementService.RestoreCryptoKeyVersion] to
      /// move between other states.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Kms.V1.CryptoKeyVersion UpdateCryptoKeyVersion(global::Google.Cloud.Kms.V1.UpdateCryptoKeyVersionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateCryptoKeyVersion, null, options, request);
      }
      /// <summary>
      /// Update a [CryptoKeyVersion][google.cloud.kms.v1.CryptoKeyVersion]'s metadata.
      ///
      /// [state][google.cloud.kms.v1.CryptoKeyVersion.state] may be changed between
      /// [ENABLED][google.cloud.kms.v1.CryptoKeyVersion.CryptoKeyVersionState.ENABLED] and
      /// [DISABLED][google.cloud.kms.v1.CryptoKeyVersion.CryptoKeyVersionState.DISABLED] using this
      /// method. See [DestroyCryptoKeyVersion][google.cloud.kms.v1.KeyManagementService.DestroyCryptoKeyVersion] and [RestoreCryptoKeyVersion][google.cloud.kms.v1.KeyManagementService.RestoreCryptoKeyVersion] to
      /// move between other states.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Kms.V1.CryptoKeyVersion> UpdateCryptoKeyVersionAsync(global::Google.Cloud.Kms.V1.UpdateCryptoKeyVersionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateCryptoKeyVersionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Update a [CryptoKeyVersion][google.cloud.kms.v1.CryptoKeyVersion]'s metadata.
      ///
      /// [state][google.cloud.kms.v1.CryptoKeyVersion.state] may be changed between
      /// [ENABLED][google.cloud.kms.v1.CryptoKeyVersion.CryptoKeyVersionState.ENABLED] and
      /// [DISABLED][google.cloud.kms.v1.CryptoKeyVersion.CryptoKeyVersionState.DISABLED] using this
      /// method. See [DestroyCryptoKeyVersion][google.cloud.kms.v1.KeyManagementService.DestroyCryptoKeyVersion] and [RestoreCryptoKeyVersion][google.cloud.kms.v1.KeyManagementService.RestoreCryptoKeyVersion] to
      /// move between other states.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Kms.V1.CryptoKeyVersion> UpdateCryptoKeyVersionAsync(global::Google.Cloud.Kms.V1.UpdateCryptoKeyVersionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateCryptoKeyVersion, null, options, request);
      }
      /// <summary>
      /// Encrypts data, so that it can only be recovered by a call to [Decrypt][google.cloud.kms.v1.KeyManagementService.Decrypt].
      /// The [CryptoKey.purpose][google.cloud.kms.v1.CryptoKey.purpose] must be
      /// [ENCRYPT_DECRYPT][google.cloud.kms.v1.CryptoKey.CryptoKeyPurpose.ENCRYPT_DECRYPT].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Kms.V1.EncryptResponse Encrypt(global::Google.Cloud.Kms.V1.EncryptRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Encrypt(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Encrypts data, so that it can only be recovered by a call to [Decrypt][google.cloud.kms.v1.KeyManagementService.Decrypt].
      /// The [CryptoKey.purpose][google.cloud.kms.v1.CryptoKey.purpose] must be
      /// [ENCRYPT_DECRYPT][google.cloud.kms.v1.CryptoKey.CryptoKeyPurpose.ENCRYPT_DECRYPT].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Kms.V1.EncryptResponse Encrypt(global::Google.Cloud.Kms.V1.EncryptRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Encrypt, null, options, request);
      }
      /// <summary>
      /// Encrypts data, so that it can only be recovered by a call to [Decrypt][google.cloud.kms.v1.KeyManagementService.Decrypt].
      /// The [CryptoKey.purpose][google.cloud.kms.v1.CryptoKey.purpose] must be
      /// [ENCRYPT_DECRYPT][google.cloud.kms.v1.CryptoKey.CryptoKeyPurpose.ENCRYPT_DECRYPT].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Kms.V1.EncryptResponse> EncryptAsync(global::Google.Cloud.Kms.V1.EncryptRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return EncryptAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Encrypts data, so that it can only be recovered by a call to [Decrypt][google.cloud.kms.v1.KeyManagementService.Decrypt].
      /// The [CryptoKey.purpose][google.cloud.kms.v1.CryptoKey.purpose] must be
      /// [ENCRYPT_DECRYPT][google.cloud.kms.v1.CryptoKey.CryptoKeyPurpose.ENCRYPT_DECRYPT].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Kms.V1.EncryptResponse> EncryptAsync(global::Google.Cloud.Kms.V1.EncryptRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Encrypt, null, options, request);
      }
      /// <summary>
      /// Decrypts data that was protected by [Encrypt][google.cloud.kms.v1.KeyManagementService.Encrypt]. The [CryptoKey.purpose][google.cloud.kms.v1.CryptoKey.purpose]
      /// must be [ENCRYPT_DECRYPT][google.cloud.kms.v1.CryptoKey.CryptoKeyPurpose.ENCRYPT_DECRYPT].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Kms.V1.DecryptResponse Decrypt(global::Google.Cloud.Kms.V1.DecryptRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Decrypt(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Decrypts data that was protected by [Encrypt][google.cloud.kms.v1.KeyManagementService.Encrypt]. The [CryptoKey.purpose][google.cloud.kms.v1.CryptoKey.purpose]
      /// must be [ENCRYPT_DECRYPT][google.cloud.kms.v1.CryptoKey.CryptoKeyPurpose.ENCRYPT_DECRYPT].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Kms.V1.DecryptResponse Decrypt(global::Google.Cloud.Kms.V1.DecryptRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Decrypt, null, options, request);
      }
      /// <summary>
      /// Decrypts data that was protected by [Encrypt][google.cloud.kms.v1.KeyManagementService.Encrypt]. The [CryptoKey.purpose][google.cloud.kms.v1.CryptoKey.purpose]
      /// must be [ENCRYPT_DECRYPT][google.cloud.kms.v1.CryptoKey.CryptoKeyPurpose.ENCRYPT_DECRYPT].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Kms.V1.DecryptResponse> DecryptAsync(global::Google.Cloud.Kms.V1.DecryptRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DecryptAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Decrypts data that was protected by [Encrypt][google.cloud.kms.v1.KeyManagementService.Encrypt]. The [CryptoKey.purpose][google.cloud.kms.v1.CryptoKey.purpose]
      /// must be [ENCRYPT_DECRYPT][google.cloud.kms.v1.CryptoKey.CryptoKeyPurpose.ENCRYPT_DECRYPT].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Kms.V1.DecryptResponse> DecryptAsync(global::Google.Cloud.Kms.V1.DecryptRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Decrypt, null, options, request);
      }
      /// <summary>
      /// Signs data using a [CryptoKeyVersion][google.cloud.kms.v1.CryptoKeyVersion] with [CryptoKey.purpose][google.cloud.kms.v1.CryptoKey.purpose]
      /// ASYMMETRIC_SIGN, producing a signature that can be verified with the public
      /// key retrieved from [GetPublicKey][google.cloud.kms.v1.KeyManagementService.GetPublicKey].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Kms.V1.AsymmetricSignResponse AsymmetricSign(global::Google.Cloud.Kms.V1.AsymmetricSignRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AsymmetricSign(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Signs data using a [CryptoKeyVersion][google.cloud.kms.v1.CryptoKeyVersion] with [CryptoKey.purpose][google.cloud.kms.v1.CryptoKey.purpose]
      /// ASYMMETRIC_SIGN, producing a signature that can be verified with the public
      /// key retrieved from [GetPublicKey][google.cloud.kms.v1.KeyManagementService.GetPublicKey].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Kms.V1.AsymmetricSignResponse AsymmetricSign(global::Google.Cloud.Kms.V1.AsymmetricSignRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AsymmetricSign, null, options, request);
      }
      /// <summary>
      /// Signs data using a [CryptoKeyVersion][google.cloud.kms.v1.CryptoKeyVersion] with [CryptoKey.purpose][google.cloud.kms.v1.CryptoKey.purpose]
      /// ASYMMETRIC_SIGN, producing a signature that can be verified with the public
      /// key retrieved from [GetPublicKey][google.cloud.kms.v1.KeyManagementService.GetPublicKey].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Kms.V1.AsymmetricSignResponse> AsymmetricSignAsync(global::Google.Cloud.Kms.V1.AsymmetricSignRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AsymmetricSignAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Signs data using a [CryptoKeyVersion][google.cloud.kms.v1.CryptoKeyVersion] with [CryptoKey.purpose][google.cloud.kms.v1.CryptoKey.purpose]
      /// ASYMMETRIC_SIGN, producing a signature that can be verified with the public
      /// key retrieved from [GetPublicKey][google.cloud.kms.v1.KeyManagementService.GetPublicKey].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Kms.V1.AsymmetricSignResponse> AsymmetricSignAsync(global::Google.Cloud.Kms.V1.AsymmetricSignRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AsymmetricSign, null, options, request);
      }
      /// <summary>
      /// Decrypts data that was encrypted with a public key retrieved from
      /// [GetPublicKey][google.cloud.kms.v1.KeyManagementService.GetPublicKey] corresponding to a [CryptoKeyVersion][google.cloud.kms.v1.CryptoKeyVersion] with
      /// [CryptoKey.purpose][google.cloud.kms.v1.CryptoKey.purpose] ASYMMETRIC_DECRYPT.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Kms.V1.AsymmetricDecryptResponse AsymmetricDecrypt(global::Google.Cloud.Kms.V1.AsymmetricDecryptRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AsymmetricDecrypt(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Decrypts data that was encrypted with a public key retrieved from
      /// [GetPublicKey][google.cloud.kms.v1.KeyManagementService.GetPublicKey] corresponding to a [CryptoKeyVersion][google.cloud.kms.v1.CryptoKeyVersion] with
      /// [CryptoKey.purpose][google.cloud.kms.v1.CryptoKey.purpose] ASYMMETRIC_DECRYPT.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Kms.V1.AsymmetricDecryptResponse AsymmetricDecrypt(global::Google.Cloud.Kms.V1.AsymmetricDecryptRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AsymmetricDecrypt, null, options, request);
      }
      /// <summary>
      /// Decrypts data that was encrypted with a public key retrieved from
      /// [GetPublicKey][google.cloud.kms.v1.KeyManagementService.GetPublicKey] corresponding to a [CryptoKeyVersion][google.cloud.kms.v1.CryptoKeyVersion] with
      /// [CryptoKey.purpose][google.cloud.kms.v1.CryptoKey.purpose] ASYMMETRIC_DECRYPT.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Kms.V1.AsymmetricDecryptResponse> AsymmetricDecryptAsync(global::Google.Cloud.Kms.V1.AsymmetricDecryptRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AsymmetricDecryptAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Decrypts data that was encrypted with a public key retrieved from
      /// [GetPublicKey][google.cloud.kms.v1.KeyManagementService.GetPublicKey] corresponding to a [CryptoKeyVersion][google.cloud.kms.v1.CryptoKeyVersion] with
      /// [CryptoKey.purpose][google.cloud.kms.v1.CryptoKey.purpose] ASYMMETRIC_DECRYPT.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Kms.V1.AsymmetricDecryptResponse> AsymmetricDecryptAsync(global::Google.Cloud.Kms.V1.AsymmetricDecryptRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AsymmetricDecrypt, null, options, request);
      }
      /// <summary>
      /// Update the version of a [CryptoKey][google.cloud.kms.v1.CryptoKey] that will be used in [Encrypt][google.cloud.kms.v1.KeyManagementService.Encrypt].
      ///
      /// Returns an error if called on an asymmetric key.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Kms.V1.CryptoKey UpdateCryptoKeyPrimaryVersion(global::Google.Cloud.Kms.V1.UpdateCryptoKeyPrimaryVersionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateCryptoKeyPrimaryVersion(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Update the version of a [CryptoKey][google.cloud.kms.v1.CryptoKey] that will be used in [Encrypt][google.cloud.kms.v1.KeyManagementService.Encrypt].
      ///
      /// Returns an error if called on an asymmetric key.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Kms.V1.CryptoKey UpdateCryptoKeyPrimaryVersion(global::Google.Cloud.Kms.V1.UpdateCryptoKeyPrimaryVersionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateCryptoKeyPrimaryVersion, null, options, request);
      }
      /// <summary>
      /// Update the version of a [CryptoKey][google.cloud.kms.v1.CryptoKey] that will be used in [Encrypt][google.cloud.kms.v1.KeyManagementService.Encrypt].
      ///
      /// Returns an error if called on an asymmetric key.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Kms.V1.CryptoKey> UpdateCryptoKeyPrimaryVersionAsync(global::Google.Cloud.Kms.V1.UpdateCryptoKeyPrimaryVersionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateCryptoKeyPrimaryVersionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Update the version of a [CryptoKey][google.cloud.kms.v1.CryptoKey] that will be used in [Encrypt][google.cloud.kms.v1.KeyManagementService.Encrypt].
      ///
      /// Returns an error if called on an asymmetric key.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Kms.V1.CryptoKey> UpdateCryptoKeyPrimaryVersionAsync(global::Google.Cloud.Kms.V1.UpdateCryptoKeyPrimaryVersionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateCryptoKeyPrimaryVersion, null, options, request);
      }
      /// <summary>
      /// Schedule a [CryptoKeyVersion][google.cloud.kms.v1.CryptoKeyVersion] for destruction.
      ///
      /// Upon calling this method, [CryptoKeyVersion.state][google.cloud.kms.v1.CryptoKeyVersion.state] will be set to
      /// [DESTROY_SCHEDULED][google.cloud.kms.v1.CryptoKeyVersion.CryptoKeyVersionState.DESTROY_SCHEDULED]
      /// and [destroy_time][google.cloud.kms.v1.CryptoKeyVersion.destroy_time] will be set to a time 24
      /// hours in the future, at which point the [state][google.cloud.kms.v1.CryptoKeyVersion.state]
      /// will be changed to
      /// [DESTROYED][google.cloud.kms.v1.CryptoKeyVersion.CryptoKeyVersionState.DESTROYED], and the key
      /// material will be irrevocably destroyed.
      ///
      /// Before the [destroy_time][google.cloud.kms.v1.CryptoKeyVersion.destroy_time] is reached,
      /// [RestoreCryptoKeyVersion][google.cloud.kms.v1.KeyManagementService.RestoreCryptoKeyVersion] may be called to reverse the process.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Kms.V1.CryptoKeyVersion DestroyCryptoKeyVersion(global::Google.Cloud.Kms.V1.DestroyCryptoKeyVersionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DestroyCryptoKeyVersion(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Schedule a [CryptoKeyVersion][google.cloud.kms.v1.CryptoKeyVersion] for destruction.
      ///
      /// Upon calling this method, [CryptoKeyVersion.state][google.cloud.kms.v1.CryptoKeyVersion.state] will be set to
      /// [DESTROY_SCHEDULED][google.cloud.kms.v1.CryptoKeyVersion.CryptoKeyVersionState.DESTROY_SCHEDULED]
      /// and [destroy_time][google.cloud.kms.v1.CryptoKeyVersion.destroy_time] will be set to a time 24
      /// hours in the future, at which point the [state][google.cloud.kms.v1.CryptoKeyVersion.state]
      /// will be changed to
      /// [DESTROYED][google.cloud.kms.v1.CryptoKeyVersion.CryptoKeyVersionState.DESTROYED], and the key
      /// material will be irrevocably destroyed.
      ///
      /// Before the [destroy_time][google.cloud.kms.v1.CryptoKeyVersion.destroy_time] is reached,
      /// [RestoreCryptoKeyVersion][google.cloud.kms.v1.KeyManagementService.RestoreCryptoKeyVersion] may be called to reverse the process.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Kms.V1.CryptoKeyVersion DestroyCryptoKeyVersion(global::Google.Cloud.Kms.V1.DestroyCryptoKeyVersionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DestroyCryptoKeyVersion, null, options, request);
      }
      /// <summary>
      /// Schedule a [CryptoKeyVersion][google.cloud.kms.v1.CryptoKeyVersion] for destruction.
      ///
      /// Upon calling this method, [CryptoKeyVersion.state][google.cloud.kms.v1.CryptoKeyVersion.state] will be set to
      /// [DESTROY_SCHEDULED][google.cloud.kms.v1.CryptoKeyVersion.CryptoKeyVersionState.DESTROY_SCHEDULED]
      /// and [destroy_time][google.cloud.kms.v1.CryptoKeyVersion.destroy_time] will be set to a time 24
      /// hours in the future, at which point the [state][google.cloud.kms.v1.CryptoKeyVersion.state]
      /// will be changed to
      /// [DESTROYED][google.cloud.kms.v1.CryptoKeyVersion.CryptoKeyVersionState.DESTROYED], and the key
      /// material will be irrevocably destroyed.
      ///
      /// Before the [destroy_time][google.cloud.kms.v1.CryptoKeyVersion.destroy_time] is reached,
      /// [RestoreCryptoKeyVersion][google.cloud.kms.v1.KeyManagementService.RestoreCryptoKeyVersion] may be called to reverse the process.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Kms.V1.CryptoKeyVersion> DestroyCryptoKeyVersionAsync(global::Google.Cloud.Kms.V1.DestroyCryptoKeyVersionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DestroyCryptoKeyVersionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Schedule a [CryptoKeyVersion][google.cloud.kms.v1.CryptoKeyVersion] for destruction.
      ///
      /// Upon calling this method, [CryptoKeyVersion.state][google.cloud.kms.v1.CryptoKeyVersion.state] will be set to
      /// [DESTROY_SCHEDULED][google.cloud.kms.v1.CryptoKeyVersion.CryptoKeyVersionState.DESTROY_SCHEDULED]
      /// and [destroy_time][google.cloud.kms.v1.CryptoKeyVersion.destroy_time] will be set to a time 24
      /// hours in the future, at which point the [state][google.cloud.kms.v1.CryptoKeyVersion.state]
      /// will be changed to
      /// [DESTROYED][google.cloud.kms.v1.CryptoKeyVersion.CryptoKeyVersionState.DESTROYED], and the key
      /// material will be irrevocably destroyed.
      ///
      /// Before the [destroy_time][google.cloud.kms.v1.CryptoKeyVersion.destroy_time] is reached,
      /// [RestoreCryptoKeyVersion][google.cloud.kms.v1.KeyManagementService.RestoreCryptoKeyVersion] may be called to reverse the process.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Kms.V1.CryptoKeyVersion> DestroyCryptoKeyVersionAsync(global::Google.Cloud.Kms.V1.DestroyCryptoKeyVersionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DestroyCryptoKeyVersion, null, options, request);
      }
      /// <summary>
      /// Restore a [CryptoKeyVersion][google.cloud.kms.v1.CryptoKeyVersion] in the
      /// [DESTROY_SCHEDULED][google.cloud.kms.v1.CryptoKeyVersion.CryptoKeyVersionState.DESTROY_SCHEDULED]
      /// state.
      ///
      /// Upon restoration of the CryptoKeyVersion, [state][google.cloud.kms.v1.CryptoKeyVersion.state]
      /// will be set to [DISABLED][google.cloud.kms.v1.CryptoKeyVersion.CryptoKeyVersionState.DISABLED],
      /// and [destroy_time][google.cloud.kms.v1.CryptoKeyVersion.destroy_time] will be cleared.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Kms.V1.CryptoKeyVersion RestoreCryptoKeyVersion(global::Google.Cloud.Kms.V1.RestoreCryptoKeyVersionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RestoreCryptoKeyVersion(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Restore a [CryptoKeyVersion][google.cloud.kms.v1.CryptoKeyVersion] in the
      /// [DESTROY_SCHEDULED][google.cloud.kms.v1.CryptoKeyVersion.CryptoKeyVersionState.DESTROY_SCHEDULED]
      /// state.
      ///
      /// Upon restoration of the CryptoKeyVersion, [state][google.cloud.kms.v1.CryptoKeyVersion.state]
      /// will be set to [DISABLED][google.cloud.kms.v1.CryptoKeyVersion.CryptoKeyVersionState.DISABLED],
      /// and [destroy_time][google.cloud.kms.v1.CryptoKeyVersion.destroy_time] will be cleared.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Kms.V1.CryptoKeyVersion RestoreCryptoKeyVersion(global::Google.Cloud.Kms.V1.RestoreCryptoKeyVersionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_RestoreCryptoKeyVersion, null, options, request);
      }
      /// <summary>
      /// Restore a [CryptoKeyVersion][google.cloud.kms.v1.CryptoKeyVersion] in the
      /// [DESTROY_SCHEDULED][google.cloud.kms.v1.CryptoKeyVersion.CryptoKeyVersionState.DESTROY_SCHEDULED]
      /// state.
      ///
      /// Upon restoration of the CryptoKeyVersion, [state][google.cloud.kms.v1.CryptoKeyVersion.state]
      /// will be set to [DISABLED][google.cloud.kms.v1.CryptoKeyVersion.CryptoKeyVersionState.DISABLED],
      /// and [destroy_time][google.cloud.kms.v1.CryptoKeyVersion.destroy_time] will be cleared.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Kms.V1.CryptoKeyVersion> RestoreCryptoKeyVersionAsync(global::Google.Cloud.Kms.V1.RestoreCryptoKeyVersionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RestoreCryptoKeyVersionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Restore a [CryptoKeyVersion][google.cloud.kms.v1.CryptoKeyVersion] in the
      /// [DESTROY_SCHEDULED][google.cloud.kms.v1.CryptoKeyVersion.CryptoKeyVersionState.DESTROY_SCHEDULED]
      /// state.
      ///
      /// Upon restoration of the CryptoKeyVersion, [state][google.cloud.kms.v1.CryptoKeyVersion.state]
      /// will be set to [DISABLED][google.cloud.kms.v1.CryptoKeyVersion.CryptoKeyVersionState.DISABLED],
      /// and [destroy_time][google.cloud.kms.v1.CryptoKeyVersion.destroy_time] will be cleared.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Kms.V1.CryptoKeyVersion> RestoreCryptoKeyVersionAsync(global::Google.Cloud.Kms.V1.RestoreCryptoKeyVersionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_RestoreCryptoKeyVersion, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override KeyManagementServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new KeyManagementServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(KeyManagementServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_ListKeyRings, serviceImpl.ListKeyRings)
          .AddMethod(__Method_ListCryptoKeys, serviceImpl.ListCryptoKeys)
          .AddMethod(__Method_ListCryptoKeyVersions, serviceImpl.ListCryptoKeyVersions)
          .AddMethod(__Method_ListImportJobs, serviceImpl.ListImportJobs)
          .AddMethod(__Method_GetKeyRing, serviceImpl.GetKeyRing)
          .AddMethod(__Method_GetCryptoKey, serviceImpl.GetCryptoKey)
          .AddMethod(__Method_GetCryptoKeyVersion, serviceImpl.GetCryptoKeyVersion)
          .AddMethod(__Method_GetPublicKey, serviceImpl.GetPublicKey)
          .AddMethod(__Method_GetImportJob, serviceImpl.GetImportJob)
          .AddMethod(__Method_CreateKeyRing, serviceImpl.CreateKeyRing)
          .AddMethod(__Method_CreateCryptoKey, serviceImpl.CreateCryptoKey)
          .AddMethod(__Method_CreateCryptoKeyVersion, serviceImpl.CreateCryptoKeyVersion)
          .AddMethod(__Method_ImportCryptoKeyVersion, serviceImpl.ImportCryptoKeyVersion)
          .AddMethod(__Method_CreateImportJob, serviceImpl.CreateImportJob)
          .AddMethod(__Method_UpdateCryptoKey, serviceImpl.UpdateCryptoKey)
          .AddMethod(__Method_UpdateCryptoKeyVersion, serviceImpl.UpdateCryptoKeyVersion)
          .AddMethod(__Method_Encrypt, serviceImpl.Encrypt)
          .AddMethod(__Method_Decrypt, serviceImpl.Decrypt)
          .AddMethod(__Method_AsymmetricSign, serviceImpl.AsymmetricSign)
          .AddMethod(__Method_AsymmetricDecrypt, serviceImpl.AsymmetricDecrypt)
          .AddMethod(__Method_UpdateCryptoKeyPrimaryVersion, serviceImpl.UpdateCryptoKeyPrimaryVersion)
          .AddMethod(__Method_DestroyCryptoKeyVersion, serviceImpl.DestroyCryptoKeyVersion)
          .AddMethod(__Method_RestoreCryptoKeyVersion, serviceImpl.RestoreCryptoKeyVersion).Build();
    }

    /// <summary>Register service method implementations with a service binder. Useful when customizing the service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, KeyManagementServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_ListKeyRings, serviceImpl.ListKeyRings);
      serviceBinder.AddMethod(__Method_ListCryptoKeys, serviceImpl.ListCryptoKeys);
      serviceBinder.AddMethod(__Method_ListCryptoKeyVersions, serviceImpl.ListCryptoKeyVersions);
      serviceBinder.AddMethod(__Method_ListImportJobs, serviceImpl.ListImportJobs);
      serviceBinder.AddMethod(__Method_GetKeyRing, serviceImpl.GetKeyRing);
      serviceBinder.AddMethod(__Method_GetCryptoKey, serviceImpl.GetCryptoKey);
      serviceBinder.AddMethod(__Method_GetCryptoKeyVersion, serviceImpl.GetCryptoKeyVersion);
      serviceBinder.AddMethod(__Method_GetPublicKey, serviceImpl.GetPublicKey);
      serviceBinder.AddMethod(__Method_GetImportJob, serviceImpl.GetImportJob);
      serviceBinder.AddMethod(__Method_CreateKeyRing, serviceImpl.CreateKeyRing);
      serviceBinder.AddMethod(__Method_CreateCryptoKey, serviceImpl.CreateCryptoKey);
      serviceBinder.AddMethod(__Method_CreateCryptoKeyVersion, serviceImpl.CreateCryptoKeyVersion);
      serviceBinder.AddMethod(__Method_ImportCryptoKeyVersion, serviceImpl.ImportCryptoKeyVersion);
      serviceBinder.AddMethod(__Method_CreateImportJob, serviceImpl.CreateImportJob);
      serviceBinder.AddMethod(__Method_UpdateCryptoKey, serviceImpl.UpdateCryptoKey);
      serviceBinder.AddMethod(__Method_UpdateCryptoKeyVersion, serviceImpl.UpdateCryptoKeyVersion);
      serviceBinder.AddMethod(__Method_Encrypt, serviceImpl.Encrypt);
      serviceBinder.AddMethod(__Method_Decrypt, serviceImpl.Decrypt);
      serviceBinder.AddMethod(__Method_AsymmetricSign, serviceImpl.AsymmetricSign);
      serviceBinder.AddMethod(__Method_AsymmetricDecrypt, serviceImpl.AsymmetricDecrypt);
      serviceBinder.AddMethod(__Method_UpdateCryptoKeyPrimaryVersion, serviceImpl.UpdateCryptoKeyPrimaryVersion);
      serviceBinder.AddMethod(__Method_DestroyCryptoKeyVersion, serviceImpl.DestroyCryptoKeyVersion);
      serviceBinder.AddMethod(__Method_RestoreCryptoKeyVersion, serviceImpl.RestoreCryptoKeyVersion);
    }

  }
}
#endregion
