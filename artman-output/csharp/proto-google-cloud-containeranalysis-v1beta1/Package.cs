// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: google/devtools/containeranalysis/v1beta1/package/package.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Grafeas.V1Beta1.Package {

  /// <summary>Holder for reflection information generated from google/devtools/containeranalysis/v1beta1/package/package.proto</summary>
  public static partial class PackageReflection {

    #region Descriptor
    /// <summary>File descriptor for google/devtools/containeranalysis/v1beta1/package/package.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static PackageReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cj9nb29nbGUvZGV2dG9vbHMvY29udGFpbmVyYW5hbHlzaXMvdjFiZXRhMS9w",
            "YWNrYWdlL3BhY2thZ2UucHJvdG8SF2dyYWZlYXMudjFiZXRhMS5wYWNrYWdl",
            "IswBCgxEaXN0cmlidXRpb24SDwoHY3BlX3VyaRgBIAEoCRI7CgxhcmNoaXRl",
            "Y3R1cmUYAiABKA4yJS5ncmFmZWFzLnYxYmV0YTEucGFja2FnZS5BcmNoaXRl",
            "Y3R1cmUSOAoObGF0ZXN0X3ZlcnNpb24YAyABKAsyIC5ncmFmZWFzLnYxYmV0",
            "YTEucGFja2FnZS5WZXJzaW9uEhIKCm1haW50YWluZXIYBCABKAkSCwoDdXJs",
            "GAUgASgJEhMKC2Rlc2NyaXB0aW9uGAYgASgJIlwKCExvY2F0aW9uEg8KB2Nw",
            "ZV91cmkYASABKAkSMQoHdmVyc2lvbhgCIAEoCzIgLmdyYWZlYXMudjFiZXRh",
            "MS5wYWNrYWdlLlZlcnNpb24SDAoEcGF0aBgDIAEoCSJUCgdQYWNrYWdlEgwK",
            "BG5hbWUYASABKAkSOwoMZGlzdHJpYnV0aW9uGAogAygLMiUuZ3JhZmVhcy52",
            "MWJldGExLnBhY2thZ2UuRGlzdHJpYnV0aW9uIkYKB0RldGFpbHMSOwoMaW5z",
            "dGFsbGF0aW9uGAEgASgLMiUuZ3JhZmVhcy52MWJldGExLnBhY2thZ2UuSW5z",
            "dGFsbGF0aW9uIlEKDEluc3RhbGxhdGlvbhIMCgRuYW1lGAEgASgJEjMKCGxv",
            "Y2F0aW9uGAIgAygLMiEuZ3JhZmVhcy52MWJldGExLnBhY2thZ2UuTG9jYXRp",
            "b24ixwEKB1ZlcnNpb24SDQoFZXBvY2gYASABKAUSDAoEbmFtZRgCIAEoCRIQ",
            "CghyZXZpc2lvbhgDIAEoCRI6CgRraW5kGAQgASgOMiwuZ3JhZmVhcy52MWJl",
            "dGExLnBhY2thZ2UuVmVyc2lvbi5WZXJzaW9uS2luZCJRCgtWZXJzaW9uS2lu",
            "ZBIcChhWRVJTSU9OX0tJTkRfVU5TUEVDSUZJRUQQABIKCgZOT1JNQUwQARIL",
            "CgdNSU5JTVVNEAISCwoHTUFYSU1VTRADKj4KDEFyY2hpdGVjdHVyZRIcChhB",
            "UkNISVRFQ1RVUkVfVU5TUEVDSUZJRUQQABIHCgNYODYQARIHCgNYNjQQAkJ6",
            "ChZpby5ncmFmZWFzLnYxYmV0YTEucGtnUAFaWGdvb2dsZS5nb2xhbmcub3Jn",
            "L2dlbnByb3RvL2dvb2dsZWFwaXMvZGV2dG9vbHMvY29udGFpbmVyYW5hbHlz",
            "aXMvdjFiZXRhMS9wYWNrYWdlO3BhY2thZ2WiAgNHUkFiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Grafeas.V1Beta1.Package.Architecture), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Grafeas.V1Beta1.Package.Distribution), global::Grafeas.V1Beta1.Package.Distribution.Parser, new[]{ "CpeUri", "Architecture", "LatestVersion", "Maintainer", "Url", "Description" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Grafeas.V1Beta1.Package.Location), global::Grafeas.V1Beta1.Package.Location.Parser, new[]{ "CpeUri", "Version", "Path" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Grafeas.V1Beta1.Package.Package), global::Grafeas.V1Beta1.Package.Package.Parser, new[]{ "Name", "Distribution" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Grafeas.V1Beta1.Package.Details), global::Grafeas.V1Beta1.Package.Details.Parser, new[]{ "Installation" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Grafeas.V1Beta1.Package.Installation), global::Grafeas.V1Beta1.Package.Installation.Parser, new[]{ "Name", "Location" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Grafeas.V1Beta1.Package.Version), global::Grafeas.V1Beta1.Package.Version.Parser, new[]{ "Epoch", "Name", "Revision", "Kind" }, null, new[]{ typeof(global::Grafeas.V1Beta1.Package.Version.Types.VersionKind) }, null)
          }));
    }
    #endregion

  }
  #region Enums
  /// <summary>
  /// Instruction set architectures supported by various package managers.
  /// </summary>
  public enum Architecture {
    /// <summary>
    /// Unknown architecture.
    /// </summary>
    [pbr::OriginalName("ARCHITECTURE_UNSPECIFIED")] Unspecified = 0,
    /// <summary>
    /// X86 architecture.
    /// </summary>
    [pbr::OriginalName("X86")] X86 = 1,
    /// <summary>
    /// X64 architecture.
    /// </summary>
    [pbr::OriginalName("X64")] X64 = 2,
  }

  #endregion

  #region Messages
  /// <summary>
  /// This represents a particular channel of distribution for a given package.
  /// E.g., Debian's jessie-backports dpkg mirror.
  /// </summary>
  public sealed partial class Distribution : pb::IMessage<Distribution> {
    private static readonly pb::MessageParser<Distribution> _parser = new pb::MessageParser<Distribution>(() => new Distribution());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Distribution> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Grafeas.V1Beta1.Package.PackageReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Distribution() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Distribution(Distribution other) : this() {
      cpeUri_ = other.cpeUri_;
      architecture_ = other.architecture_;
      latestVersion_ = other.latestVersion_ != null ? other.latestVersion_.Clone() : null;
      maintainer_ = other.maintainer_;
      url_ = other.url_;
      description_ = other.description_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Distribution Clone() {
      return new Distribution(this);
    }

    /// <summary>Field number for the "cpe_uri" field.</summary>
    public const int CpeUriFieldNumber = 1;
    private string cpeUri_ = "";
    /// <summary>
    /// The cpe_uri in [cpe format](https://cpe.mitre.org/specification/)
    /// denoting the package manager version distributing a package.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CpeUri {
      get { return cpeUri_; }
      set {
        cpeUri_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "architecture" field.</summary>
    public const int ArchitectureFieldNumber = 2;
    private global::Grafeas.V1Beta1.Package.Architecture architecture_ = 0;
    /// <summary>
    /// The CPU architecture for which packages in this distribution channel were
    /// built.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Grafeas.V1Beta1.Package.Architecture Architecture {
      get { return architecture_; }
      set {
        architecture_ = value;
      }
    }

    /// <summary>Field number for the "latest_version" field.</summary>
    public const int LatestVersionFieldNumber = 3;
    private global::Grafeas.V1Beta1.Package.Version latestVersion_;
    /// <summary>
    /// The latest available version of this package in this distribution
    /// channel.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Grafeas.V1Beta1.Package.Version LatestVersion {
      get { return latestVersion_; }
      set {
        latestVersion_ = value;
      }
    }

    /// <summary>Field number for the "maintainer" field.</summary>
    public const int MaintainerFieldNumber = 4;
    private string maintainer_ = "";
    /// <summary>
    /// A freeform string denoting the maintainer of this package.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Maintainer {
      get { return maintainer_; }
      set {
        maintainer_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "url" field.</summary>
    public const int UrlFieldNumber = 5;
    private string url_ = "";
    /// <summary>
    /// The distribution channel-specific homepage for this package.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Url {
      get { return url_; }
      set {
        url_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 6;
    private string description_ = "";
    /// <summary>
    /// The distribution channel-specific description of this package.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Distribution);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Distribution other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CpeUri != other.CpeUri) return false;
      if (Architecture != other.Architecture) return false;
      if (!object.Equals(LatestVersion, other.LatestVersion)) return false;
      if (Maintainer != other.Maintainer) return false;
      if (Url != other.Url) return false;
      if (Description != other.Description) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CpeUri.Length != 0) hash ^= CpeUri.GetHashCode();
      if (Architecture != 0) hash ^= Architecture.GetHashCode();
      if (latestVersion_ != null) hash ^= LatestVersion.GetHashCode();
      if (Maintainer.Length != 0) hash ^= Maintainer.GetHashCode();
      if (Url.Length != 0) hash ^= Url.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CpeUri.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(CpeUri);
      }
      if (Architecture != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Architecture);
      }
      if (latestVersion_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(LatestVersion);
      }
      if (Maintainer.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Maintainer);
      }
      if (Url.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Url);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Description);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CpeUri.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CpeUri);
      }
      if (Architecture != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Architecture);
      }
      if (latestVersion_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LatestVersion);
      }
      if (Maintainer.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Maintainer);
      }
      if (Url.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Url);
      }
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Distribution other) {
      if (other == null) {
        return;
      }
      if (other.CpeUri.Length != 0) {
        CpeUri = other.CpeUri;
      }
      if (other.Architecture != 0) {
        Architecture = other.Architecture;
      }
      if (other.latestVersion_ != null) {
        if (latestVersion_ == null) {
          LatestVersion = new global::Grafeas.V1Beta1.Package.Version();
        }
        LatestVersion.MergeFrom(other.LatestVersion);
      }
      if (other.Maintainer.Length != 0) {
        Maintainer = other.Maintainer;
      }
      if (other.Url.Length != 0) {
        Url = other.Url;
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            CpeUri = input.ReadString();
            break;
          }
          case 16: {
            Architecture = (global::Grafeas.V1Beta1.Package.Architecture) input.ReadEnum();
            break;
          }
          case 26: {
            if (latestVersion_ == null) {
              LatestVersion = new global::Grafeas.V1Beta1.Package.Version();
            }
            input.ReadMessage(LatestVersion);
            break;
          }
          case 34: {
            Maintainer = input.ReadString();
            break;
          }
          case 42: {
            Url = input.ReadString();
            break;
          }
          case 50: {
            Description = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// An occurrence of a particular package installation found within a system's
  /// filesystem. E.g., glibc was found in /var/lib/dpkg/status.
  /// </summary>
  public sealed partial class Location : pb::IMessage<Location> {
    private static readonly pb::MessageParser<Location> _parser = new pb::MessageParser<Location>(() => new Location());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Location> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Grafeas.V1Beta1.Package.PackageReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Location() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Location(Location other) : this() {
      cpeUri_ = other.cpeUri_;
      version_ = other.version_ != null ? other.version_.Clone() : null;
      path_ = other.path_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Location Clone() {
      return new Location(this);
    }

    /// <summary>Field number for the "cpe_uri" field.</summary>
    public const int CpeUriFieldNumber = 1;
    private string cpeUri_ = "";
    /// <summary>
    /// The cpe_uri in [cpe format](https://cpe.mitre.org/specification/)
    /// denoting the package manager version distributing a package.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CpeUri {
      get { return cpeUri_; }
      set {
        cpeUri_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 2;
    private global::Grafeas.V1Beta1.Package.Version version_;
    /// <summary>
    /// The version installed at this location.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Grafeas.V1Beta1.Package.Version Version {
      get { return version_; }
      set {
        version_ = value;
      }
    }

    /// <summary>Field number for the "path" field.</summary>
    public const int PathFieldNumber = 3;
    private string path_ = "";
    /// <summary>
    /// The path from which we gathered that this package/version is installed.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Path {
      get { return path_; }
      set {
        path_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Location);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Location other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CpeUri != other.CpeUri) return false;
      if (!object.Equals(Version, other.Version)) return false;
      if (Path != other.Path) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CpeUri.Length != 0) hash ^= CpeUri.GetHashCode();
      if (version_ != null) hash ^= Version.GetHashCode();
      if (Path.Length != 0) hash ^= Path.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CpeUri.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(CpeUri);
      }
      if (version_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Version);
      }
      if (Path.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Path);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CpeUri.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CpeUri);
      }
      if (version_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Version);
      }
      if (Path.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Path);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Location other) {
      if (other == null) {
        return;
      }
      if (other.CpeUri.Length != 0) {
        CpeUri = other.CpeUri;
      }
      if (other.version_ != null) {
        if (version_ == null) {
          Version = new global::Grafeas.V1Beta1.Package.Version();
        }
        Version.MergeFrom(other.Version);
      }
      if (other.Path.Length != 0) {
        Path = other.Path;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            CpeUri = input.ReadString();
            break;
          }
          case 18: {
            if (version_ == null) {
              Version = new global::Grafeas.V1Beta1.Package.Version();
            }
            input.ReadMessage(Version);
            break;
          }
          case 26: {
            Path = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// This represents a particular package that is distributed over various
  /// channels. E.g., glibc (aka libc6) is distributed by many, at various
  /// versions.
  /// </summary>
  public sealed partial class Package : pb::IMessage<Package> {
    private static readonly pb::MessageParser<Package> _parser = new pb::MessageParser<Package>(() => new Package());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Package> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Grafeas.V1Beta1.Package.PackageReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Package() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Package(Package other) : this() {
      name_ = other.name_;
      distribution_ = other.distribution_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Package Clone() {
      return new Package(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// The name of the package.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "distribution" field.</summary>
    public const int DistributionFieldNumber = 10;
    private static readonly pb::FieldCodec<global::Grafeas.V1Beta1.Package.Distribution> _repeated_distribution_codec
        = pb::FieldCodec.ForMessage(82, global::Grafeas.V1Beta1.Package.Distribution.Parser);
    private readonly pbc::RepeatedField<global::Grafeas.V1Beta1.Package.Distribution> distribution_ = new pbc::RepeatedField<global::Grafeas.V1Beta1.Package.Distribution>();
    /// <summary>
    /// The various channels by which a package is distributed.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Grafeas.V1Beta1.Package.Distribution> Distribution {
      get { return distribution_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Package);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Package other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if(!distribution_.Equals(other.distribution_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      hash ^= distribution_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      distribution_.WriteTo(output, _repeated_distribution_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      size += distribution_.CalculateSize(_repeated_distribution_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Package other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      distribution_.Add(other.distribution_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 82: {
            distribution_.AddEntriesFrom(input, _repeated_distribution_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Details of a package occurrence.
  /// </summary>
  public sealed partial class Details : pb::IMessage<Details> {
    private static readonly pb::MessageParser<Details> _parser = new pb::MessageParser<Details>(() => new Details());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Details> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Grafeas.V1Beta1.Package.PackageReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Details() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Details(Details other) : this() {
      installation_ = other.installation_ != null ? other.installation_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Details Clone() {
      return new Details(this);
    }

    /// <summary>Field number for the "installation" field.</summary>
    public const int InstallationFieldNumber = 1;
    private global::Grafeas.V1Beta1.Package.Installation installation_;
    /// <summary>
    /// Where the package was installed.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Grafeas.V1Beta1.Package.Installation Installation {
      get { return installation_; }
      set {
        installation_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Details);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Details other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Installation, other.Installation)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (installation_ != null) hash ^= Installation.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (installation_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Installation);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (installation_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Installation);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Details other) {
      if (other == null) {
        return;
      }
      if (other.installation_ != null) {
        if (installation_ == null) {
          Installation = new global::Grafeas.V1Beta1.Package.Installation();
        }
        Installation.MergeFrom(other.Installation);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (installation_ == null) {
              Installation = new global::Grafeas.V1Beta1.Package.Installation();
            }
            input.ReadMessage(Installation);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// This represents how a particular software package may be installed on a
  /// system.
  /// </summary>
  public sealed partial class Installation : pb::IMessage<Installation> {
    private static readonly pb::MessageParser<Installation> _parser = new pb::MessageParser<Installation>(() => new Installation());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Installation> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Grafeas.V1Beta1.Package.PackageReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Installation() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Installation(Installation other) : this() {
      name_ = other.name_;
      location_ = other.location_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Installation Clone() {
      return new Installation(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// Output only. The name of the installed package.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "location" field.</summary>
    public const int LocationFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Grafeas.V1Beta1.Package.Location> _repeated_location_codec
        = pb::FieldCodec.ForMessage(18, global::Grafeas.V1Beta1.Package.Location.Parser);
    private readonly pbc::RepeatedField<global::Grafeas.V1Beta1.Package.Location> location_ = new pbc::RepeatedField<global::Grafeas.V1Beta1.Package.Location>();
    /// <summary>
    /// All of the places within the filesystem versions of this package
    /// have been found.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Grafeas.V1Beta1.Package.Location> Location {
      get { return location_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Installation);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Installation other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if(!location_.Equals(other.location_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      hash ^= location_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      location_.WriteTo(output, _repeated_location_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      size += location_.CalculateSize(_repeated_location_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Installation other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      location_.Add(other.location_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            location_.AddEntriesFrom(input, _repeated_location_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Version contains structured information about the version of a package.
  /// </summary>
  public sealed partial class Version : pb::IMessage<Version> {
    private static readonly pb::MessageParser<Version> _parser = new pb::MessageParser<Version>(() => new Version());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Version> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Grafeas.V1Beta1.Package.PackageReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Version() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Version(Version other) : this() {
      epoch_ = other.epoch_;
      name_ = other.name_;
      revision_ = other.revision_;
      kind_ = other.kind_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Version Clone() {
      return new Version(this);
    }

    /// <summary>Field number for the "epoch" field.</summary>
    public const int EpochFieldNumber = 1;
    private int epoch_;
    /// <summary>
    /// Used to correct mistakes in the version numbering scheme.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Epoch {
      get { return epoch_; }
      set {
        epoch_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    /// <summary>
    /// The main part of the version name.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "revision" field.</summary>
    public const int RevisionFieldNumber = 3;
    private string revision_ = "";
    /// <summary>
    /// The iteration of the package build from the above version.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Revision {
      get { return revision_; }
      set {
        revision_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "kind" field.</summary>
    public const int KindFieldNumber = 4;
    private global::Grafeas.V1Beta1.Package.Version.Types.VersionKind kind_ = 0;
    /// <summary>
    /// Distinguish between sentinel MIN/MAX versions and normal versions. If
    /// kind is not NORMAL, then the other fields are ignored.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Grafeas.V1Beta1.Package.Version.Types.VersionKind Kind {
      get { return kind_; }
      set {
        kind_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Version);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Version other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Epoch != other.Epoch) return false;
      if (Name != other.Name) return false;
      if (Revision != other.Revision) return false;
      if (Kind != other.Kind) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Epoch != 0) hash ^= Epoch.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Revision.Length != 0) hash ^= Revision.GetHashCode();
      if (Kind != 0) hash ^= Kind.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Epoch != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Epoch);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Revision.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Revision);
      }
      if (Kind != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) Kind);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Epoch != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Epoch);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Revision.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Revision);
      }
      if (Kind != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Kind);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Version other) {
      if (other == null) {
        return;
      }
      if (other.Epoch != 0) {
        Epoch = other.Epoch;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Revision.Length != 0) {
        Revision = other.Revision;
      }
      if (other.Kind != 0) {
        Kind = other.Kind;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Epoch = input.ReadInt32();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            Revision = input.ReadString();
            break;
          }
          case 32: {
            Kind = (global::Grafeas.V1Beta1.Package.Version.Types.VersionKind) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Version message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// Whether this is an ordinary package version or a sentinel MIN/MAX version.
      /// </summary>
      public enum VersionKind {
        /// <summary>
        /// Unknown.
        /// </summary>
        [pbr::OriginalName("VERSION_KIND_UNSPECIFIED")] Unspecified = 0,
        /// <summary>
        /// A standard package version, defined by the other fields.
        /// </summary>
        [pbr::OriginalName("NORMAL")] Normal = 1,
        /// <summary>
        /// A special version representing negative infinity, other fields are
        /// ignored.
        /// </summary>
        [pbr::OriginalName("MINIMUM")] Minimum = 2,
        /// <summary>
        /// A special version representing positive infinity, other fields are
        /// ignored.
        /// </summary>
        [pbr::OriginalName("MAXIMUM")] Maximum = 3,
      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
