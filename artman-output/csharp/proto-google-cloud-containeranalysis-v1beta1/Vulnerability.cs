// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: google/devtools/containeranalysis/v1beta1/vulnerability/vulnerability.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Grafeas.V1Beta1.Vulnerability {

  /// <summary>Holder for reflection information generated from google/devtools/containeranalysis/v1beta1/vulnerability/vulnerability.proto</summary>
  public static partial class VulnerabilityReflection {

    #region Descriptor
    /// <summary>File descriptor for google/devtools/containeranalysis/v1beta1/vulnerability/vulnerability.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static VulnerabilityReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cktnb29nbGUvZGV2dG9vbHMvY29udGFpbmVyYW5hbHlzaXMvdjFiZXRhMS92",
            "dWxuZXJhYmlsaXR5L3Z1bG5lcmFiaWxpdHkucHJvdG8SHWdyYWZlYXMudjFi",
            "ZXRhMS52dWxuZXJhYmlsaXR5Gh9nb29nbGUvcHJvdG9idWYvdGltZXN0YW1w",
            "LnByb3RvGj1nb29nbGUvZGV2dG9vbHMvY29udGFpbmVyYW5hbHlzaXMvdjFi",
            "ZXRhMS9jb21tb24vY29tbW9uLnByb3RvGjlnb29nbGUvZGV2dG9vbHMvY29u",
            "dGFpbmVyYW5hbHlzaXMvdjFiZXRhMS9jdnNzL2N2c3MucHJvdG8aP2dvb2ds",
            "ZS9kZXZ0b29scy9jb250YWluZXJhbmFseXNpcy92MWJldGExL3BhY2thZ2Uv",
            "cGFja2FnZS5wcm90byLDBwoNVnVsbmVyYWJpbGl0eRISCgpjdnNzX3Njb3Jl",
            "GAEgASgCEjkKCHNldmVyaXR5GAIgASgOMicuZ3JhZmVhcy52MWJldGExLnZ1",
            "bG5lcmFiaWxpdHkuU2V2ZXJpdHkSRAoHZGV0YWlscxgDIAMoCzIzLmdyYWZl",
            "YXMudjFiZXRhMS52dWxuZXJhYmlsaXR5LlZ1bG5lcmFiaWxpdHkuRGV0YWls",
            "EjYKB2N2c3NfdjMYBCABKAsyJS5ncmFmZWFzLnYxYmV0YTEudnVsbmVyYWJp",
            "bGl0eS5DVlNTdjMSUwoPd2luZG93c19kZXRhaWxzGAUgAygLMjouZ3JhZmVh",
            "cy52MWJldGExLnZ1bG5lcmFiaWxpdHkuVnVsbmVyYWJpbGl0eS5XaW5kb3dz",
            "RGV0YWlsEjYKEnNvdXJjZV91cGRhdGVfdGltZRgGIAEoCzIaLmdvb2dsZS5w",
            "cm90b2J1Zi5UaW1lc3RhbXAahwMKBkRldGFpbBIPCgdjcGVfdXJpGAEgASgJ",
            "Eg8KB3BhY2thZ2UYAiABKAkSPgoUbWluX2FmZmVjdGVkX3ZlcnNpb24YAyAB",
            "KAsyIC5ncmFmZWFzLnYxYmV0YTEucGFja2FnZS5WZXJzaW9uEj4KFG1heF9h",
            "ZmZlY3RlZF92ZXJzaW9uGAQgASgLMiAuZ3JhZmVhcy52MWJldGExLnBhY2th",
            "Z2UuVmVyc2lvbhIVCg1zZXZlcml0eV9uYW1lGAUgASgJEhMKC2Rlc2NyaXB0",
            "aW9uGAYgASgJEkwKDmZpeGVkX2xvY2F0aW9uGAcgASgLMjQuZ3JhZmVhcy52",
            "MWJldGExLnZ1bG5lcmFiaWxpdHkuVnVsbmVyYWJpbGl0eUxvY2F0aW9uEhQK",
            "DHBhY2thZ2VfdHlwZRgIIAEoCRITCgtpc19vYnNvbGV0ZRgJIAEoCBI2ChJz",
            "b3VyY2VfdXBkYXRlX3RpbWUYCiABKAsyGi5nb29nbGUucHJvdG9idWYuVGlt",
            "ZXN0YW1wGs0BCg1XaW5kb3dzRGV0YWlsEg8KB2NwZV91cmkYASABKAkSDAoE",
            "bmFtZRgCIAEoCRITCgtkZXNjcmlwdGlvbhgDIAEoCRJcCgpmaXhpbmdfa2Jz",
            "GAQgAygLMkguZ3JhZmVhcy52MWJldGExLnZ1bG5lcmFiaWxpdHkuVnVsbmVy",
            "YWJpbGl0eS5XaW5kb3dzRGV0YWlsLktub3dsZWRnZUJhc2UaKgoNS25vd2xl",
            "ZGdlQmFzZRIMCgRuYW1lGAEgASgJEgsKA3VybBgCIAEoCSLXAgoHRGV0YWls",
            "cxIMCgR0eXBlGAEgASgJEjkKCHNldmVyaXR5GAIgASgOMicuZ3JhZmVhcy52",
            "MWJldGExLnZ1bG5lcmFiaWxpdHkuU2V2ZXJpdHkSEgoKY3Zzc19zY29yZRgD",
            "IAEoAhJCCg1wYWNrYWdlX2lzc3VlGAQgAygLMisuZ3JhZmVhcy52MWJldGEx",
            "LnZ1bG5lcmFiaWxpdHkuUGFja2FnZUlzc3VlEhkKEXNob3J0X2Rlc2NyaXB0",
            "aW9uGAUgASgJEhgKEGxvbmdfZGVzY3JpcHRpb24YBiABKAkSMQoMcmVsYXRl",
            "ZF91cmxzGAcgAygLMhsuZ3JhZmVhcy52MWJldGExLlJlbGF0ZWRVcmwSQwoS",
            "ZWZmZWN0aXZlX3NldmVyaXR5GAggASgOMicuZ3JhZmVhcy52MWJldGExLnZ1",
            "bG5lcmFiaWxpdHkuU2V2ZXJpdHkixAEKDFBhY2thZ2VJc3N1ZRJPChFhZmZl",
            "Y3RlZF9sb2NhdGlvbhgBIAEoCzI0LmdyYWZlYXMudjFiZXRhMS52dWxuZXJh",
            "YmlsaXR5LlZ1bG5lcmFiaWxpdHlMb2NhdGlvbhJMCg5maXhlZF9sb2NhdGlv",
            "bhgCIAEoCzI0LmdyYWZlYXMudjFiZXRhMS52dWxuZXJhYmlsaXR5LlZ1bG5l",
            "cmFiaWxpdHlMb2NhdGlvbhIVCg1zZXZlcml0eV9uYW1lGAMgASgJImwKFVZ1",
            "bG5lcmFiaWxpdHlMb2NhdGlvbhIPCgdjcGVfdXJpGAEgASgJEg8KB3BhY2th",
            "Z2UYAiABKAkSMQoHdmVyc2lvbhgDIAEoCzIgLmdyYWZlYXMudjFiZXRhMS5w",
            "YWNrYWdlLlZlcnNpb24qXgoIU2V2ZXJpdHkSGAoUU0VWRVJJVFlfVU5TUEVD",
            "SUZJRUQQABILCgdNSU5JTUFMEAESBwoDTE9XEAISCgoGTUVESVVNEAMSCAoE",
            "SElHSBAEEgwKCENSSVRJQ0FMEAVCkAEKIGlvLmdyYWZlYXMudjFiZXRhMS52",
            "dWxuZXJhYmlsaXR5UAFaZGdvb2dsZS5nb2xhbmcub3JnL2dlbnByb3RvL2dv",
            "b2dsZWFwaXMvZGV2dG9vbHMvY29udGFpbmVyYW5hbHlzaXMvdjFiZXRhMS92",
            "dWxuZXJhYmlsaXR5O3Z1bG5lcmFiaWxpdHmiAgNHUkFiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Protobuf.WellKnownTypes.TimestampReflection.Descriptor, global::Grafeas.V1Beta1.CommonReflection.Descriptor, global::Grafeas.V1Beta1.Vulnerability.CvssReflection.Descriptor, global::Grafeas.V1Beta1.Package.PackageReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Grafeas.V1Beta1.Vulnerability.Severity), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Grafeas.V1Beta1.Vulnerability.Vulnerability), global::Grafeas.V1Beta1.Vulnerability.Vulnerability.Parser, new[]{ "CvssScore", "Severity", "Details", "CvssV3", "WindowsDetails", "SourceUpdateTime" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Grafeas.V1Beta1.Vulnerability.Vulnerability.Types.Detail), global::Grafeas.V1Beta1.Vulnerability.Vulnerability.Types.Detail.Parser, new[]{ "CpeUri", "Package", "MinAffectedVersion", "MaxAffectedVersion", "SeverityName", "Description", "FixedLocation", "PackageType", "IsObsolete", "SourceUpdateTime" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Grafeas.V1Beta1.Vulnerability.Vulnerability.Types.WindowsDetail), global::Grafeas.V1Beta1.Vulnerability.Vulnerability.Types.WindowsDetail.Parser, new[]{ "CpeUri", "Name", "Description", "FixingKbs" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Grafeas.V1Beta1.Vulnerability.Vulnerability.Types.WindowsDetail.Types.KnowledgeBase), global::Grafeas.V1Beta1.Vulnerability.Vulnerability.Types.WindowsDetail.Types.KnowledgeBase.Parser, new[]{ "Name", "Url" }, null, null, null, null)})}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Grafeas.V1Beta1.Vulnerability.Details), global::Grafeas.V1Beta1.Vulnerability.Details.Parser, new[]{ "Type", "Severity", "CvssScore", "PackageIssue", "ShortDescription", "LongDescription", "RelatedUrls", "EffectiveSeverity" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Grafeas.V1Beta1.Vulnerability.PackageIssue), global::Grafeas.V1Beta1.Vulnerability.PackageIssue.Parser, new[]{ "AffectedLocation", "FixedLocation", "SeverityName" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Grafeas.V1Beta1.Vulnerability.VulnerabilityLocation), global::Grafeas.V1Beta1.Vulnerability.VulnerabilityLocation.Parser, new[]{ "CpeUri", "Package", "Version" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  /// <summary>
  /// Note provider-assigned severity/impact ranking.
  /// </summary>
  public enum Severity {
    /// <summary>
    /// Unknown.
    /// </summary>
    [pbr::OriginalName("SEVERITY_UNSPECIFIED")] Unspecified = 0,
    /// <summary>
    /// Minimal severity.
    /// </summary>
    [pbr::OriginalName("MINIMAL")] Minimal = 1,
    /// <summary>
    /// Low severity.
    /// </summary>
    [pbr::OriginalName("LOW")] Low = 2,
    /// <summary>
    /// Medium severity.
    /// </summary>
    [pbr::OriginalName("MEDIUM")] Medium = 3,
    /// <summary>
    /// High severity.
    /// </summary>
    [pbr::OriginalName("HIGH")] High = 4,
    /// <summary>
    /// Critical severity.
    /// </summary>
    [pbr::OriginalName("CRITICAL")] Critical = 5,
  }

  #endregion

  #region Messages
  /// <summary>
  /// Vulnerability provides metadata about a security vulnerability in a Note.
  /// </summary>
  public sealed partial class Vulnerability : pb::IMessage<Vulnerability> {
    private static readonly pb::MessageParser<Vulnerability> _parser = new pb::MessageParser<Vulnerability>(() => new Vulnerability());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Vulnerability> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Grafeas.V1Beta1.Vulnerability.VulnerabilityReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vulnerability() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vulnerability(Vulnerability other) : this() {
      cvssScore_ = other.cvssScore_;
      severity_ = other.severity_;
      details_ = other.details_.Clone();
      cvssV3_ = other.cvssV3_ != null ? other.cvssV3_.Clone() : null;
      windowsDetails_ = other.windowsDetails_.Clone();
      sourceUpdateTime_ = other.sourceUpdateTime_ != null ? other.sourceUpdateTime_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vulnerability Clone() {
      return new Vulnerability(this);
    }

    /// <summary>Field number for the "cvss_score" field.</summary>
    public const int CvssScoreFieldNumber = 1;
    private float cvssScore_;
    /// <summary>
    /// The CVSS score for this vulnerability.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float CvssScore {
      get { return cvssScore_; }
      set {
        cvssScore_ = value;
      }
    }

    /// <summary>Field number for the "severity" field.</summary>
    public const int SeverityFieldNumber = 2;
    private global::Grafeas.V1Beta1.Vulnerability.Severity severity_ = global::Grafeas.V1Beta1.Vulnerability.Severity.Unspecified;
    /// <summary>
    /// Note provider assigned impact of the vulnerability.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Grafeas.V1Beta1.Vulnerability.Severity Severity {
      get { return severity_; }
      set {
        severity_ = value;
      }
    }

    /// <summary>Field number for the "details" field.</summary>
    public const int DetailsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Grafeas.V1Beta1.Vulnerability.Vulnerability.Types.Detail> _repeated_details_codec
        = pb::FieldCodec.ForMessage(26, global::Grafeas.V1Beta1.Vulnerability.Vulnerability.Types.Detail.Parser);
    private readonly pbc::RepeatedField<global::Grafeas.V1Beta1.Vulnerability.Vulnerability.Types.Detail> details_ = new pbc::RepeatedField<global::Grafeas.V1Beta1.Vulnerability.Vulnerability.Types.Detail>();
    /// <summary>
    /// All information about the package to specifically identify this
    /// vulnerability. One entry per (version range and cpe_uri) the package
    /// vulnerability has manifested in.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Grafeas.V1Beta1.Vulnerability.Vulnerability.Types.Detail> Details {
      get { return details_; }
    }

    /// <summary>Field number for the "cvss_v3" field.</summary>
    public const int CvssV3FieldNumber = 4;
    private global::Grafeas.V1Beta1.Vulnerability.CVSSv3 cvssV3_;
    /// <summary>
    /// The full description of the CVSSv3.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Grafeas.V1Beta1.Vulnerability.CVSSv3 CvssV3 {
      get { return cvssV3_; }
      set {
        cvssV3_ = value;
      }
    }

    /// <summary>Field number for the "windows_details" field.</summary>
    public const int WindowsDetailsFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Grafeas.V1Beta1.Vulnerability.Vulnerability.Types.WindowsDetail> _repeated_windowsDetails_codec
        = pb::FieldCodec.ForMessage(42, global::Grafeas.V1Beta1.Vulnerability.Vulnerability.Types.WindowsDetail.Parser);
    private readonly pbc::RepeatedField<global::Grafeas.V1Beta1.Vulnerability.Vulnerability.Types.WindowsDetail> windowsDetails_ = new pbc::RepeatedField<global::Grafeas.V1Beta1.Vulnerability.Vulnerability.Types.WindowsDetail>();
    /// <summary>
    /// Windows details get their own format because the information format and
    /// model don't match a normal detail. Specifically Windows updates are done as
    /// patches, thus Windows vulnerabilities really are a missing package, rather
    /// than a package being at an incorrect version.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Grafeas.V1Beta1.Vulnerability.Vulnerability.Types.WindowsDetail> WindowsDetails {
      get { return windowsDetails_; }
    }

    /// <summary>Field number for the "source_update_time" field.</summary>
    public const int SourceUpdateTimeFieldNumber = 6;
    private global::Google.Protobuf.WellKnownTypes.Timestamp sourceUpdateTime_;
    /// <summary>
    /// The time this information was last changed at the source. This is an
    /// upstream timestamp from the underlying information source - e.g. Ubuntu
    /// security tracker.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp SourceUpdateTime {
      get { return sourceUpdateTime_; }
      set {
        sourceUpdateTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Vulnerability);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Vulnerability other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(CvssScore, other.CvssScore)) return false;
      if (Severity != other.Severity) return false;
      if(!details_.Equals(other.details_)) return false;
      if (!object.Equals(CvssV3, other.CvssV3)) return false;
      if(!windowsDetails_.Equals(other.windowsDetails_)) return false;
      if (!object.Equals(SourceUpdateTime, other.SourceUpdateTime)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CvssScore != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(CvssScore);
      if (Severity != global::Grafeas.V1Beta1.Vulnerability.Severity.Unspecified) hash ^= Severity.GetHashCode();
      hash ^= details_.GetHashCode();
      if (cvssV3_ != null) hash ^= CvssV3.GetHashCode();
      hash ^= windowsDetails_.GetHashCode();
      if (sourceUpdateTime_ != null) hash ^= SourceUpdateTime.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CvssScore != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(CvssScore);
      }
      if (Severity != global::Grafeas.V1Beta1.Vulnerability.Severity.Unspecified) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Severity);
      }
      details_.WriteTo(output, _repeated_details_codec);
      if (cvssV3_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(CvssV3);
      }
      windowsDetails_.WriteTo(output, _repeated_windowsDetails_codec);
      if (sourceUpdateTime_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(SourceUpdateTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CvssScore != 0F) {
        size += 1 + 4;
      }
      if (Severity != global::Grafeas.V1Beta1.Vulnerability.Severity.Unspecified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Severity);
      }
      size += details_.CalculateSize(_repeated_details_codec);
      if (cvssV3_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CvssV3);
      }
      size += windowsDetails_.CalculateSize(_repeated_windowsDetails_codec);
      if (sourceUpdateTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SourceUpdateTime);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Vulnerability other) {
      if (other == null) {
        return;
      }
      if (other.CvssScore != 0F) {
        CvssScore = other.CvssScore;
      }
      if (other.Severity != global::Grafeas.V1Beta1.Vulnerability.Severity.Unspecified) {
        Severity = other.Severity;
      }
      details_.Add(other.details_);
      if (other.cvssV3_ != null) {
        if (cvssV3_ == null) {
          CvssV3 = new global::Grafeas.V1Beta1.Vulnerability.CVSSv3();
        }
        CvssV3.MergeFrom(other.CvssV3);
      }
      windowsDetails_.Add(other.windowsDetails_);
      if (other.sourceUpdateTime_ != null) {
        if (sourceUpdateTime_ == null) {
          SourceUpdateTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        SourceUpdateTime.MergeFrom(other.SourceUpdateTime);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            CvssScore = input.ReadFloat();
            break;
          }
          case 16: {
            Severity = (global::Grafeas.V1Beta1.Vulnerability.Severity) input.ReadEnum();
            break;
          }
          case 26: {
            details_.AddEntriesFrom(input, _repeated_details_codec);
            break;
          }
          case 34: {
            if (cvssV3_ == null) {
              CvssV3 = new global::Grafeas.V1Beta1.Vulnerability.CVSSv3();
            }
            input.ReadMessage(CvssV3);
            break;
          }
          case 42: {
            windowsDetails_.AddEntriesFrom(input, _repeated_windowsDetails_codec);
            break;
          }
          case 50: {
            if (sourceUpdateTime_ == null) {
              SourceUpdateTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(SourceUpdateTime);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Vulnerability message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// Identifies all appearances of this vulnerability in the package for a
      /// specific distro/location. For example: glibc in
      /// cpe:/o:debian:debian_linux:8 for versions 2.1 - 2.2
      /// </summary>
      public sealed partial class Detail : pb::IMessage<Detail> {
        private static readonly pb::MessageParser<Detail> _parser = new pb::MessageParser<Detail>(() => new Detail());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Detail> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Grafeas.V1Beta1.Vulnerability.Vulnerability.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Detail() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Detail(Detail other) : this() {
          cpeUri_ = other.cpeUri_;
          package_ = other.package_;
          minAffectedVersion_ = other.minAffectedVersion_ != null ? other.minAffectedVersion_.Clone() : null;
          maxAffectedVersion_ = other.maxAffectedVersion_ != null ? other.maxAffectedVersion_.Clone() : null;
          severityName_ = other.severityName_;
          description_ = other.description_;
          fixedLocation_ = other.fixedLocation_ != null ? other.fixedLocation_.Clone() : null;
          packageType_ = other.packageType_;
          isObsolete_ = other.isObsolete_;
          sourceUpdateTime_ = other.sourceUpdateTime_ != null ? other.sourceUpdateTime_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Detail Clone() {
          return new Detail(this);
        }

        /// <summary>Field number for the "cpe_uri" field.</summary>
        public const int CpeUriFieldNumber = 1;
        private string cpeUri_ = "";
        /// <summary>
        /// Required. The CPE URI in
        /// [cpe format](https://cpe.mitre.org/specification/) in which the
        /// vulnerability manifests. Examples include distro or storage location for
        /// vulnerable jar.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string CpeUri {
          get { return cpeUri_; }
          set {
            cpeUri_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "package" field.</summary>
        public const int PackageFieldNumber = 2;
        private string package_ = "";
        /// <summary>
        /// Required. The name of the package where the vulnerability was found.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Package {
          get { return package_; }
          set {
            package_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "min_affected_version" field.</summary>
        public const int MinAffectedVersionFieldNumber = 3;
        private global::Grafeas.V1Beta1.Package.Version minAffectedVersion_;
        /// <summary>
        /// The min version of the package in which the vulnerability exists.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Grafeas.V1Beta1.Package.Version MinAffectedVersion {
          get { return minAffectedVersion_; }
          set {
            minAffectedVersion_ = value;
          }
        }

        /// <summary>Field number for the "max_affected_version" field.</summary>
        public const int MaxAffectedVersionFieldNumber = 4;
        private global::Grafeas.V1Beta1.Package.Version maxAffectedVersion_;
        /// <summary>
        /// The max version of the package in which the vulnerability exists.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Grafeas.V1Beta1.Package.Version MaxAffectedVersion {
          get { return maxAffectedVersion_; }
          set {
            maxAffectedVersion_ = value;
          }
        }

        /// <summary>Field number for the "severity_name" field.</summary>
        public const int SeverityNameFieldNumber = 5;
        private string severityName_ = "";
        /// <summary>
        /// The severity (eg: distro assigned severity) for this vulnerability.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string SeverityName {
          get { return severityName_; }
          set {
            severityName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "description" field.</summary>
        public const int DescriptionFieldNumber = 6;
        private string description_ = "";
        /// <summary>
        /// A vendor-specific description of this note.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Description {
          get { return description_; }
          set {
            description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "fixed_location" field.</summary>
        public const int FixedLocationFieldNumber = 7;
        private global::Grafeas.V1Beta1.Vulnerability.VulnerabilityLocation fixedLocation_;
        /// <summary>
        /// The fix for this specific package version.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Grafeas.V1Beta1.Vulnerability.VulnerabilityLocation FixedLocation {
          get { return fixedLocation_; }
          set {
            fixedLocation_ = value;
          }
        }

        /// <summary>Field number for the "package_type" field.</summary>
        public const int PackageTypeFieldNumber = 8;
        private string packageType_ = "";
        /// <summary>
        /// The type of package; whether native or non native(ruby gems, node.js
        /// packages etc).
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string PackageType {
          get { return packageType_; }
          set {
            packageType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "is_obsolete" field.</summary>
        public const int IsObsoleteFieldNumber = 9;
        private bool isObsolete_;
        /// <summary>
        /// Whether this detail is obsolete. Occurrences are expected not to point to
        /// obsolete details.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool IsObsolete {
          get { return isObsolete_; }
          set {
            isObsolete_ = value;
          }
        }

        /// <summary>Field number for the "source_update_time" field.</summary>
        public const int SourceUpdateTimeFieldNumber = 10;
        private global::Google.Protobuf.WellKnownTypes.Timestamp sourceUpdateTime_;
        /// <summary>
        /// The time this information was last changed at the source. This is an
        /// upstream timestamp from the underlying information source - e.g. Ubuntu
        /// security tracker.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Google.Protobuf.WellKnownTypes.Timestamp SourceUpdateTime {
          get { return sourceUpdateTime_; }
          set {
            sourceUpdateTime_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Detail);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Detail other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (CpeUri != other.CpeUri) return false;
          if (Package != other.Package) return false;
          if (!object.Equals(MinAffectedVersion, other.MinAffectedVersion)) return false;
          if (!object.Equals(MaxAffectedVersion, other.MaxAffectedVersion)) return false;
          if (SeverityName != other.SeverityName) return false;
          if (Description != other.Description) return false;
          if (!object.Equals(FixedLocation, other.FixedLocation)) return false;
          if (PackageType != other.PackageType) return false;
          if (IsObsolete != other.IsObsolete) return false;
          if (!object.Equals(SourceUpdateTime, other.SourceUpdateTime)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (CpeUri.Length != 0) hash ^= CpeUri.GetHashCode();
          if (Package.Length != 0) hash ^= Package.GetHashCode();
          if (minAffectedVersion_ != null) hash ^= MinAffectedVersion.GetHashCode();
          if (maxAffectedVersion_ != null) hash ^= MaxAffectedVersion.GetHashCode();
          if (SeverityName.Length != 0) hash ^= SeverityName.GetHashCode();
          if (Description.Length != 0) hash ^= Description.GetHashCode();
          if (fixedLocation_ != null) hash ^= FixedLocation.GetHashCode();
          if (PackageType.Length != 0) hash ^= PackageType.GetHashCode();
          if (IsObsolete != false) hash ^= IsObsolete.GetHashCode();
          if (sourceUpdateTime_ != null) hash ^= SourceUpdateTime.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (CpeUri.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(CpeUri);
          }
          if (Package.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(Package);
          }
          if (minAffectedVersion_ != null) {
            output.WriteRawTag(26);
            output.WriteMessage(MinAffectedVersion);
          }
          if (maxAffectedVersion_ != null) {
            output.WriteRawTag(34);
            output.WriteMessage(MaxAffectedVersion);
          }
          if (SeverityName.Length != 0) {
            output.WriteRawTag(42);
            output.WriteString(SeverityName);
          }
          if (Description.Length != 0) {
            output.WriteRawTag(50);
            output.WriteString(Description);
          }
          if (fixedLocation_ != null) {
            output.WriteRawTag(58);
            output.WriteMessage(FixedLocation);
          }
          if (PackageType.Length != 0) {
            output.WriteRawTag(66);
            output.WriteString(PackageType);
          }
          if (IsObsolete != false) {
            output.WriteRawTag(72);
            output.WriteBool(IsObsolete);
          }
          if (sourceUpdateTime_ != null) {
            output.WriteRawTag(82);
            output.WriteMessage(SourceUpdateTime);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (CpeUri.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(CpeUri);
          }
          if (Package.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Package);
          }
          if (minAffectedVersion_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(MinAffectedVersion);
          }
          if (maxAffectedVersion_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(MaxAffectedVersion);
          }
          if (SeverityName.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(SeverityName);
          }
          if (Description.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
          }
          if (fixedLocation_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(FixedLocation);
          }
          if (PackageType.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(PackageType);
          }
          if (IsObsolete != false) {
            size += 1 + 1;
          }
          if (sourceUpdateTime_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(SourceUpdateTime);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Detail other) {
          if (other == null) {
            return;
          }
          if (other.CpeUri.Length != 0) {
            CpeUri = other.CpeUri;
          }
          if (other.Package.Length != 0) {
            Package = other.Package;
          }
          if (other.minAffectedVersion_ != null) {
            if (minAffectedVersion_ == null) {
              MinAffectedVersion = new global::Grafeas.V1Beta1.Package.Version();
            }
            MinAffectedVersion.MergeFrom(other.MinAffectedVersion);
          }
          if (other.maxAffectedVersion_ != null) {
            if (maxAffectedVersion_ == null) {
              MaxAffectedVersion = new global::Grafeas.V1Beta1.Package.Version();
            }
            MaxAffectedVersion.MergeFrom(other.MaxAffectedVersion);
          }
          if (other.SeverityName.Length != 0) {
            SeverityName = other.SeverityName;
          }
          if (other.Description.Length != 0) {
            Description = other.Description;
          }
          if (other.fixedLocation_ != null) {
            if (fixedLocation_ == null) {
              FixedLocation = new global::Grafeas.V1Beta1.Vulnerability.VulnerabilityLocation();
            }
            FixedLocation.MergeFrom(other.FixedLocation);
          }
          if (other.PackageType.Length != 0) {
            PackageType = other.PackageType;
          }
          if (other.IsObsolete != false) {
            IsObsolete = other.IsObsolete;
          }
          if (other.sourceUpdateTime_ != null) {
            if (sourceUpdateTime_ == null) {
              SourceUpdateTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            SourceUpdateTime.MergeFrom(other.SourceUpdateTime);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                CpeUri = input.ReadString();
                break;
              }
              case 18: {
                Package = input.ReadString();
                break;
              }
              case 26: {
                if (minAffectedVersion_ == null) {
                  MinAffectedVersion = new global::Grafeas.V1Beta1.Package.Version();
                }
                input.ReadMessage(MinAffectedVersion);
                break;
              }
              case 34: {
                if (maxAffectedVersion_ == null) {
                  MaxAffectedVersion = new global::Grafeas.V1Beta1.Package.Version();
                }
                input.ReadMessage(MaxAffectedVersion);
                break;
              }
              case 42: {
                SeverityName = input.ReadString();
                break;
              }
              case 50: {
                Description = input.ReadString();
                break;
              }
              case 58: {
                if (fixedLocation_ == null) {
                  FixedLocation = new global::Grafeas.V1Beta1.Vulnerability.VulnerabilityLocation();
                }
                input.ReadMessage(FixedLocation);
                break;
              }
              case 66: {
                PackageType = input.ReadString();
                break;
              }
              case 72: {
                IsObsolete = input.ReadBool();
                break;
              }
              case 82: {
                if (sourceUpdateTime_ == null) {
                  SourceUpdateTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
                }
                input.ReadMessage(SourceUpdateTime);
                break;
              }
            }
          }
        }

      }

      public sealed partial class WindowsDetail : pb::IMessage<WindowsDetail> {
        private static readonly pb::MessageParser<WindowsDetail> _parser = new pb::MessageParser<WindowsDetail>(() => new WindowsDetail());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<WindowsDetail> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Grafeas.V1Beta1.Vulnerability.Vulnerability.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public WindowsDetail() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public WindowsDetail(WindowsDetail other) : this() {
          cpeUri_ = other.cpeUri_;
          name_ = other.name_;
          description_ = other.description_;
          fixingKbs_ = other.fixingKbs_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public WindowsDetail Clone() {
          return new WindowsDetail(this);
        }

        /// <summary>Field number for the "cpe_uri" field.</summary>
        public const int CpeUriFieldNumber = 1;
        private string cpeUri_ = "";
        /// <summary>
        /// Required. The CPE URI in
        /// [cpe format](https://cpe.mitre.org/specification/) in which the
        /// vulnerability manifests. Examples include distro or storage location for
        /// vulnerable jar.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string CpeUri {
          get { return cpeUri_; }
          set {
            cpeUri_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "name" field.</summary>
        public const int NameFieldNumber = 2;
        private string name_ = "";
        /// <summary>
        /// Required. The name of the vulnerability.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Name {
          get { return name_; }
          set {
            name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "description" field.</summary>
        public const int DescriptionFieldNumber = 3;
        private string description_ = "";
        /// <summary>
        /// The description of the vulnerability.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Description {
          get { return description_; }
          set {
            description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "fixing_kbs" field.</summary>
        public const int FixingKbsFieldNumber = 4;
        private static readonly pb::FieldCodec<global::Grafeas.V1Beta1.Vulnerability.Vulnerability.Types.WindowsDetail.Types.KnowledgeBase> _repeated_fixingKbs_codec
            = pb::FieldCodec.ForMessage(34, global::Grafeas.V1Beta1.Vulnerability.Vulnerability.Types.WindowsDetail.Types.KnowledgeBase.Parser);
        private readonly pbc::RepeatedField<global::Grafeas.V1Beta1.Vulnerability.Vulnerability.Types.WindowsDetail.Types.KnowledgeBase> fixingKbs_ = new pbc::RepeatedField<global::Grafeas.V1Beta1.Vulnerability.Vulnerability.Types.WindowsDetail.Types.KnowledgeBase>();
        /// <summary>
        /// Required. The names of the KBs which have hotfixes to mitigate this
        /// vulnerability. Note that there may be multiple hotfixes (and thus
        /// multiple KBs) that mitigate a given vulnerability. Currently any listed
        /// kb's presence is considered a fix.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Grafeas.V1Beta1.Vulnerability.Vulnerability.Types.WindowsDetail.Types.KnowledgeBase> FixingKbs {
          get { return fixingKbs_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as WindowsDetail);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(WindowsDetail other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (CpeUri != other.CpeUri) return false;
          if (Name != other.Name) return false;
          if (Description != other.Description) return false;
          if(!fixingKbs_.Equals(other.fixingKbs_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (CpeUri.Length != 0) hash ^= CpeUri.GetHashCode();
          if (Name.Length != 0) hash ^= Name.GetHashCode();
          if (Description.Length != 0) hash ^= Description.GetHashCode();
          hash ^= fixingKbs_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (CpeUri.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(CpeUri);
          }
          if (Name.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(Name);
          }
          if (Description.Length != 0) {
            output.WriteRawTag(26);
            output.WriteString(Description);
          }
          fixingKbs_.WriteTo(output, _repeated_fixingKbs_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (CpeUri.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(CpeUri);
          }
          if (Name.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
          }
          if (Description.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
          }
          size += fixingKbs_.CalculateSize(_repeated_fixingKbs_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(WindowsDetail other) {
          if (other == null) {
            return;
          }
          if (other.CpeUri.Length != 0) {
            CpeUri = other.CpeUri;
          }
          if (other.Name.Length != 0) {
            Name = other.Name;
          }
          if (other.Description.Length != 0) {
            Description = other.Description;
          }
          fixingKbs_.Add(other.fixingKbs_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                CpeUri = input.ReadString();
                break;
              }
              case 18: {
                Name = input.ReadString();
                break;
              }
              case 26: {
                Description = input.ReadString();
                break;
              }
              case 34: {
                fixingKbs_.AddEntriesFrom(input, _repeated_fixingKbs_codec);
                break;
              }
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the WindowsDetail message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          public sealed partial class KnowledgeBase : pb::IMessage<KnowledgeBase> {
            private static readonly pb::MessageParser<KnowledgeBase> _parser = new pb::MessageParser<KnowledgeBase>(() => new KnowledgeBase());
            private pb::UnknownFieldSet _unknownFields;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<KnowledgeBase> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::Grafeas.V1Beta1.Vulnerability.Vulnerability.Types.WindowsDetail.Descriptor.NestedTypes[0]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public KnowledgeBase() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public KnowledgeBase(KnowledgeBase other) : this() {
              name_ = other.name_;
              url_ = other.url_;
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public KnowledgeBase Clone() {
              return new KnowledgeBase(this);
            }

            /// <summary>Field number for the "name" field.</summary>
            public const int NameFieldNumber = 1;
            private string name_ = "";
            /// <summary>
            /// The KB name (generally of the form KB[0-9]+ i.e. KB123456).
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public string Name {
              get { return name_; }
              set {
                name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }

            /// <summary>Field number for the "url" field.</summary>
            public const int UrlFieldNumber = 2;
            private string url_ = "";
            /// <summary>
            /// A link to the KB in the Windows update catalog -
            /// https://www.catalog.update.microsoft.com/
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public string Url {
              get { return url_; }
              set {
                url_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as KnowledgeBase);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(KnowledgeBase other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (Name != other.Name) return false;
              if (Url != other.Url) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (Name.Length != 0) hash ^= Name.GetHashCode();
              if (Url.Length != 0) hash ^= Url.GetHashCode();
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              if (Name.Length != 0) {
                output.WriteRawTag(10);
                output.WriteString(Name);
              }
              if (Url.Length != 0) {
                output.WriteRawTag(18);
                output.WriteString(Url);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (Name.Length != 0) {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
              }
              if (Url.Length != 0) {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Url);
              }
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(KnowledgeBase other) {
              if (other == null) {
                return;
              }
              if (other.Name.Length != 0) {
                Name = other.Name;
              }
              if (other.Url.Length != 0) {
                Url = other.Url;
              }
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 10: {
                    Name = input.ReadString();
                    break;
                  }
                  case 18: {
                    Url = input.ReadString();
                    break;
                  }
                }
              }
            }

          }

        }
        #endregion

      }

    }
    #endregion

  }

  /// <summary>
  /// Details of a vulnerability Occurrence.
  /// </summary>
  public sealed partial class Details : pb::IMessage<Details> {
    private static readonly pb::MessageParser<Details> _parser = new pb::MessageParser<Details>(() => new Details());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Details> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Grafeas.V1Beta1.Vulnerability.VulnerabilityReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Details() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Details(Details other) : this() {
      type_ = other.type_;
      severity_ = other.severity_;
      cvssScore_ = other.cvssScore_;
      packageIssue_ = other.packageIssue_.Clone();
      shortDescription_ = other.shortDescription_;
      longDescription_ = other.longDescription_;
      relatedUrls_ = other.relatedUrls_.Clone();
      effectiveSeverity_ = other.effectiveSeverity_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Details Clone() {
      return new Details(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private string type_ = "";
    /// <summary>
    /// The type of package; whether native or non native(ruby gems, node.js
    /// packages etc)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Type {
      get { return type_; }
      set {
        type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "severity" field.</summary>
    public const int SeverityFieldNumber = 2;
    private global::Grafeas.V1Beta1.Vulnerability.Severity severity_ = global::Grafeas.V1Beta1.Vulnerability.Severity.Unspecified;
    /// <summary>
    /// Output only. The note provider assigned Severity of the vulnerability.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Grafeas.V1Beta1.Vulnerability.Severity Severity {
      get { return severity_; }
      set {
        severity_ = value;
      }
    }

    /// <summary>Field number for the "cvss_score" field.</summary>
    public const int CvssScoreFieldNumber = 3;
    private float cvssScore_;
    /// <summary>
    /// Output only. The CVSS score of this vulnerability. CVSS score is on a
    /// scale of 0-10 where 0 indicates low severity and 10 indicates high
    /// severity.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float CvssScore {
      get { return cvssScore_; }
      set {
        cvssScore_ = value;
      }
    }

    /// <summary>Field number for the "package_issue" field.</summary>
    public const int PackageIssueFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Grafeas.V1Beta1.Vulnerability.PackageIssue> _repeated_packageIssue_codec
        = pb::FieldCodec.ForMessage(34, global::Grafeas.V1Beta1.Vulnerability.PackageIssue.Parser);
    private readonly pbc::RepeatedField<global::Grafeas.V1Beta1.Vulnerability.PackageIssue> packageIssue_ = new pbc::RepeatedField<global::Grafeas.V1Beta1.Vulnerability.PackageIssue>();
    /// <summary>
    /// Required. The set of affected locations and their fixes (if available)
    /// within the associated resource.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Grafeas.V1Beta1.Vulnerability.PackageIssue> PackageIssue {
      get { return packageIssue_; }
    }

    /// <summary>Field number for the "short_description" field.</summary>
    public const int ShortDescriptionFieldNumber = 5;
    private string shortDescription_ = "";
    /// <summary>
    /// Output only. A one sentence description of this vulnerability.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ShortDescription {
      get { return shortDescription_; }
      set {
        shortDescription_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "long_description" field.</summary>
    public const int LongDescriptionFieldNumber = 6;
    private string longDescription_ = "";
    /// <summary>
    /// Output only. A detailed description of this vulnerability.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LongDescription {
      get { return longDescription_; }
      set {
        longDescription_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "related_urls" field.</summary>
    public const int RelatedUrlsFieldNumber = 7;
    private static readonly pb::FieldCodec<global::Grafeas.V1Beta1.RelatedUrl> _repeated_relatedUrls_codec
        = pb::FieldCodec.ForMessage(58, global::Grafeas.V1Beta1.RelatedUrl.Parser);
    private readonly pbc::RepeatedField<global::Grafeas.V1Beta1.RelatedUrl> relatedUrls_ = new pbc::RepeatedField<global::Grafeas.V1Beta1.RelatedUrl>();
    /// <summary>
    /// Output only. URLs related to this vulnerability.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Grafeas.V1Beta1.RelatedUrl> RelatedUrls {
      get { return relatedUrls_; }
    }

    /// <summary>Field number for the "effective_severity" field.</summary>
    public const int EffectiveSeverityFieldNumber = 8;
    private global::Grafeas.V1Beta1.Vulnerability.Severity effectiveSeverity_ = global::Grafeas.V1Beta1.Vulnerability.Severity.Unspecified;
    /// <summary>
    /// The distro assigned severity for this vulnerability when it is
    /// available, and note provider assigned severity when distro has not yet
    /// assigned a severity for this vulnerability.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Grafeas.V1Beta1.Vulnerability.Severity EffectiveSeverity {
      get { return effectiveSeverity_; }
      set {
        effectiveSeverity_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Details);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Details other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (Severity != other.Severity) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(CvssScore, other.CvssScore)) return false;
      if(!packageIssue_.Equals(other.packageIssue_)) return false;
      if (ShortDescription != other.ShortDescription) return false;
      if (LongDescription != other.LongDescription) return false;
      if(!relatedUrls_.Equals(other.relatedUrls_)) return false;
      if (EffectiveSeverity != other.EffectiveSeverity) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type.Length != 0) hash ^= Type.GetHashCode();
      if (Severity != global::Grafeas.V1Beta1.Vulnerability.Severity.Unspecified) hash ^= Severity.GetHashCode();
      if (CvssScore != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(CvssScore);
      hash ^= packageIssue_.GetHashCode();
      if (ShortDescription.Length != 0) hash ^= ShortDescription.GetHashCode();
      if (LongDescription.Length != 0) hash ^= LongDescription.GetHashCode();
      hash ^= relatedUrls_.GetHashCode();
      if (EffectiveSeverity != global::Grafeas.V1Beta1.Vulnerability.Severity.Unspecified) hash ^= EffectiveSeverity.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Type);
      }
      if (Severity != global::Grafeas.V1Beta1.Vulnerability.Severity.Unspecified) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Severity);
      }
      if (CvssScore != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(CvssScore);
      }
      packageIssue_.WriteTo(output, _repeated_packageIssue_codec);
      if (ShortDescription.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(ShortDescription);
      }
      if (LongDescription.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(LongDescription);
      }
      relatedUrls_.WriteTo(output, _repeated_relatedUrls_codec);
      if (EffectiveSeverity != global::Grafeas.V1Beta1.Vulnerability.Severity.Unspecified) {
        output.WriteRawTag(64);
        output.WriteEnum((int) EffectiveSeverity);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Type);
      }
      if (Severity != global::Grafeas.V1Beta1.Vulnerability.Severity.Unspecified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Severity);
      }
      if (CvssScore != 0F) {
        size += 1 + 4;
      }
      size += packageIssue_.CalculateSize(_repeated_packageIssue_codec);
      if (ShortDescription.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ShortDescription);
      }
      if (LongDescription.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LongDescription);
      }
      size += relatedUrls_.CalculateSize(_repeated_relatedUrls_codec);
      if (EffectiveSeverity != global::Grafeas.V1Beta1.Vulnerability.Severity.Unspecified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) EffectiveSeverity);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Details other) {
      if (other == null) {
        return;
      }
      if (other.Type.Length != 0) {
        Type = other.Type;
      }
      if (other.Severity != global::Grafeas.V1Beta1.Vulnerability.Severity.Unspecified) {
        Severity = other.Severity;
      }
      if (other.CvssScore != 0F) {
        CvssScore = other.CvssScore;
      }
      packageIssue_.Add(other.packageIssue_);
      if (other.ShortDescription.Length != 0) {
        ShortDescription = other.ShortDescription;
      }
      if (other.LongDescription.Length != 0) {
        LongDescription = other.LongDescription;
      }
      relatedUrls_.Add(other.relatedUrls_);
      if (other.EffectiveSeverity != global::Grafeas.V1Beta1.Vulnerability.Severity.Unspecified) {
        EffectiveSeverity = other.EffectiveSeverity;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Type = input.ReadString();
            break;
          }
          case 16: {
            Severity = (global::Grafeas.V1Beta1.Vulnerability.Severity) input.ReadEnum();
            break;
          }
          case 29: {
            CvssScore = input.ReadFloat();
            break;
          }
          case 34: {
            packageIssue_.AddEntriesFrom(input, _repeated_packageIssue_codec);
            break;
          }
          case 42: {
            ShortDescription = input.ReadString();
            break;
          }
          case 50: {
            LongDescription = input.ReadString();
            break;
          }
          case 58: {
            relatedUrls_.AddEntriesFrom(input, _repeated_relatedUrls_codec);
            break;
          }
          case 64: {
            EffectiveSeverity = (global::Grafeas.V1Beta1.Vulnerability.Severity) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// This message wraps a location affected by a vulnerability and its
  /// associated fix (if one is available).
  /// </summary>
  public sealed partial class PackageIssue : pb::IMessage<PackageIssue> {
    private static readonly pb::MessageParser<PackageIssue> _parser = new pb::MessageParser<PackageIssue>(() => new PackageIssue());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PackageIssue> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Grafeas.V1Beta1.Vulnerability.VulnerabilityReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PackageIssue() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PackageIssue(PackageIssue other) : this() {
      affectedLocation_ = other.affectedLocation_ != null ? other.affectedLocation_.Clone() : null;
      fixedLocation_ = other.fixedLocation_ != null ? other.fixedLocation_.Clone() : null;
      severityName_ = other.severityName_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PackageIssue Clone() {
      return new PackageIssue(this);
    }

    /// <summary>Field number for the "affected_location" field.</summary>
    public const int AffectedLocationFieldNumber = 1;
    private global::Grafeas.V1Beta1.Vulnerability.VulnerabilityLocation affectedLocation_;
    /// <summary>
    /// Required. The location of the vulnerability.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Grafeas.V1Beta1.Vulnerability.VulnerabilityLocation AffectedLocation {
      get { return affectedLocation_; }
      set {
        affectedLocation_ = value;
      }
    }

    /// <summary>Field number for the "fixed_location" field.</summary>
    public const int FixedLocationFieldNumber = 2;
    private global::Grafeas.V1Beta1.Vulnerability.VulnerabilityLocation fixedLocation_;
    /// <summary>
    /// The location of the available fix for vulnerability.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Grafeas.V1Beta1.Vulnerability.VulnerabilityLocation FixedLocation {
      get { return fixedLocation_; }
      set {
        fixedLocation_ = value;
      }
    }

    /// <summary>Field number for the "severity_name" field.</summary>
    public const int SeverityNameFieldNumber = 3;
    private string severityName_ = "";
    /// <summary>
    /// Deprecated, use Details.effective_severity instead
    /// The severity (e.g., distro assigned severity) for this vulnerability.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SeverityName {
      get { return severityName_; }
      set {
        severityName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PackageIssue);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PackageIssue other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(AffectedLocation, other.AffectedLocation)) return false;
      if (!object.Equals(FixedLocation, other.FixedLocation)) return false;
      if (SeverityName != other.SeverityName) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (affectedLocation_ != null) hash ^= AffectedLocation.GetHashCode();
      if (fixedLocation_ != null) hash ^= FixedLocation.GetHashCode();
      if (SeverityName.Length != 0) hash ^= SeverityName.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (affectedLocation_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(AffectedLocation);
      }
      if (fixedLocation_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(FixedLocation);
      }
      if (SeverityName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(SeverityName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (affectedLocation_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AffectedLocation);
      }
      if (fixedLocation_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FixedLocation);
      }
      if (SeverityName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SeverityName);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PackageIssue other) {
      if (other == null) {
        return;
      }
      if (other.affectedLocation_ != null) {
        if (affectedLocation_ == null) {
          AffectedLocation = new global::Grafeas.V1Beta1.Vulnerability.VulnerabilityLocation();
        }
        AffectedLocation.MergeFrom(other.AffectedLocation);
      }
      if (other.fixedLocation_ != null) {
        if (fixedLocation_ == null) {
          FixedLocation = new global::Grafeas.V1Beta1.Vulnerability.VulnerabilityLocation();
        }
        FixedLocation.MergeFrom(other.FixedLocation);
      }
      if (other.SeverityName.Length != 0) {
        SeverityName = other.SeverityName;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (affectedLocation_ == null) {
              AffectedLocation = new global::Grafeas.V1Beta1.Vulnerability.VulnerabilityLocation();
            }
            input.ReadMessage(AffectedLocation);
            break;
          }
          case 18: {
            if (fixedLocation_ == null) {
              FixedLocation = new global::Grafeas.V1Beta1.Vulnerability.VulnerabilityLocation();
            }
            input.ReadMessage(FixedLocation);
            break;
          }
          case 26: {
            SeverityName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// The location of the vulnerability.
  /// </summary>
  public sealed partial class VulnerabilityLocation : pb::IMessage<VulnerabilityLocation> {
    private static readonly pb::MessageParser<VulnerabilityLocation> _parser = new pb::MessageParser<VulnerabilityLocation>(() => new VulnerabilityLocation());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<VulnerabilityLocation> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Grafeas.V1Beta1.Vulnerability.VulnerabilityReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VulnerabilityLocation() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VulnerabilityLocation(VulnerabilityLocation other) : this() {
      cpeUri_ = other.cpeUri_;
      package_ = other.package_;
      version_ = other.version_ != null ? other.version_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VulnerabilityLocation Clone() {
      return new VulnerabilityLocation(this);
    }

    /// <summary>Field number for the "cpe_uri" field.</summary>
    public const int CpeUriFieldNumber = 1;
    private string cpeUri_ = "";
    /// <summary>
    /// Required. The CPE URI in [cpe format](https://cpe.mitre.org/specification/)
    /// format. Examples include distro or storage location for vulnerable jar.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CpeUri {
      get { return cpeUri_; }
      set {
        cpeUri_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "package" field.</summary>
    public const int PackageFieldNumber = 2;
    private string package_ = "";
    /// <summary>
    /// Required. The package being described.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Package {
      get { return package_; }
      set {
        package_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 3;
    private global::Grafeas.V1Beta1.Package.Version version_;
    /// <summary>
    /// Required. The version of the package being described.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Grafeas.V1Beta1.Package.Version Version {
      get { return version_; }
      set {
        version_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as VulnerabilityLocation);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(VulnerabilityLocation other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CpeUri != other.CpeUri) return false;
      if (Package != other.Package) return false;
      if (!object.Equals(Version, other.Version)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CpeUri.Length != 0) hash ^= CpeUri.GetHashCode();
      if (Package.Length != 0) hash ^= Package.GetHashCode();
      if (version_ != null) hash ^= Version.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CpeUri.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(CpeUri);
      }
      if (Package.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Package);
      }
      if (version_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Version);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CpeUri.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CpeUri);
      }
      if (Package.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Package);
      }
      if (version_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Version);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(VulnerabilityLocation other) {
      if (other == null) {
        return;
      }
      if (other.CpeUri.Length != 0) {
        CpeUri = other.CpeUri;
      }
      if (other.Package.Length != 0) {
        Package = other.Package;
      }
      if (other.version_ != null) {
        if (version_ == null) {
          Version = new global::Grafeas.V1Beta1.Package.Version();
        }
        Version.MergeFrom(other.Version);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            CpeUri = input.ReadString();
            break;
          }
          case 18: {
            Package = input.ReadString();
            break;
          }
          case 26: {
            if (version_ == null) {
              Version = new global::Grafeas.V1Beta1.Package.Version();
            }
            input.ReadMessage(Version);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
