// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: google/devtools/containeranalysis/v1beta1/source/source.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Grafeas.V1Beta1.Source {

  /// <summary>Holder for reflection information generated from google/devtools/containeranalysis/v1beta1/source/source.proto</summary>
  public static partial class SourceReflection {

    #region Descriptor
    /// <summary>File descriptor for google/devtools/containeranalysis/v1beta1/source/source.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static SourceReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cj1nb29nbGUvZGV2dG9vbHMvY29udGFpbmVyYW5hbHlzaXMvdjFiZXRhMS9z",
            "b3VyY2Uvc291cmNlLnByb3RvEhZncmFmZWFzLnYxYmV0YTEuc291cmNlIsoC",
            "Cg1Tb3VyY2VDb250ZXh0EkQKCmNsb3VkX3JlcG8YASABKAsyLi5ncmFmZWFz",
            "LnYxYmV0YTEuc291cmNlLkNsb3VkUmVwb1NvdXJjZUNvbnRleHRIABI9CgZn",
            "ZXJyaXQYAiABKAsyKy5ncmFmZWFzLnYxYmV0YTEuc291cmNlLkdlcnJpdFNv",
            "dXJjZUNvbnRleHRIABI3CgNnaXQYAyABKAsyKC5ncmFmZWFzLnYxYmV0YTEu",
            "c291cmNlLkdpdFNvdXJjZUNvbnRleHRIABJBCgZsYWJlbHMYBCADKAsyMS5n",
            "cmFmZWFzLnYxYmV0YTEuc291cmNlLlNvdXJjZUNvbnRleHQuTGFiZWxzRW50",
            "cnkaLQoLTGFiZWxzRW50cnkSCwoDa2V5GAEgASgJEg0KBXZhbHVlGAIgASgJ",
            "OgI4AUIJCgdjb250ZXh0IpYBCgxBbGlhc0NvbnRleHQSNwoEa2luZBgBIAEo",
            "DjIpLmdyYWZlYXMudjFiZXRhMS5zb3VyY2UuQWxpYXNDb250ZXh0LktpbmQS",
            "DAoEbmFtZRgCIAEoCSI/CgRLaW5kEhQKEEtJTkRfVU5TUEVDSUZJRUQQABIJ",
            "CgVGSVhFRBABEgsKB01PVkFCTEUQAhIJCgVPVEhFUhAEIqsBChZDbG91ZFJl",
            "cG9Tb3VyY2VDb250ZXh0Ei8KB3JlcG9faWQYASABKAsyHi5ncmFmZWFzLnYx",
            "YmV0YTEuc291cmNlLlJlcG9JZBIVCgtyZXZpc2lvbl9pZBgCIAEoCUgAEj0K",
            "DWFsaWFzX2NvbnRleHQYAyABKAsyJC5ncmFmZWFzLnYxYmV0YTEuc291cmNl",
            "LkFsaWFzQ29udGV4dEgAQgoKCHJldmlzaW9uIqEBChNHZXJyaXRTb3VyY2VD",
            "b250ZXh0EhAKCGhvc3RfdXJpGAEgASgJEhYKDmdlcnJpdF9wcm9qZWN0GAIg",
            "ASgJEhUKC3JldmlzaW9uX2lkGAMgASgJSAASPQoNYWxpYXNfY29udGV4dBgE",
            "IAEoCzIkLmdyYWZlYXMudjFiZXRhMS5zb3VyY2UuQWxpYXNDb250ZXh0SABC",
            "CgoIcmV2aXNpb24iNAoQR2l0U291cmNlQ29udGV4dBILCgN1cmwYASABKAkS",
            "EwoLcmV2aXNpb25faWQYAiABKAkiXwoGUmVwb0lkEkAKD3Byb2plY3RfcmVw",
            "b19pZBgBIAEoCzIlLmdyYWZlYXMudjFiZXRhMS5zb3VyY2UuUHJvamVjdFJl",
            "cG9JZEgAEg0KA3VpZBgCIAEoCUgAQgQKAmlkIjYKDVByb2plY3RSZXBvSWQS",
            "EgoKcHJvamVjdF9pZBgBIAEoCRIRCglyZXBvX25hbWUYAiABKAlCewoZaW8u",
            "Z3JhZmVhcy52MWJldGExLnNvdXJjZVABWlZnb29nbGUuZ29sYW5nLm9yZy9n",
            "ZW5wcm90by9nb29nbGVhcGlzL2RldnRvb2xzL2NvbnRhaW5lcmFuYWx5c2lz",
            "L3YxYmV0YTEvc291cmNlO3NvdXJjZaICA0dSQWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Grafeas.V1Beta1.Source.SourceContext), global::Grafeas.V1Beta1.Source.SourceContext.Parser, new[]{ "CloudRepo", "Gerrit", "Git", "Labels" }, new[]{ "Context" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Grafeas.V1Beta1.Source.AliasContext), global::Grafeas.V1Beta1.Source.AliasContext.Parser, new[]{ "Kind", "Name" }, null, new[]{ typeof(global::Grafeas.V1Beta1.Source.AliasContext.Types.Kind) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Grafeas.V1Beta1.Source.CloudRepoSourceContext), global::Grafeas.V1Beta1.Source.CloudRepoSourceContext.Parser, new[]{ "RepoId", "RevisionId", "AliasContext" }, new[]{ "Revision" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Grafeas.V1Beta1.Source.GerritSourceContext), global::Grafeas.V1Beta1.Source.GerritSourceContext.Parser, new[]{ "HostUri", "GerritProject", "RevisionId", "AliasContext" }, new[]{ "Revision" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Grafeas.V1Beta1.Source.GitSourceContext), global::Grafeas.V1Beta1.Source.GitSourceContext.Parser, new[]{ "Url", "RevisionId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Grafeas.V1Beta1.Source.RepoId), global::Grafeas.V1Beta1.Source.RepoId.Parser, new[]{ "ProjectRepoId", "Uid" }, new[]{ "Id" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Grafeas.V1Beta1.Source.ProjectRepoId), global::Grafeas.V1Beta1.Source.ProjectRepoId.Parser, new[]{ "ProjectId", "RepoName" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// A SourceContext is a reference to a tree of files. A SourceContext together
  /// with a path point to a unique revision of a single file or directory.
  /// </summary>
  public sealed partial class SourceContext : pb::IMessage<SourceContext> {
    private static readonly pb::MessageParser<SourceContext> _parser = new pb::MessageParser<SourceContext>(() => new SourceContext());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SourceContext> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Grafeas.V1Beta1.Source.SourceReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SourceContext() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SourceContext(SourceContext other) : this() {
      labels_ = other.labels_.Clone();
      switch (other.ContextCase) {
        case ContextOneofCase.CloudRepo:
          CloudRepo = other.CloudRepo.Clone();
          break;
        case ContextOneofCase.Gerrit:
          Gerrit = other.Gerrit.Clone();
          break;
        case ContextOneofCase.Git:
          Git = other.Git.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SourceContext Clone() {
      return new SourceContext(this);
    }

    /// <summary>Field number for the "cloud_repo" field.</summary>
    public const int CloudRepoFieldNumber = 1;
    /// <summary>
    /// A SourceContext referring to a revision in a Google Cloud Source Repo.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Grafeas.V1Beta1.Source.CloudRepoSourceContext CloudRepo {
      get { return contextCase_ == ContextOneofCase.CloudRepo ? (global::Grafeas.V1Beta1.Source.CloudRepoSourceContext) context_ : null; }
      set {
        context_ = value;
        contextCase_ = value == null ? ContextOneofCase.None : ContextOneofCase.CloudRepo;
      }
    }

    /// <summary>Field number for the "gerrit" field.</summary>
    public const int GerritFieldNumber = 2;
    /// <summary>
    /// A SourceContext referring to a Gerrit project.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Grafeas.V1Beta1.Source.GerritSourceContext Gerrit {
      get { return contextCase_ == ContextOneofCase.Gerrit ? (global::Grafeas.V1Beta1.Source.GerritSourceContext) context_ : null; }
      set {
        context_ = value;
        contextCase_ = value == null ? ContextOneofCase.None : ContextOneofCase.Gerrit;
      }
    }

    /// <summary>Field number for the "git" field.</summary>
    public const int GitFieldNumber = 3;
    /// <summary>
    /// A SourceContext referring to any third party Git repo (e.g., GitHub).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Grafeas.V1Beta1.Source.GitSourceContext Git {
      get { return contextCase_ == ContextOneofCase.Git ? (global::Grafeas.V1Beta1.Source.GitSourceContext) context_ : null; }
      set {
        context_ = value;
        contextCase_ = value == null ? ContextOneofCase.None : ContextOneofCase.Git;
      }
    }

    /// <summary>Field number for the "labels" field.</summary>
    public const int LabelsFieldNumber = 4;
    private static readonly pbc::MapField<string, string>.Codec _map_labels_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForString(18, ""), 34);
    private readonly pbc::MapField<string, string> labels_ = new pbc::MapField<string, string>();
    /// <summary>
    /// Labels with user defined metadata.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, string> Labels {
      get { return labels_; }
    }

    private object context_;
    /// <summary>Enum of possible cases for the "context" oneof.</summary>
    public enum ContextOneofCase {
      None = 0,
      CloudRepo = 1,
      Gerrit = 2,
      Git = 3,
    }
    private ContextOneofCase contextCase_ = ContextOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ContextOneofCase ContextCase {
      get { return contextCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearContext() {
      contextCase_ = ContextOneofCase.None;
      context_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SourceContext);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SourceContext other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(CloudRepo, other.CloudRepo)) return false;
      if (!object.Equals(Gerrit, other.Gerrit)) return false;
      if (!object.Equals(Git, other.Git)) return false;
      if (!Labels.Equals(other.Labels)) return false;
      if (ContextCase != other.ContextCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (contextCase_ == ContextOneofCase.CloudRepo) hash ^= CloudRepo.GetHashCode();
      if (contextCase_ == ContextOneofCase.Gerrit) hash ^= Gerrit.GetHashCode();
      if (contextCase_ == ContextOneofCase.Git) hash ^= Git.GetHashCode();
      hash ^= Labels.GetHashCode();
      hash ^= (int) contextCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (contextCase_ == ContextOneofCase.CloudRepo) {
        output.WriteRawTag(10);
        output.WriteMessage(CloudRepo);
      }
      if (contextCase_ == ContextOneofCase.Gerrit) {
        output.WriteRawTag(18);
        output.WriteMessage(Gerrit);
      }
      if (contextCase_ == ContextOneofCase.Git) {
        output.WriteRawTag(26);
        output.WriteMessage(Git);
      }
      labels_.WriteTo(output, _map_labels_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (contextCase_ == ContextOneofCase.CloudRepo) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CloudRepo);
      }
      if (contextCase_ == ContextOneofCase.Gerrit) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Gerrit);
      }
      if (contextCase_ == ContextOneofCase.Git) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Git);
      }
      size += labels_.CalculateSize(_map_labels_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SourceContext other) {
      if (other == null) {
        return;
      }
      labels_.Add(other.labels_);
      switch (other.ContextCase) {
        case ContextOneofCase.CloudRepo:
          if (CloudRepo == null) {
            CloudRepo = new global::Grafeas.V1Beta1.Source.CloudRepoSourceContext();
          }
          CloudRepo.MergeFrom(other.CloudRepo);
          break;
        case ContextOneofCase.Gerrit:
          if (Gerrit == null) {
            Gerrit = new global::Grafeas.V1Beta1.Source.GerritSourceContext();
          }
          Gerrit.MergeFrom(other.Gerrit);
          break;
        case ContextOneofCase.Git:
          if (Git == null) {
            Git = new global::Grafeas.V1Beta1.Source.GitSourceContext();
          }
          Git.MergeFrom(other.Git);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::Grafeas.V1Beta1.Source.CloudRepoSourceContext subBuilder = new global::Grafeas.V1Beta1.Source.CloudRepoSourceContext();
            if (contextCase_ == ContextOneofCase.CloudRepo) {
              subBuilder.MergeFrom(CloudRepo);
            }
            input.ReadMessage(subBuilder);
            CloudRepo = subBuilder;
            break;
          }
          case 18: {
            global::Grafeas.V1Beta1.Source.GerritSourceContext subBuilder = new global::Grafeas.V1Beta1.Source.GerritSourceContext();
            if (contextCase_ == ContextOneofCase.Gerrit) {
              subBuilder.MergeFrom(Gerrit);
            }
            input.ReadMessage(subBuilder);
            Gerrit = subBuilder;
            break;
          }
          case 26: {
            global::Grafeas.V1Beta1.Source.GitSourceContext subBuilder = new global::Grafeas.V1Beta1.Source.GitSourceContext();
            if (contextCase_ == ContextOneofCase.Git) {
              subBuilder.MergeFrom(Git);
            }
            input.ReadMessage(subBuilder);
            Git = subBuilder;
            break;
          }
          case 34: {
            labels_.AddEntriesFrom(input, _map_labels_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// An alias to a repo revision.
  /// </summary>
  public sealed partial class AliasContext : pb::IMessage<AliasContext> {
    private static readonly pb::MessageParser<AliasContext> _parser = new pb::MessageParser<AliasContext>(() => new AliasContext());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AliasContext> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Grafeas.V1Beta1.Source.SourceReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AliasContext() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AliasContext(AliasContext other) : this() {
      kind_ = other.kind_;
      name_ = other.name_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AliasContext Clone() {
      return new AliasContext(this);
    }

    /// <summary>Field number for the "kind" field.</summary>
    public const int KindFieldNumber = 1;
    private global::Grafeas.V1Beta1.Source.AliasContext.Types.Kind kind_ = global::Grafeas.V1Beta1.Source.AliasContext.Types.Kind.Unspecified;
    /// <summary>
    /// The alias kind.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Grafeas.V1Beta1.Source.AliasContext.Types.Kind Kind {
      get { return kind_; }
      set {
        kind_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    /// <summary>
    /// The alias name.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AliasContext);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AliasContext other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Kind != other.Kind) return false;
      if (Name != other.Name) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Kind != global::Grafeas.V1Beta1.Source.AliasContext.Types.Kind.Unspecified) hash ^= Kind.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Kind != global::Grafeas.V1Beta1.Source.AliasContext.Types.Kind.Unspecified) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Kind);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Kind != global::Grafeas.V1Beta1.Source.AliasContext.Types.Kind.Unspecified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Kind);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AliasContext other) {
      if (other == null) {
        return;
      }
      if (other.Kind != global::Grafeas.V1Beta1.Source.AliasContext.Types.Kind.Unspecified) {
        Kind = other.Kind;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Kind = (global::Grafeas.V1Beta1.Source.AliasContext.Types.Kind) input.ReadEnum();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the AliasContext message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// The type of an alias.
      /// </summary>
      public enum Kind {
        /// <summary>
        /// Unknown.
        /// </summary>
        [pbr::OriginalName("KIND_UNSPECIFIED")] Unspecified = 0,
        /// <summary>
        /// Git tag.
        /// </summary>
        [pbr::OriginalName("FIXED")] Fixed = 1,
        /// <summary>
        /// Git branch.
        /// </summary>
        [pbr::OriginalName("MOVABLE")] Movable = 2,
        /// <summary>
        /// Used to specify non-standard aliases. For example, if a Git repo has a
        /// ref named "refs/foo/bar".
        /// </summary>
        [pbr::OriginalName("OTHER")] Other = 4,
      }

    }
    #endregion

  }

  /// <summary>
  /// A CloudRepoSourceContext denotes a particular revision in a Google Cloud
  /// Source Repo.
  /// </summary>
  public sealed partial class CloudRepoSourceContext : pb::IMessage<CloudRepoSourceContext> {
    private static readonly pb::MessageParser<CloudRepoSourceContext> _parser = new pb::MessageParser<CloudRepoSourceContext>(() => new CloudRepoSourceContext());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CloudRepoSourceContext> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Grafeas.V1Beta1.Source.SourceReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CloudRepoSourceContext() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CloudRepoSourceContext(CloudRepoSourceContext other) : this() {
      repoId_ = other.repoId_ != null ? other.repoId_.Clone() : null;
      switch (other.RevisionCase) {
        case RevisionOneofCase.RevisionId:
          RevisionId = other.RevisionId;
          break;
        case RevisionOneofCase.AliasContext:
          AliasContext = other.AliasContext.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CloudRepoSourceContext Clone() {
      return new CloudRepoSourceContext(this);
    }

    /// <summary>Field number for the "repo_id" field.</summary>
    public const int RepoIdFieldNumber = 1;
    private global::Grafeas.V1Beta1.Source.RepoId repoId_;
    /// <summary>
    /// The ID of the repo.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Grafeas.V1Beta1.Source.RepoId RepoId {
      get { return repoId_; }
      set {
        repoId_ = value;
      }
    }

    /// <summary>Field number for the "revision_id" field.</summary>
    public const int RevisionIdFieldNumber = 2;
    /// <summary>
    /// A revision ID.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RevisionId {
      get { return revisionCase_ == RevisionOneofCase.RevisionId ? (string) revision_ : ""; }
      set {
        revision_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        revisionCase_ = RevisionOneofCase.RevisionId;
      }
    }

    /// <summary>Field number for the "alias_context" field.</summary>
    public const int AliasContextFieldNumber = 3;
    /// <summary>
    /// An alias, which may be a branch or tag.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Grafeas.V1Beta1.Source.AliasContext AliasContext {
      get { return revisionCase_ == RevisionOneofCase.AliasContext ? (global::Grafeas.V1Beta1.Source.AliasContext) revision_ : null; }
      set {
        revision_ = value;
        revisionCase_ = value == null ? RevisionOneofCase.None : RevisionOneofCase.AliasContext;
      }
    }

    private object revision_;
    /// <summary>Enum of possible cases for the "revision" oneof.</summary>
    public enum RevisionOneofCase {
      None = 0,
      RevisionId = 2,
      AliasContext = 3,
    }
    private RevisionOneofCase revisionCase_ = RevisionOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RevisionOneofCase RevisionCase {
      get { return revisionCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRevision() {
      revisionCase_ = RevisionOneofCase.None;
      revision_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CloudRepoSourceContext);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CloudRepoSourceContext other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(RepoId, other.RepoId)) return false;
      if (RevisionId != other.RevisionId) return false;
      if (!object.Equals(AliasContext, other.AliasContext)) return false;
      if (RevisionCase != other.RevisionCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (repoId_ != null) hash ^= RepoId.GetHashCode();
      if (revisionCase_ == RevisionOneofCase.RevisionId) hash ^= RevisionId.GetHashCode();
      if (revisionCase_ == RevisionOneofCase.AliasContext) hash ^= AliasContext.GetHashCode();
      hash ^= (int) revisionCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (repoId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(RepoId);
      }
      if (revisionCase_ == RevisionOneofCase.RevisionId) {
        output.WriteRawTag(18);
        output.WriteString(RevisionId);
      }
      if (revisionCase_ == RevisionOneofCase.AliasContext) {
        output.WriteRawTag(26);
        output.WriteMessage(AliasContext);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (repoId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RepoId);
      }
      if (revisionCase_ == RevisionOneofCase.RevisionId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RevisionId);
      }
      if (revisionCase_ == RevisionOneofCase.AliasContext) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AliasContext);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CloudRepoSourceContext other) {
      if (other == null) {
        return;
      }
      if (other.repoId_ != null) {
        if (repoId_ == null) {
          RepoId = new global::Grafeas.V1Beta1.Source.RepoId();
        }
        RepoId.MergeFrom(other.RepoId);
      }
      switch (other.RevisionCase) {
        case RevisionOneofCase.RevisionId:
          RevisionId = other.RevisionId;
          break;
        case RevisionOneofCase.AliasContext:
          if (AliasContext == null) {
            AliasContext = new global::Grafeas.V1Beta1.Source.AliasContext();
          }
          AliasContext.MergeFrom(other.AliasContext);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (repoId_ == null) {
              RepoId = new global::Grafeas.V1Beta1.Source.RepoId();
            }
            input.ReadMessage(RepoId);
            break;
          }
          case 18: {
            RevisionId = input.ReadString();
            break;
          }
          case 26: {
            global::Grafeas.V1Beta1.Source.AliasContext subBuilder = new global::Grafeas.V1Beta1.Source.AliasContext();
            if (revisionCase_ == RevisionOneofCase.AliasContext) {
              subBuilder.MergeFrom(AliasContext);
            }
            input.ReadMessage(subBuilder);
            AliasContext = subBuilder;
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// A SourceContext referring to a Gerrit project.
  /// </summary>
  public sealed partial class GerritSourceContext : pb::IMessage<GerritSourceContext> {
    private static readonly pb::MessageParser<GerritSourceContext> _parser = new pb::MessageParser<GerritSourceContext>(() => new GerritSourceContext());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GerritSourceContext> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Grafeas.V1Beta1.Source.SourceReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GerritSourceContext() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GerritSourceContext(GerritSourceContext other) : this() {
      hostUri_ = other.hostUri_;
      gerritProject_ = other.gerritProject_;
      switch (other.RevisionCase) {
        case RevisionOneofCase.RevisionId:
          RevisionId = other.RevisionId;
          break;
        case RevisionOneofCase.AliasContext:
          AliasContext = other.AliasContext.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GerritSourceContext Clone() {
      return new GerritSourceContext(this);
    }

    /// <summary>Field number for the "host_uri" field.</summary>
    public const int HostUriFieldNumber = 1;
    private string hostUri_ = "";
    /// <summary>
    /// The URI of a running Gerrit instance.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HostUri {
      get { return hostUri_; }
      set {
        hostUri_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "gerrit_project" field.</summary>
    public const int GerritProjectFieldNumber = 2;
    private string gerritProject_ = "";
    /// <summary>
    /// The full project name within the host. Projects may be nested, so
    /// "project/subproject" is a valid project name. The "repo name" is the
    /// hostURI/project.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GerritProject {
      get { return gerritProject_; }
      set {
        gerritProject_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "revision_id" field.</summary>
    public const int RevisionIdFieldNumber = 3;
    /// <summary>
    /// A revision (commit) ID.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RevisionId {
      get { return revisionCase_ == RevisionOneofCase.RevisionId ? (string) revision_ : ""; }
      set {
        revision_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        revisionCase_ = RevisionOneofCase.RevisionId;
      }
    }

    /// <summary>Field number for the "alias_context" field.</summary>
    public const int AliasContextFieldNumber = 4;
    /// <summary>
    /// An alias, which may be a branch or tag.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Grafeas.V1Beta1.Source.AliasContext AliasContext {
      get { return revisionCase_ == RevisionOneofCase.AliasContext ? (global::Grafeas.V1Beta1.Source.AliasContext) revision_ : null; }
      set {
        revision_ = value;
        revisionCase_ = value == null ? RevisionOneofCase.None : RevisionOneofCase.AliasContext;
      }
    }

    private object revision_;
    /// <summary>Enum of possible cases for the "revision" oneof.</summary>
    public enum RevisionOneofCase {
      None = 0,
      RevisionId = 3,
      AliasContext = 4,
    }
    private RevisionOneofCase revisionCase_ = RevisionOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RevisionOneofCase RevisionCase {
      get { return revisionCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRevision() {
      revisionCase_ = RevisionOneofCase.None;
      revision_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GerritSourceContext);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GerritSourceContext other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (HostUri != other.HostUri) return false;
      if (GerritProject != other.GerritProject) return false;
      if (RevisionId != other.RevisionId) return false;
      if (!object.Equals(AliasContext, other.AliasContext)) return false;
      if (RevisionCase != other.RevisionCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HostUri.Length != 0) hash ^= HostUri.GetHashCode();
      if (GerritProject.Length != 0) hash ^= GerritProject.GetHashCode();
      if (revisionCase_ == RevisionOneofCase.RevisionId) hash ^= RevisionId.GetHashCode();
      if (revisionCase_ == RevisionOneofCase.AliasContext) hash ^= AliasContext.GetHashCode();
      hash ^= (int) revisionCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HostUri.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(HostUri);
      }
      if (GerritProject.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(GerritProject);
      }
      if (revisionCase_ == RevisionOneofCase.RevisionId) {
        output.WriteRawTag(26);
        output.WriteString(RevisionId);
      }
      if (revisionCase_ == RevisionOneofCase.AliasContext) {
        output.WriteRawTag(34);
        output.WriteMessage(AliasContext);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HostUri.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(HostUri);
      }
      if (GerritProject.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GerritProject);
      }
      if (revisionCase_ == RevisionOneofCase.RevisionId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RevisionId);
      }
      if (revisionCase_ == RevisionOneofCase.AliasContext) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AliasContext);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GerritSourceContext other) {
      if (other == null) {
        return;
      }
      if (other.HostUri.Length != 0) {
        HostUri = other.HostUri;
      }
      if (other.GerritProject.Length != 0) {
        GerritProject = other.GerritProject;
      }
      switch (other.RevisionCase) {
        case RevisionOneofCase.RevisionId:
          RevisionId = other.RevisionId;
          break;
        case RevisionOneofCase.AliasContext:
          if (AliasContext == null) {
            AliasContext = new global::Grafeas.V1Beta1.Source.AliasContext();
          }
          AliasContext.MergeFrom(other.AliasContext);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            HostUri = input.ReadString();
            break;
          }
          case 18: {
            GerritProject = input.ReadString();
            break;
          }
          case 26: {
            RevisionId = input.ReadString();
            break;
          }
          case 34: {
            global::Grafeas.V1Beta1.Source.AliasContext subBuilder = new global::Grafeas.V1Beta1.Source.AliasContext();
            if (revisionCase_ == RevisionOneofCase.AliasContext) {
              subBuilder.MergeFrom(AliasContext);
            }
            input.ReadMessage(subBuilder);
            AliasContext = subBuilder;
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// A GitSourceContext denotes a particular revision in a third party Git
  /// repository (e.g., GitHub).
  /// </summary>
  public sealed partial class GitSourceContext : pb::IMessage<GitSourceContext> {
    private static readonly pb::MessageParser<GitSourceContext> _parser = new pb::MessageParser<GitSourceContext>(() => new GitSourceContext());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GitSourceContext> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Grafeas.V1Beta1.Source.SourceReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GitSourceContext() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GitSourceContext(GitSourceContext other) : this() {
      url_ = other.url_;
      revisionId_ = other.revisionId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GitSourceContext Clone() {
      return new GitSourceContext(this);
    }

    /// <summary>Field number for the "url" field.</summary>
    public const int UrlFieldNumber = 1;
    private string url_ = "";
    /// <summary>
    /// Git repository URL.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Url {
      get { return url_; }
      set {
        url_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "revision_id" field.</summary>
    public const int RevisionIdFieldNumber = 2;
    private string revisionId_ = "";
    /// <summary>
    /// Git commit hash.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RevisionId {
      get { return revisionId_; }
      set {
        revisionId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GitSourceContext);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GitSourceContext other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Url != other.Url) return false;
      if (RevisionId != other.RevisionId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Url.Length != 0) hash ^= Url.GetHashCode();
      if (RevisionId.Length != 0) hash ^= RevisionId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Url.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Url);
      }
      if (RevisionId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(RevisionId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Url.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Url);
      }
      if (RevisionId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RevisionId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GitSourceContext other) {
      if (other == null) {
        return;
      }
      if (other.Url.Length != 0) {
        Url = other.Url;
      }
      if (other.RevisionId.Length != 0) {
        RevisionId = other.RevisionId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Url = input.ReadString();
            break;
          }
          case 18: {
            RevisionId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// A unique identifier for a Cloud Repo.
  /// </summary>
  public sealed partial class RepoId : pb::IMessage<RepoId> {
    private static readonly pb::MessageParser<RepoId> _parser = new pb::MessageParser<RepoId>(() => new RepoId());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RepoId> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Grafeas.V1Beta1.Source.SourceReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RepoId() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RepoId(RepoId other) : this() {
      switch (other.IdCase) {
        case IdOneofCase.ProjectRepoId:
          ProjectRepoId = other.ProjectRepoId.Clone();
          break;
        case IdOneofCase.Uid:
          Uid = other.Uid;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RepoId Clone() {
      return new RepoId(this);
    }

    /// <summary>Field number for the "project_repo_id" field.</summary>
    public const int ProjectRepoIdFieldNumber = 1;
    /// <summary>
    /// A combination of a project ID and a repo name.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Grafeas.V1Beta1.Source.ProjectRepoId ProjectRepoId {
      get { return idCase_ == IdOneofCase.ProjectRepoId ? (global::Grafeas.V1Beta1.Source.ProjectRepoId) id_ : null; }
      set {
        id_ = value;
        idCase_ = value == null ? IdOneofCase.None : IdOneofCase.ProjectRepoId;
      }
    }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 2;
    /// <summary>
    /// A server-assigned, globally unique identifier.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Uid {
      get { return idCase_ == IdOneofCase.Uid ? (string) id_ : ""; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        idCase_ = IdOneofCase.Uid;
      }
    }

    private object id_;
    /// <summary>Enum of possible cases for the "id" oneof.</summary>
    public enum IdOneofCase {
      None = 0,
      ProjectRepoId = 1,
      Uid = 2,
    }
    private IdOneofCase idCase_ = IdOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IdOneofCase IdCase {
      get { return idCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearId() {
      idCase_ = IdOneofCase.None;
      id_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RepoId);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RepoId other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(ProjectRepoId, other.ProjectRepoId)) return false;
      if (Uid != other.Uid) return false;
      if (IdCase != other.IdCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (idCase_ == IdOneofCase.ProjectRepoId) hash ^= ProjectRepoId.GetHashCode();
      if (idCase_ == IdOneofCase.Uid) hash ^= Uid.GetHashCode();
      hash ^= (int) idCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (idCase_ == IdOneofCase.ProjectRepoId) {
        output.WriteRawTag(10);
        output.WriteMessage(ProjectRepoId);
      }
      if (idCase_ == IdOneofCase.Uid) {
        output.WriteRawTag(18);
        output.WriteString(Uid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (idCase_ == IdOneofCase.ProjectRepoId) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ProjectRepoId);
      }
      if (idCase_ == IdOneofCase.Uid) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Uid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RepoId other) {
      if (other == null) {
        return;
      }
      switch (other.IdCase) {
        case IdOneofCase.ProjectRepoId:
          if (ProjectRepoId == null) {
            ProjectRepoId = new global::Grafeas.V1Beta1.Source.ProjectRepoId();
          }
          ProjectRepoId.MergeFrom(other.ProjectRepoId);
          break;
        case IdOneofCase.Uid:
          Uid = other.Uid;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::Grafeas.V1Beta1.Source.ProjectRepoId subBuilder = new global::Grafeas.V1Beta1.Source.ProjectRepoId();
            if (idCase_ == IdOneofCase.ProjectRepoId) {
              subBuilder.MergeFrom(ProjectRepoId);
            }
            input.ReadMessage(subBuilder);
            ProjectRepoId = subBuilder;
            break;
          }
          case 18: {
            Uid = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Selects a repo using a Google Cloud Platform project ID (e.g.,
  /// winged-cargo-31) and a repo name within that project.
  /// </summary>
  public sealed partial class ProjectRepoId : pb::IMessage<ProjectRepoId> {
    private static readonly pb::MessageParser<ProjectRepoId> _parser = new pb::MessageParser<ProjectRepoId>(() => new ProjectRepoId());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ProjectRepoId> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Grafeas.V1Beta1.Source.SourceReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProjectRepoId() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProjectRepoId(ProjectRepoId other) : this() {
      projectId_ = other.projectId_;
      repoName_ = other.repoName_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProjectRepoId Clone() {
      return new ProjectRepoId(this);
    }

    /// <summary>Field number for the "project_id" field.</summary>
    public const int ProjectIdFieldNumber = 1;
    private string projectId_ = "";
    /// <summary>
    /// The ID of the project.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ProjectId {
      get { return projectId_; }
      set {
        projectId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "repo_name" field.</summary>
    public const int RepoNameFieldNumber = 2;
    private string repoName_ = "";
    /// <summary>
    /// The name of the repo. Leave empty for the default repo.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RepoName {
      get { return repoName_; }
      set {
        repoName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ProjectRepoId);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ProjectRepoId other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ProjectId != other.ProjectId) return false;
      if (RepoName != other.RepoName) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ProjectId.Length != 0) hash ^= ProjectId.GetHashCode();
      if (RepoName.Length != 0) hash ^= RepoName.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ProjectId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ProjectId);
      }
      if (RepoName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(RepoName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ProjectId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ProjectId);
      }
      if (RepoName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RepoName);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ProjectRepoId other) {
      if (other == null) {
        return;
      }
      if (other.ProjectId.Length != 0) {
        ProjectId = other.ProjectId;
      }
      if (other.RepoName.Length != 0) {
        RepoName = other.RepoName;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ProjectId = input.ReadString();
            break;
          }
          case 18: {
            RepoName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
