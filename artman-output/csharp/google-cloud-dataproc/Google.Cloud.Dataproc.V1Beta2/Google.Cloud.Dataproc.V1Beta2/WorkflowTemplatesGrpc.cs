// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: google/cloud/dataproc/v1beta2/workflow_templates.proto
// </auto-generated>
// Original file comments:
// Copyright 2019 Google LLC.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
//
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Google.Cloud.Dataproc.V1Beta2 {
  /// <summary>
  /// The API interface for managing Workflow Templates in the
  /// Cloud Dataproc API.
  /// </summary>
  public static partial class WorkflowTemplateService
  {
    static readonly string __ServiceName = "google.cloud.dataproc.v1beta2.WorkflowTemplateService";

    static readonly grpc::Marshaller<global::Google.Cloud.Dataproc.V1Beta2.CreateWorkflowTemplateRequest> __Marshaller_google_cloud_dataproc_v1beta2_CreateWorkflowTemplateRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Dataproc.V1Beta2.CreateWorkflowTemplateRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Dataproc.V1Beta2.WorkflowTemplate> __Marshaller_google_cloud_dataproc_v1beta2_WorkflowTemplate = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Dataproc.V1Beta2.WorkflowTemplate.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Dataproc.V1Beta2.GetWorkflowTemplateRequest> __Marshaller_google_cloud_dataproc_v1beta2_GetWorkflowTemplateRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Dataproc.V1Beta2.GetWorkflowTemplateRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Dataproc.V1Beta2.InstantiateWorkflowTemplateRequest> __Marshaller_google_cloud_dataproc_v1beta2_InstantiateWorkflowTemplateRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Dataproc.V1Beta2.InstantiateWorkflowTemplateRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.LongRunning.Operation> __Marshaller_google_longrunning_Operation = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.LongRunning.Operation.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Dataproc.V1Beta2.InstantiateInlineWorkflowTemplateRequest> __Marshaller_google_cloud_dataproc_v1beta2_InstantiateInlineWorkflowTemplateRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Dataproc.V1Beta2.InstantiateInlineWorkflowTemplateRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Dataproc.V1Beta2.UpdateWorkflowTemplateRequest> __Marshaller_google_cloud_dataproc_v1beta2_UpdateWorkflowTemplateRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Dataproc.V1Beta2.UpdateWorkflowTemplateRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Dataproc.V1Beta2.ListWorkflowTemplatesRequest> __Marshaller_google_cloud_dataproc_v1beta2_ListWorkflowTemplatesRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Dataproc.V1Beta2.ListWorkflowTemplatesRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Dataproc.V1Beta2.ListWorkflowTemplatesResponse> __Marshaller_google_cloud_dataproc_v1beta2_ListWorkflowTemplatesResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Dataproc.V1Beta2.ListWorkflowTemplatesResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Dataproc.V1Beta2.DeleteWorkflowTemplateRequest> __Marshaller_google_cloud_dataproc_v1beta2_DeleteWorkflowTemplateRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Dataproc.V1Beta2.DeleteWorkflowTemplateRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Protobuf.WellKnownTypes.Empty> __Marshaller_google_protobuf_Empty = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Protobuf.WellKnownTypes.Empty.Parser.ParseFrom);

    static readonly grpc::Method<global::Google.Cloud.Dataproc.V1Beta2.CreateWorkflowTemplateRequest, global::Google.Cloud.Dataproc.V1Beta2.WorkflowTemplate> __Method_CreateWorkflowTemplate = new grpc::Method<global::Google.Cloud.Dataproc.V1Beta2.CreateWorkflowTemplateRequest, global::Google.Cloud.Dataproc.V1Beta2.WorkflowTemplate>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateWorkflowTemplate",
        __Marshaller_google_cloud_dataproc_v1beta2_CreateWorkflowTemplateRequest,
        __Marshaller_google_cloud_dataproc_v1beta2_WorkflowTemplate);

    static readonly grpc::Method<global::Google.Cloud.Dataproc.V1Beta2.GetWorkflowTemplateRequest, global::Google.Cloud.Dataproc.V1Beta2.WorkflowTemplate> __Method_GetWorkflowTemplate = new grpc::Method<global::Google.Cloud.Dataproc.V1Beta2.GetWorkflowTemplateRequest, global::Google.Cloud.Dataproc.V1Beta2.WorkflowTemplate>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetWorkflowTemplate",
        __Marshaller_google_cloud_dataproc_v1beta2_GetWorkflowTemplateRequest,
        __Marshaller_google_cloud_dataproc_v1beta2_WorkflowTemplate);

    static readonly grpc::Method<global::Google.Cloud.Dataproc.V1Beta2.InstantiateWorkflowTemplateRequest, global::Google.LongRunning.Operation> __Method_InstantiateWorkflowTemplate = new grpc::Method<global::Google.Cloud.Dataproc.V1Beta2.InstantiateWorkflowTemplateRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "InstantiateWorkflowTemplate",
        __Marshaller_google_cloud_dataproc_v1beta2_InstantiateWorkflowTemplateRequest,
        __Marshaller_google_longrunning_Operation);

    static readonly grpc::Method<global::Google.Cloud.Dataproc.V1Beta2.InstantiateInlineWorkflowTemplateRequest, global::Google.LongRunning.Operation> __Method_InstantiateInlineWorkflowTemplate = new grpc::Method<global::Google.Cloud.Dataproc.V1Beta2.InstantiateInlineWorkflowTemplateRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "InstantiateInlineWorkflowTemplate",
        __Marshaller_google_cloud_dataproc_v1beta2_InstantiateInlineWorkflowTemplateRequest,
        __Marshaller_google_longrunning_Operation);

    static readonly grpc::Method<global::Google.Cloud.Dataproc.V1Beta2.UpdateWorkflowTemplateRequest, global::Google.Cloud.Dataproc.V1Beta2.WorkflowTemplate> __Method_UpdateWorkflowTemplate = new grpc::Method<global::Google.Cloud.Dataproc.V1Beta2.UpdateWorkflowTemplateRequest, global::Google.Cloud.Dataproc.V1Beta2.WorkflowTemplate>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateWorkflowTemplate",
        __Marshaller_google_cloud_dataproc_v1beta2_UpdateWorkflowTemplateRequest,
        __Marshaller_google_cloud_dataproc_v1beta2_WorkflowTemplate);

    static readonly grpc::Method<global::Google.Cloud.Dataproc.V1Beta2.ListWorkflowTemplatesRequest, global::Google.Cloud.Dataproc.V1Beta2.ListWorkflowTemplatesResponse> __Method_ListWorkflowTemplates = new grpc::Method<global::Google.Cloud.Dataproc.V1Beta2.ListWorkflowTemplatesRequest, global::Google.Cloud.Dataproc.V1Beta2.ListWorkflowTemplatesResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListWorkflowTemplates",
        __Marshaller_google_cloud_dataproc_v1beta2_ListWorkflowTemplatesRequest,
        __Marshaller_google_cloud_dataproc_v1beta2_ListWorkflowTemplatesResponse);

    static readonly grpc::Method<global::Google.Cloud.Dataproc.V1Beta2.DeleteWorkflowTemplateRequest, global::Google.Protobuf.WellKnownTypes.Empty> __Method_DeleteWorkflowTemplate = new grpc::Method<global::Google.Cloud.Dataproc.V1Beta2.DeleteWorkflowTemplateRequest, global::Google.Protobuf.WellKnownTypes.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteWorkflowTemplate",
        __Marshaller_google_cloud_dataproc_v1beta2_DeleteWorkflowTemplateRequest,
        __Marshaller_google_protobuf_Empty);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Google.Cloud.Dataproc.V1Beta2.WorkflowTemplatesReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of WorkflowTemplateService</summary>
    public abstract partial class WorkflowTemplateServiceBase
    {
      /// <summary>
      /// Creates new workflow template.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Dataproc.V1Beta2.WorkflowTemplate> CreateWorkflowTemplate(global::Google.Cloud.Dataproc.V1Beta2.CreateWorkflowTemplateRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves the latest workflow template.
      ///
      /// Can retrieve previously instantiated template by specifying optional
      /// version parameter.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Dataproc.V1Beta2.WorkflowTemplate> GetWorkflowTemplate(global::Google.Cloud.Dataproc.V1Beta2.GetWorkflowTemplateRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Instantiates a template and begins execution.
      ///
      /// The returned Operation can be used to track execution of
      /// workflow by polling
      /// [operations.get][google.longrunning.Operations.GetOperation].
      /// The Operation will complete when entire workflow is finished.
      ///
      /// The running workflow can be aborted via
      /// [operations.cancel][google.longrunning.Operations.CancelOperation].
      /// This will cause any inflight jobs to be cancelled and workflow-owned
      /// clusters to be deleted.
      ///
      /// The [Operation.metadata][google.longrunning.Operation.metadata] will be
      /// [WorkflowMetadata](/dataproc/docs/reference/rpc/google.cloud.dataproc.v1beta2#workflowmetadata).
      /// Also see [Using
      /// WorkflowMetadata](/dataproc/docs/concepts/workflows/debugging#using_workflowmetadata).
      ///
      /// On successful completion,
      /// [Operation.response][google.longrunning.Operation.response] will be
      /// [Empty][google.protobuf.Empty].
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> InstantiateWorkflowTemplate(global::Google.Cloud.Dataproc.V1Beta2.InstantiateWorkflowTemplateRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Instantiates a template and begins execution.
      ///
      /// This method is equivalent to executing the sequence
      /// [CreateWorkflowTemplate][google.cloud.dataproc.v1beta2.WorkflowTemplateService.CreateWorkflowTemplate], [InstantiateWorkflowTemplate][google.cloud.dataproc.v1beta2.WorkflowTemplateService.InstantiateWorkflowTemplate],
      /// [DeleteWorkflowTemplate][google.cloud.dataproc.v1beta2.WorkflowTemplateService.DeleteWorkflowTemplate].
      ///
      /// The returned Operation can be used to track execution of
      /// workflow by polling
      /// [operations.get][google.longrunning.Operations.GetOperation].
      /// The Operation will complete when entire workflow is finished.
      ///
      /// The running workflow can be aborted via
      /// [operations.cancel][google.longrunning.Operations.CancelOperation].
      /// This will cause any inflight jobs to be cancelled and workflow-owned
      /// clusters to be deleted.
      ///
      /// The [Operation.metadata][google.longrunning.Operation.metadata] will be
      /// [WorkflowMetadata](/dataproc/docs/reference/rpc/google.cloud.dataproc.v1#workflowmetadata).
      /// Also see [Using
      /// WorkflowMetadata](/dataproc/docs/concepts/workflows/debugging#using_workflowmetadata).
      ///
      /// On successful completion,
      /// [Operation.response][google.longrunning.Operation.response] will be
      /// [Empty][google.protobuf.Empty].
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> InstantiateInlineWorkflowTemplate(global::Google.Cloud.Dataproc.V1Beta2.InstantiateInlineWorkflowTemplateRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Updates (replaces) workflow template. The updated template
      /// must contain version that matches the current server version.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Dataproc.V1Beta2.WorkflowTemplate> UpdateWorkflowTemplate(global::Google.Cloud.Dataproc.V1Beta2.UpdateWorkflowTemplateRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Lists workflows that match the specified filter in the request.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Dataproc.V1Beta2.ListWorkflowTemplatesResponse> ListWorkflowTemplates(global::Google.Cloud.Dataproc.V1Beta2.ListWorkflowTemplatesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Deletes a workflow template. It does not cancel in-progress workflows.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Protobuf.WellKnownTypes.Empty> DeleteWorkflowTemplate(global::Google.Cloud.Dataproc.V1Beta2.DeleteWorkflowTemplateRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for WorkflowTemplateService</summary>
    public partial class WorkflowTemplateServiceClient : grpc::ClientBase<WorkflowTemplateServiceClient>
    {
      /// <summary>Creates a new client for WorkflowTemplateService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public WorkflowTemplateServiceClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for WorkflowTemplateService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public WorkflowTemplateServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected WorkflowTemplateServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected WorkflowTemplateServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Creates new workflow template.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Dataproc.V1Beta2.WorkflowTemplate CreateWorkflowTemplate(global::Google.Cloud.Dataproc.V1Beta2.CreateWorkflowTemplateRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateWorkflowTemplate(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates new workflow template.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Dataproc.V1Beta2.WorkflowTemplate CreateWorkflowTemplate(global::Google.Cloud.Dataproc.V1Beta2.CreateWorkflowTemplateRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateWorkflowTemplate, null, options, request);
      }
      /// <summary>
      /// Creates new workflow template.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Dataproc.V1Beta2.WorkflowTemplate> CreateWorkflowTemplateAsync(global::Google.Cloud.Dataproc.V1Beta2.CreateWorkflowTemplateRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateWorkflowTemplateAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates new workflow template.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Dataproc.V1Beta2.WorkflowTemplate> CreateWorkflowTemplateAsync(global::Google.Cloud.Dataproc.V1Beta2.CreateWorkflowTemplateRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateWorkflowTemplate, null, options, request);
      }
      /// <summary>
      /// Retrieves the latest workflow template.
      ///
      /// Can retrieve previously instantiated template by specifying optional
      /// version parameter.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Dataproc.V1Beta2.WorkflowTemplate GetWorkflowTemplate(global::Google.Cloud.Dataproc.V1Beta2.GetWorkflowTemplateRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetWorkflowTemplate(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves the latest workflow template.
      ///
      /// Can retrieve previously instantiated template by specifying optional
      /// version parameter.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Dataproc.V1Beta2.WorkflowTemplate GetWorkflowTemplate(global::Google.Cloud.Dataproc.V1Beta2.GetWorkflowTemplateRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetWorkflowTemplate, null, options, request);
      }
      /// <summary>
      /// Retrieves the latest workflow template.
      ///
      /// Can retrieve previously instantiated template by specifying optional
      /// version parameter.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Dataproc.V1Beta2.WorkflowTemplate> GetWorkflowTemplateAsync(global::Google.Cloud.Dataproc.V1Beta2.GetWorkflowTemplateRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetWorkflowTemplateAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves the latest workflow template.
      ///
      /// Can retrieve previously instantiated template by specifying optional
      /// version parameter.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Dataproc.V1Beta2.WorkflowTemplate> GetWorkflowTemplateAsync(global::Google.Cloud.Dataproc.V1Beta2.GetWorkflowTemplateRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetWorkflowTemplate, null, options, request);
      }
      /// <summary>
      /// Instantiates a template and begins execution.
      ///
      /// The returned Operation can be used to track execution of
      /// workflow by polling
      /// [operations.get][google.longrunning.Operations.GetOperation].
      /// The Operation will complete when entire workflow is finished.
      ///
      /// The running workflow can be aborted via
      /// [operations.cancel][google.longrunning.Operations.CancelOperation].
      /// This will cause any inflight jobs to be cancelled and workflow-owned
      /// clusters to be deleted.
      ///
      /// The [Operation.metadata][google.longrunning.Operation.metadata] will be
      /// [WorkflowMetadata](/dataproc/docs/reference/rpc/google.cloud.dataproc.v1beta2#workflowmetadata).
      /// Also see [Using
      /// WorkflowMetadata](/dataproc/docs/concepts/workflows/debugging#using_workflowmetadata).
      ///
      /// On successful completion,
      /// [Operation.response][google.longrunning.Operation.response] will be
      /// [Empty][google.protobuf.Empty].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.LongRunning.Operation InstantiateWorkflowTemplate(global::Google.Cloud.Dataproc.V1Beta2.InstantiateWorkflowTemplateRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return InstantiateWorkflowTemplate(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Instantiates a template and begins execution.
      ///
      /// The returned Operation can be used to track execution of
      /// workflow by polling
      /// [operations.get][google.longrunning.Operations.GetOperation].
      /// The Operation will complete when entire workflow is finished.
      ///
      /// The running workflow can be aborted via
      /// [operations.cancel][google.longrunning.Operations.CancelOperation].
      /// This will cause any inflight jobs to be cancelled and workflow-owned
      /// clusters to be deleted.
      ///
      /// The [Operation.metadata][google.longrunning.Operation.metadata] will be
      /// [WorkflowMetadata](/dataproc/docs/reference/rpc/google.cloud.dataproc.v1beta2#workflowmetadata).
      /// Also see [Using
      /// WorkflowMetadata](/dataproc/docs/concepts/workflows/debugging#using_workflowmetadata).
      ///
      /// On successful completion,
      /// [Operation.response][google.longrunning.Operation.response] will be
      /// [Empty][google.protobuf.Empty].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.LongRunning.Operation InstantiateWorkflowTemplate(global::Google.Cloud.Dataproc.V1Beta2.InstantiateWorkflowTemplateRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_InstantiateWorkflowTemplate, null, options, request);
      }
      /// <summary>
      /// Instantiates a template and begins execution.
      ///
      /// The returned Operation can be used to track execution of
      /// workflow by polling
      /// [operations.get][google.longrunning.Operations.GetOperation].
      /// The Operation will complete when entire workflow is finished.
      ///
      /// The running workflow can be aborted via
      /// [operations.cancel][google.longrunning.Operations.CancelOperation].
      /// This will cause any inflight jobs to be cancelled and workflow-owned
      /// clusters to be deleted.
      ///
      /// The [Operation.metadata][google.longrunning.Operation.metadata] will be
      /// [WorkflowMetadata](/dataproc/docs/reference/rpc/google.cloud.dataproc.v1beta2#workflowmetadata).
      /// Also see [Using
      /// WorkflowMetadata](/dataproc/docs/concepts/workflows/debugging#using_workflowmetadata).
      ///
      /// On successful completion,
      /// [Operation.response][google.longrunning.Operation.response] will be
      /// [Empty][google.protobuf.Empty].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> InstantiateWorkflowTemplateAsync(global::Google.Cloud.Dataproc.V1Beta2.InstantiateWorkflowTemplateRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return InstantiateWorkflowTemplateAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Instantiates a template and begins execution.
      ///
      /// The returned Operation can be used to track execution of
      /// workflow by polling
      /// [operations.get][google.longrunning.Operations.GetOperation].
      /// The Operation will complete when entire workflow is finished.
      ///
      /// The running workflow can be aborted via
      /// [operations.cancel][google.longrunning.Operations.CancelOperation].
      /// This will cause any inflight jobs to be cancelled and workflow-owned
      /// clusters to be deleted.
      ///
      /// The [Operation.metadata][google.longrunning.Operation.metadata] will be
      /// [WorkflowMetadata](/dataproc/docs/reference/rpc/google.cloud.dataproc.v1beta2#workflowmetadata).
      /// Also see [Using
      /// WorkflowMetadata](/dataproc/docs/concepts/workflows/debugging#using_workflowmetadata).
      ///
      /// On successful completion,
      /// [Operation.response][google.longrunning.Operation.response] will be
      /// [Empty][google.protobuf.Empty].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> InstantiateWorkflowTemplateAsync(global::Google.Cloud.Dataproc.V1Beta2.InstantiateWorkflowTemplateRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_InstantiateWorkflowTemplate, null, options, request);
      }
      /// <summary>
      /// Instantiates a template and begins execution.
      ///
      /// This method is equivalent to executing the sequence
      /// [CreateWorkflowTemplate][google.cloud.dataproc.v1beta2.WorkflowTemplateService.CreateWorkflowTemplate], [InstantiateWorkflowTemplate][google.cloud.dataproc.v1beta2.WorkflowTemplateService.InstantiateWorkflowTemplate],
      /// [DeleteWorkflowTemplate][google.cloud.dataproc.v1beta2.WorkflowTemplateService.DeleteWorkflowTemplate].
      ///
      /// The returned Operation can be used to track execution of
      /// workflow by polling
      /// [operations.get][google.longrunning.Operations.GetOperation].
      /// The Operation will complete when entire workflow is finished.
      ///
      /// The running workflow can be aborted via
      /// [operations.cancel][google.longrunning.Operations.CancelOperation].
      /// This will cause any inflight jobs to be cancelled and workflow-owned
      /// clusters to be deleted.
      ///
      /// The [Operation.metadata][google.longrunning.Operation.metadata] will be
      /// [WorkflowMetadata](/dataproc/docs/reference/rpc/google.cloud.dataproc.v1#workflowmetadata).
      /// Also see [Using
      /// WorkflowMetadata](/dataproc/docs/concepts/workflows/debugging#using_workflowmetadata).
      ///
      /// On successful completion,
      /// [Operation.response][google.longrunning.Operation.response] will be
      /// [Empty][google.protobuf.Empty].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.LongRunning.Operation InstantiateInlineWorkflowTemplate(global::Google.Cloud.Dataproc.V1Beta2.InstantiateInlineWorkflowTemplateRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return InstantiateInlineWorkflowTemplate(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Instantiates a template and begins execution.
      ///
      /// This method is equivalent to executing the sequence
      /// [CreateWorkflowTemplate][google.cloud.dataproc.v1beta2.WorkflowTemplateService.CreateWorkflowTemplate], [InstantiateWorkflowTemplate][google.cloud.dataproc.v1beta2.WorkflowTemplateService.InstantiateWorkflowTemplate],
      /// [DeleteWorkflowTemplate][google.cloud.dataproc.v1beta2.WorkflowTemplateService.DeleteWorkflowTemplate].
      ///
      /// The returned Operation can be used to track execution of
      /// workflow by polling
      /// [operations.get][google.longrunning.Operations.GetOperation].
      /// The Operation will complete when entire workflow is finished.
      ///
      /// The running workflow can be aborted via
      /// [operations.cancel][google.longrunning.Operations.CancelOperation].
      /// This will cause any inflight jobs to be cancelled and workflow-owned
      /// clusters to be deleted.
      ///
      /// The [Operation.metadata][google.longrunning.Operation.metadata] will be
      /// [WorkflowMetadata](/dataproc/docs/reference/rpc/google.cloud.dataproc.v1#workflowmetadata).
      /// Also see [Using
      /// WorkflowMetadata](/dataproc/docs/concepts/workflows/debugging#using_workflowmetadata).
      ///
      /// On successful completion,
      /// [Operation.response][google.longrunning.Operation.response] will be
      /// [Empty][google.protobuf.Empty].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.LongRunning.Operation InstantiateInlineWorkflowTemplate(global::Google.Cloud.Dataproc.V1Beta2.InstantiateInlineWorkflowTemplateRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_InstantiateInlineWorkflowTemplate, null, options, request);
      }
      /// <summary>
      /// Instantiates a template and begins execution.
      ///
      /// This method is equivalent to executing the sequence
      /// [CreateWorkflowTemplate][google.cloud.dataproc.v1beta2.WorkflowTemplateService.CreateWorkflowTemplate], [InstantiateWorkflowTemplate][google.cloud.dataproc.v1beta2.WorkflowTemplateService.InstantiateWorkflowTemplate],
      /// [DeleteWorkflowTemplate][google.cloud.dataproc.v1beta2.WorkflowTemplateService.DeleteWorkflowTemplate].
      ///
      /// The returned Operation can be used to track execution of
      /// workflow by polling
      /// [operations.get][google.longrunning.Operations.GetOperation].
      /// The Operation will complete when entire workflow is finished.
      ///
      /// The running workflow can be aborted via
      /// [operations.cancel][google.longrunning.Operations.CancelOperation].
      /// This will cause any inflight jobs to be cancelled and workflow-owned
      /// clusters to be deleted.
      ///
      /// The [Operation.metadata][google.longrunning.Operation.metadata] will be
      /// [WorkflowMetadata](/dataproc/docs/reference/rpc/google.cloud.dataproc.v1#workflowmetadata).
      /// Also see [Using
      /// WorkflowMetadata](/dataproc/docs/concepts/workflows/debugging#using_workflowmetadata).
      ///
      /// On successful completion,
      /// [Operation.response][google.longrunning.Operation.response] will be
      /// [Empty][google.protobuf.Empty].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> InstantiateInlineWorkflowTemplateAsync(global::Google.Cloud.Dataproc.V1Beta2.InstantiateInlineWorkflowTemplateRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return InstantiateInlineWorkflowTemplateAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Instantiates a template and begins execution.
      ///
      /// This method is equivalent to executing the sequence
      /// [CreateWorkflowTemplate][google.cloud.dataproc.v1beta2.WorkflowTemplateService.CreateWorkflowTemplate], [InstantiateWorkflowTemplate][google.cloud.dataproc.v1beta2.WorkflowTemplateService.InstantiateWorkflowTemplate],
      /// [DeleteWorkflowTemplate][google.cloud.dataproc.v1beta2.WorkflowTemplateService.DeleteWorkflowTemplate].
      ///
      /// The returned Operation can be used to track execution of
      /// workflow by polling
      /// [operations.get][google.longrunning.Operations.GetOperation].
      /// The Operation will complete when entire workflow is finished.
      ///
      /// The running workflow can be aborted via
      /// [operations.cancel][google.longrunning.Operations.CancelOperation].
      /// This will cause any inflight jobs to be cancelled and workflow-owned
      /// clusters to be deleted.
      ///
      /// The [Operation.metadata][google.longrunning.Operation.metadata] will be
      /// [WorkflowMetadata](/dataproc/docs/reference/rpc/google.cloud.dataproc.v1#workflowmetadata).
      /// Also see [Using
      /// WorkflowMetadata](/dataproc/docs/concepts/workflows/debugging#using_workflowmetadata).
      ///
      /// On successful completion,
      /// [Operation.response][google.longrunning.Operation.response] will be
      /// [Empty][google.protobuf.Empty].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> InstantiateInlineWorkflowTemplateAsync(global::Google.Cloud.Dataproc.V1Beta2.InstantiateInlineWorkflowTemplateRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_InstantiateInlineWorkflowTemplate, null, options, request);
      }
      /// <summary>
      /// Updates (replaces) workflow template. The updated template
      /// must contain version that matches the current server version.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Dataproc.V1Beta2.WorkflowTemplate UpdateWorkflowTemplate(global::Google.Cloud.Dataproc.V1Beta2.UpdateWorkflowTemplateRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateWorkflowTemplate(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates (replaces) workflow template. The updated template
      /// must contain version that matches the current server version.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Dataproc.V1Beta2.WorkflowTemplate UpdateWorkflowTemplate(global::Google.Cloud.Dataproc.V1Beta2.UpdateWorkflowTemplateRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateWorkflowTemplate, null, options, request);
      }
      /// <summary>
      /// Updates (replaces) workflow template. The updated template
      /// must contain version that matches the current server version.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Dataproc.V1Beta2.WorkflowTemplate> UpdateWorkflowTemplateAsync(global::Google.Cloud.Dataproc.V1Beta2.UpdateWorkflowTemplateRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateWorkflowTemplateAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates (replaces) workflow template. The updated template
      /// must contain version that matches the current server version.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Dataproc.V1Beta2.WorkflowTemplate> UpdateWorkflowTemplateAsync(global::Google.Cloud.Dataproc.V1Beta2.UpdateWorkflowTemplateRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateWorkflowTemplate, null, options, request);
      }
      /// <summary>
      /// Lists workflows that match the specified filter in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Dataproc.V1Beta2.ListWorkflowTemplatesResponse ListWorkflowTemplates(global::Google.Cloud.Dataproc.V1Beta2.ListWorkflowTemplatesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListWorkflowTemplates(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists workflows that match the specified filter in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Dataproc.V1Beta2.ListWorkflowTemplatesResponse ListWorkflowTemplates(global::Google.Cloud.Dataproc.V1Beta2.ListWorkflowTemplatesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListWorkflowTemplates, null, options, request);
      }
      /// <summary>
      /// Lists workflows that match the specified filter in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Dataproc.V1Beta2.ListWorkflowTemplatesResponse> ListWorkflowTemplatesAsync(global::Google.Cloud.Dataproc.V1Beta2.ListWorkflowTemplatesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListWorkflowTemplatesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists workflows that match the specified filter in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Dataproc.V1Beta2.ListWorkflowTemplatesResponse> ListWorkflowTemplatesAsync(global::Google.Cloud.Dataproc.V1Beta2.ListWorkflowTemplatesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListWorkflowTemplates, null, options, request);
      }
      /// <summary>
      /// Deletes a workflow template. It does not cancel in-progress workflows.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Protobuf.WellKnownTypes.Empty DeleteWorkflowTemplate(global::Google.Cloud.Dataproc.V1Beta2.DeleteWorkflowTemplateRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteWorkflowTemplate(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes a workflow template. It does not cancel in-progress workflows.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Protobuf.WellKnownTypes.Empty DeleteWorkflowTemplate(global::Google.Cloud.Dataproc.V1Beta2.DeleteWorkflowTemplateRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteWorkflowTemplate, null, options, request);
      }
      /// <summary>
      /// Deletes a workflow template. It does not cancel in-progress workflows.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> DeleteWorkflowTemplateAsync(global::Google.Cloud.Dataproc.V1Beta2.DeleteWorkflowTemplateRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteWorkflowTemplateAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes a workflow template. It does not cancel in-progress workflows.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> DeleteWorkflowTemplateAsync(global::Google.Cloud.Dataproc.V1Beta2.DeleteWorkflowTemplateRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteWorkflowTemplate, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override WorkflowTemplateServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new WorkflowTemplateServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(WorkflowTemplateServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_CreateWorkflowTemplate, serviceImpl.CreateWorkflowTemplate)
          .AddMethod(__Method_GetWorkflowTemplate, serviceImpl.GetWorkflowTemplate)
          .AddMethod(__Method_InstantiateWorkflowTemplate, serviceImpl.InstantiateWorkflowTemplate)
          .AddMethod(__Method_InstantiateInlineWorkflowTemplate, serviceImpl.InstantiateInlineWorkflowTemplate)
          .AddMethod(__Method_UpdateWorkflowTemplate, serviceImpl.UpdateWorkflowTemplate)
          .AddMethod(__Method_ListWorkflowTemplates, serviceImpl.ListWorkflowTemplates)
          .AddMethod(__Method_DeleteWorkflowTemplate, serviceImpl.DeleteWorkflowTemplate).Build();
    }

    /// <summary>Register service method implementations with a service binder. Useful when customizing the service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, WorkflowTemplateServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_CreateWorkflowTemplate, serviceImpl.CreateWorkflowTemplate);
      serviceBinder.AddMethod(__Method_GetWorkflowTemplate, serviceImpl.GetWorkflowTemplate);
      serviceBinder.AddMethod(__Method_InstantiateWorkflowTemplate, serviceImpl.InstantiateWorkflowTemplate);
      serviceBinder.AddMethod(__Method_InstantiateInlineWorkflowTemplate, serviceImpl.InstantiateInlineWorkflowTemplate);
      serviceBinder.AddMethod(__Method_UpdateWorkflowTemplate, serviceImpl.UpdateWorkflowTemplate);
      serviceBinder.AddMethod(__Method_ListWorkflowTemplates, serviceImpl.ListWorkflowTemplates);
      serviceBinder.AddMethod(__Method_DeleteWorkflowTemplate, serviceImpl.DeleteWorkflowTemplate);
    }

  }
}
#endregion
