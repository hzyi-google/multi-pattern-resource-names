// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: google/devtools/containeranalysis/v1alpha1/containeranalysis.proto
// </auto-generated>
// Original file comments:
// Copyright 2018 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Google.Devtools.Containeranalysis.V1Alpha1 {
  /// <summary>
  /// Retrieves the results of vulnerability scanning of cloud components such as
  /// container images. The Container Analysis API is an implementation of the
  /// [Grafeas](grafeas.io) API.
  ///
  /// The vulnerability results are stored as a series of Occurrences.
  /// An `Occurrence` contains information about a specific vulnerability in a
  /// resource. An `Occurrence` references a `Note`. A `Note` contains details
  /// about the vulnerability and is stored in a stored in a separate project.
  /// Multiple `Occurrences` can reference the same `Note`. For example, an SSL
  /// vulnerability could affect multiple packages in an image. In this case,
  /// there would be one `Note` for the vulnerability and an `Occurrence` for
  /// each package with the vulnerability referencing that `Note`.
  /// </summary>
  public static partial class ContainerAnalysis
  {
    static readonly string __ServiceName = "google.devtools.containeranalysis.v1alpha1.ContainerAnalysis";

    static readonly grpc::Marshaller<global::Google.Devtools.Containeranalysis.V1Alpha1.GetOccurrenceRequest> __Marshaller_google_devtools_containeranalysis_v1alpha1_GetOccurrenceRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Devtools.Containeranalysis.V1Alpha1.GetOccurrenceRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Devtools.Containeranalysis.V1Alpha1.Occurrence> __Marshaller_google_devtools_containeranalysis_v1alpha1_Occurrence = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Devtools.Containeranalysis.V1Alpha1.Occurrence.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Devtools.Containeranalysis.V1Alpha1.ListOccurrencesRequest> __Marshaller_google_devtools_containeranalysis_v1alpha1_ListOccurrencesRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Devtools.Containeranalysis.V1Alpha1.ListOccurrencesRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Devtools.Containeranalysis.V1Alpha1.ListOccurrencesResponse> __Marshaller_google_devtools_containeranalysis_v1alpha1_ListOccurrencesResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Devtools.Containeranalysis.V1Alpha1.ListOccurrencesResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Devtools.Containeranalysis.V1Alpha1.DeleteOccurrenceRequest> __Marshaller_google_devtools_containeranalysis_v1alpha1_DeleteOccurrenceRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Devtools.Containeranalysis.V1Alpha1.DeleteOccurrenceRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Protobuf.WellKnownTypes.Empty> __Marshaller_google_protobuf_Empty = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Protobuf.WellKnownTypes.Empty.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Devtools.Containeranalysis.V1Alpha1.CreateOccurrenceRequest> __Marshaller_google_devtools_containeranalysis_v1alpha1_CreateOccurrenceRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Devtools.Containeranalysis.V1Alpha1.CreateOccurrenceRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Devtools.Containeranalysis.V1Alpha1.UpdateOccurrenceRequest> __Marshaller_google_devtools_containeranalysis_v1alpha1_UpdateOccurrenceRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Devtools.Containeranalysis.V1Alpha1.UpdateOccurrenceRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Devtools.Containeranalysis.V1Alpha1.GetOccurrenceNoteRequest> __Marshaller_google_devtools_containeranalysis_v1alpha1_GetOccurrenceNoteRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Devtools.Containeranalysis.V1Alpha1.GetOccurrenceNoteRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Devtools.Containeranalysis.V1Alpha1.Note> __Marshaller_google_devtools_containeranalysis_v1alpha1_Note = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Devtools.Containeranalysis.V1Alpha1.Note.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Devtools.Containeranalysis.V1Alpha1.GetNoteRequest> __Marshaller_google_devtools_containeranalysis_v1alpha1_GetNoteRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Devtools.Containeranalysis.V1Alpha1.GetNoteRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Devtools.Containeranalysis.V1Alpha1.ListNotesRequest> __Marshaller_google_devtools_containeranalysis_v1alpha1_ListNotesRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Devtools.Containeranalysis.V1Alpha1.ListNotesRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Devtools.Containeranalysis.V1Alpha1.ListNotesResponse> __Marshaller_google_devtools_containeranalysis_v1alpha1_ListNotesResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Devtools.Containeranalysis.V1Alpha1.ListNotesResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Devtools.Containeranalysis.V1Alpha1.DeleteNoteRequest> __Marshaller_google_devtools_containeranalysis_v1alpha1_DeleteNoteRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Devtools.Containeranalysis.V1Alpha1.DeleteNoteRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Devtools.Containeranalysis.V1Alpha1.CreateNoteRequest> __Marshaller_google_devtools_containeranalysis_v1alpha1_CreateNoteRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Devtools.Containeranalysis.V1Alpha1.CreateNoteRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Devtools.Containeranalysis.V1Alpha1.UpdateNoteRequest> __Marshaller_google_devtools_containeranalysis_v1alpha1_UpdateNoteRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Devtools.Containeranalysis.V1Alpha1.UpdateNoteRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Devtools.Containeranalysis.V1Alpha1.ListNoteOccurrencesRequest> __Marshaller_google_devtools_containeranalysis_v1alpha1_ListNoteOccurrencesRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Devtools.Containeranalysis.V1Alpha1.ListNoteOccurrencesRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Devtools.Containeranalysis.V1Alpha1.ListNoteOccurrencesResponse> __Marshaller_google_devtools_containeranalysis_v1alpha1_ListNoteOccurrencesResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Devtools.Containeranalysis.V1Alpha1.ListNoteOccurrencesResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Devtools.Containeranalysis.V1Alpha1.GetVulnzOccurrencesSummaryRequest> __Marshaller_google_devtools_containeranalysis_v1alpha1_GetVulnzOccurrencesSummaryRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Devtools.Containeranalysis.V1Alpha1.GetVulnzOccurrencesSummaryRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Devtools.Containeranalysis.V1Alpha1.GetVulnzOccurrencesSummaryResponse> __Marshaller_google_devtools_containeranalysis_v1alpha1_GetVulnzOccurrencesSummaryResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Devtools.Containeranalysis.V1Alpha1.GetVulnzOccurrencesSummaryResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Iam.V1.SetIamPolicyRequest> __Marshaller_google_iam_v1_SetIamPolicyRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Iam.V1.SetIamPolicyRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Iam.V1.Policy> __Marshaller_google_iam_v1_Policy = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Iam.V1.Policy.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Iam.V1.GetIamPolicyRequest> __Marshaller_google_iam_v1_GetIamPolicyRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Iam.V1.GetIamPolicyRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Iam.V1.TestIamPermissionsRequest> __Marshaller_google_iam_v1_TestIamPermissionsRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Iam.V1.TestIamPermissionsRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Iam.V1.TestIamPermissionsResponse> __Marshaller_google_iam_v1_TestIamPermissionsResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Iam.V1.TestIamPermissionsResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Devtools.Containeranalysis.V1Alpha1.CreateOperationRequest> __Marshaller_google_devtools_containeranalysis_v1alpha1_CreateOperationRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Devtools.Containeranalysis.V1Alpha1.CreateOperationRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.LongRunning.Operation> __Marshaller_google_longrunning_Operation = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.LongRunning.Operation.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Devtools.Containeranalysis.V1Alpha1.UpdateOperationRequest> __Marshaller_google_devtools_containeranalysis_v1alpha1_UpdateOperationRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Devtools.Containeranalysis.V1Alpha1.UpdateOperationRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Devtools.Containeranalysis.V1Alpha1.GetScanConfigRequest> __Marshaller_google_devtools_containeranalysis_v1alpha1_GetScanConfigRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Devtools.Containeranalysis.V1Alpha1.GetScanConfigRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Devtools.Containeranalysis.V1Alpha1.ScanConfig> __Marshaller_google_devtools_containeranalysis_v1alpha1_ScanConfig = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Devtools.Containeranalysis.V1Alpha1.ScanConfig.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Devtools.Containeranalysis.V1Alpha1.ListScanConfigsRequest> __Marshaller_google_devtools_containeranalysis_v1alpha1_ListScanConfigsRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Devtools.Containeranalysis.V1Alpha1.ListScanConfigsRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Devtools.Containeranalysis.V1Alpha1.ListScanConfigsResponse> __Marshaller_google_devtools_containeranalysis_v1alpha1_ListScanConfigsResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Devtools.Containeranalysis.V1Alpha1.ListScanConfigsResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Devtools.Containeranalysis.V1Alpha1.UpdateScanConfigRequest> __Marshaller_google_devtools_containeranalysis_v1alpha1_UpdateScanConfigRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Devtools.Containeranalysis.V1Alpha1.UpdateScanConfigRequest.Parser.ParseFrom);

    static readonly grpc::Method<global::Google.Devtools.Containeranalysis.V1Alpha1.GetOccurrenceRequest, global::Google.Devtools.Containeranalysis.V1Alpha1.Occurrence> __Method_GetOccurrence = new grpc::Method<global::Google.Devtools.Containeranalysis.V1Alpha1.GetOccurrenceRequest, global::Google.Devtools.Containeranalysis.V1Alpha1.Occurrence>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetOccurrence",
        __Marshaller_google_devtools_containeranalysis_v1alpha1_GetOccurrenceRequest,
        __Marshaller_google_devtools_containeranalysis_v1alpha1_Occurrence);

    static readonly grpc::Method<global::Google.Devtools.Containeranalysis.V1Alpha1.ListOccurrencesRequest, global::Google.Devtools.Containeranalysis.V1Alpha1.ListOccurrencesResponse> __Method_ListOccurrences = new grpc::Method<global::Google.Devtools.Containeranalysis.V1Alpha1.ListOccurrencesRequest, global::Google.Devtools.Containeranalysis.V1Alpha1.ListOccurrencesResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListOccurrences",
        __Marshaller_google_devtools_containeranalysis_v1alpha1_ListOccurrencesRequest,
        __Marshaller_google_devtools_containeranalysis_v1alpha1_ListOccurrencesResponse);

    static readonly grpc::Method<global::Google.Devtools.Containeranalysis.V1Alpha1.DeleteOccurrenceRequest, global::Google.Protobuf.WellKnownTypes.Empty> __Method_DeleteOccurrence = new grpc::Method<global::Google.Devtools.Containeranalysis.V1Alpha1.DeleteOccurrenceRequest, global::Google.Protobuf.WellKnownTypes.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteOccurrence",
        __Marshaller_google_devtools_containeranalysis_v1alpha1_DeleteOccurrenceRequest,
        __Marshaller_google_protobuf_Empty);

    static readonly grpc::Method<global::Google.Devtools.Containeranalysis.V1Alpha1.CreateOccurrenceRequest, global::Google.Devtools.Containeranalysis.V1Alpha1.Occurrence> __Method_CreateOccurrence = new grpc::Method<global::Google.Devtools.Containeranalysis.V1Alpha1.CreateOccurrenceRequest, global::Google.Devtools.Containeranalysis.V1Alpha1.Occurrence>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateOccurrence",
        __Marshaller_google_devtools_containeranalysis_v1alpha1_CreateOccurrenceRequest,
        __Marshaller_google_devtools_containeranalysis_v1alpha1_Occurrence);

    static readonly grpc::Method<global::Google.Devtools.Containeranalysis.V1Alpha1.UpdateOccurrenceRequest, global::Google.Devtools.Containeranalysis.V1Alpha1.Occurrence> __Method_UpdateOccurrence = new grpc::Method<global::Google.Devtools.Containeranalysis.V1Alpha1.UpdateOccurrenceRequest, global::Google.Devtools.Containeranalysis.V1Alpha1.Occurrence>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateOccurrence",
        __Marshaller_google_devtools_containeranalysis_v1alpha1_UpdateOccurrenceRequest,
        __Marshaller_google_devtools_containeranalysis_v1alpha1_Occurrence);

    static readonly grpc::Method<global::Google.Devtools.Containeranalysis.V1Alpha1.GetOccurrenceNoteRequest, global::Google.Devtools.Containeranalysis.V1Alpha1.Note> __Method_GetOccurrenceNote = new grpc::Method<global::Google.Devtools.Containeranalysis.V1Alpha1.GetOccurrenceNoteRequest, global::Google.Devtools.Containeranalysis.V1Alpha1.Note>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetOccurrenceNote",
        __Marshaller_google_devtools_containeranalysis_v1alpha1_GetOccurrenceNoteRequest,
        __Marshaller_google_devtools_containeranalysis_v1alpha1_Note);

    static readonly grpc::Method<global::Google.Devtools.Containeranalysis.V1Alpha1.GetNoteRequest, global::Google.Devtools.Containeranalysis.V1Alpha1.Note> __Method_GetNote = new grpc::Method<global::Google.Devtools.Containeranalysis.V1Alpha1.GetNoteRequest, global::Google.Devtools.Containeranalysis.V1Alpha1.Note>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetNote",
        __Marshaller_google_devtools_containeranalysis_v1alpha1_GetNoteRequest,
        __Marshaller_google_devtools_containeranalysis_v1alpha1_Note);

    static readonly grpc::Method<global::Google.Devtools.Containeranalysis.V1Alpha1.ListNotesRequest, global::Google.Devtools.Containeranalysis.V1Alpha1.ListNotesResponse> __Method_ListNotes = new grpc::Method<global::Google.Devtools.Containeranalysis.V1Alpha1.ListNotesRequest, global::Google.Devtools.Containeranalysis.V1Alpha1.ListNotesResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListNotes",
        __Marshaller_google_devtools_containeranalysis_v1alpha1_ListNotesRequest,
        __Marshaller_google_devtools_containeranalysis_v1alpha1_ListNotesResponse);

    static readonly grpc::Method<global::Google.Devtools.Containeranalysis.V1Alpha1.DeleteNoteRequest, global::Google.Protobuf.WellKnownTypes.Empty> __Method_DeleteNote = new grpc::Method<global::Google.Devtools.Containeranalysis.V1Alpha1.DeleteNoteRequest, global::Google.Protobuf.WellKnownTypes.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteNote",
        __Marshaller_google_devtools_containeranalysis_v1alpha1_DeleteNoteRequest,
        __Marshaller_google_protobuf_Empty);

    static readonly grpc::Method<global::Google.Devtools.Containeranalysis.V1Alpha1.CreateNoteRequest, global::Google.Devtools.Containeranalysis.V1Alpha1.Note> __Method_CreateNote = new grpc::Method<global::Google.Devtools.Containeranalysis.V1Alpha1.CreateNoteRequest, global::Google.Devtools.Containeranalysis.V1Alpha1.Note>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateNote",
        __Marshaller_google_devtools_containeranalysis_v1alpha1_CreateNoteRequest,
        __Marshaller_google_devtools_containeranalysis_v1alpha1_Note);

    static readonly grpc::Method<global::Google.Devtools.Containeranalysis.V1Alpha1.UpdateNoteRequest, global::Google.Devtools.Containeranalysis.V1Alpha1.Note> __Method_UpdateNote = new grpc::Method<global::Google.Devtools.Containeranalysis.V1Alpha1.UpdateNoteRequest, global::Google.Devtools.Containeranalysis.V1Alpha1.Note>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateNote",
        __Marshaller_google_devtools_containeranalysis_v1alpha1_UpdateNoteRequest,
        __Marshaller_google_devtools_containeranalysis_v1alpha1_Note);

    static readonly grpc::Method<global::Google.Devtools.Containeranalysis.V1Alpha1.ListNoteOccurrencesRequest, global::Google.Devtools.Containeranalysis.V1Alpha1.ListNoteOccurrencesResponse> __Method_ListNoteOccurrences = new grpc::Method<global::Google.Devtools.Containeranalysis.V1Alpha1.ListNoteOccurrencesRequest, global::Google.Devtools.Containeranalysis.V1Alpha1.ListNoteOccurrencesResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListNoteOccurrences",
        __Marshaller_google_devtools_containeranalysis_v1alpha1_ListNoteOccurrencesRequest,
        __Marshaller_google_devtools_containeranalysis_v1alpha1_ListNoteOccurrencesResponse);

    static readonly grpc::Method<global::Google.Devtools.Containeranalysis.V1Alpha1.GetVulnzOccurrencesSummaryRequest, global::Google.Devtools.Containeranalysis.V1Alpha1.GetVulnzOccurrencesSummaryResponse> __Method_GetVulnzOccurrencesSummary = new grpc::Method<global::Google.Devtools.Containeranalysis.V1Alpha1.GetVulnzOccurrencesSummaryRequest, global::Google.Devtools.Containeranalysis.V1Alpha1.GetVulnzOccurrencesSummaryResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetVulnzOccurrencesSummary",
        __Marshaller_google_devtools_containeranalysis_v1alpha1_GetVulnzOccurrencesSummaryRequest,
        __Marshaller_google_devtools_containeranalysis_v1alpha1_GetVulnzOccurrencesSummaryResponse);

    static readonly grpc::Method<global::Google.Cloud.Iam.V1.SetIamPolicyRequest, global::Google.Cloud.Iam.V1.Policy> __Method_SetIamPolicy = new grpc::Method<global::Google.Cloud.Iam.V1.SetIamPolicyRequest, global::Google.Cloud.Iam.V1.Policy>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SetIamPolicy",
        __Marshaller_google_iam_v1_SetIamPolicyRequest,
        __Marshaller_google_iam_v1_Policy);

    static readonly grpc::Method<global::Google.Cloud.Iam.V1.GetIamPolicyRequest, global::Google.Cloud.Iam.V1.Policy> __Method_GetIamPolicy = new grpc::Method<global::Google.Cloud.Iam.V1.GetIamPolicyRequest, global::Google.Cloud.Iam.V1.Policy>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetIamPolicy",
        __Marshaller_google_iam_v1_GetIamPolicyRequest,
        __Marshaller_google_iam_v1_Policy);

    static readonly grpc::Method<global::Google.Cloud.Iam.V1.TestIamPermissionsRequest, global::Google.Cloud.Iam.V1.TestIamPermissionsResponse> __Method_TestIamPermissions = new grpc::Method<global::Google.Cloud.Iam.V1.TestIamPermissionsRequest, global::Google.Cloud.Iam.V1.TestIamPermissionsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "TestIamPermissions",
        __Marshaller_google_iam_v1_TestIamPermissionsRequest,
        __Marshaller_google_iam_v1_TestIamPermissionsResponse);

    static readonly grpc::Method<global::Google.Devtools.Containeranalysis.V1Alpha1.CreateOperationRequest, global::Google.LongRunning.Operation> __Method_CreateOperation = new grpc::Method<global::Google.Devtools.Containeranalysis.V1Alpha1.CreateOperationRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateOperation",
        __Marshaller_google_devtools_containeranalysis_v1alpha1_CreateOperationRequest,
        __Marshaller_google_longrunning_Operation);

    static readonly grpc::Method<global::Google.Devtools.Containeranalysis.V1Alpha1.UpdateOperationRequest, global::Google.LongRunning.Operation> __Method_UpdateOperation = new grpc::Method<global::Google.Devtools.Containeranalysis.V1Alpha1.UpdateOperationRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateOperation",
        __Marshaller_google_devtools_containeranalysis_v1alpha1_UpdateOperationRequest,
        __Marshaller_google_longrunning_Operation);

    static readonly grpc::Method<global::Google.Devtools.Containeranalysis.V1Alpha1.GetScanConfigRequest, global::Google.Devtools.Containeranalysis.V1Alpha1.ScanConfig> __Method_GetScanConfig = new grpc::Method<global::Google.Devtools.Containeranalysis.V1Alpha1.GetScanConfigRequest, global::Google.Devtools.Containeranalysis.V1Alpha1.ScanConfig>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetScanConfig",
        __Marshaller_google_devtools_containeranalysis_v1alpha1_GetScanConfigRequest,
        __Marshaller_google_devtools_containeranalysis_v1alpha1_ScanConfig);

    static readonly grpc::Method<global::Google.Devtools.Containeranalysis.V1Alpha1.ListScanConfigsRequest, global::Google.Devtools.Containeranalysis.V1Alpha1.ListScanConfigsResponse> __Method_ListScanConfigs = new grpc::Method<global::Google.Devtools.Containeranalysis.V1Alpha1.ListScanConfigsRequest, global::Google.Devtools.Containeranalysis.V1Alpha1.ListScanConfigsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListScanConfigs",
        __Marshaller_google_devtools_containeranalysis_v1alpha1_ListScanConfigsRequest,
        __Marshaller_google_devtools_containeranalysis_v1alpha1_ListScanConfigsResponse);

    static readonly grpc::Method<global::Google.Devtools.Containeranalysis.V1Alpha1.UpdateScanConfigRequest, global::Google.Devtools.Containeranalysis.V1Alpha1.ScanConfig> __Method_UpdateScanConfig = new grpc::Method<global::Google.Devtools.Containeranalysis.V1Alpha1.UpdateScanConfigRequest, global::Google.Devtools.Containeranalysis.V1Alpha1.ScanConfig>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateScanConfig",
        __Marshaller_google_devtools_containeranalysis_v1alpha1_UpdateScanConfigRequest,
        __Marshaller_google_devtools_containeranalysis_v1alpha1_ScanConfig);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Google.Devtools.Containeranalysis.V1Alpha1.ContaineranalysisReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of ContainerAnalysis</summary>
    public abstract partial class ContainerAnalysisBase
    {
      /// <summary>
      /// Returns the requested `Occurrence`.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Devtools.Containeranalysis.V1Alpha1.Occurrence> GetOccurrence(global::Google.Devtools.Containeranalysis.V1Alpha1.GetOccurrenceRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Lists active `Occurrences` for a given project matching the filters.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Devtools.Containeranalysis.V1Alpha1.ListOccurrencesResponse> ListOccurrences(global::Google.Devtools.Containeranalysis.V1Alpha1.ListOccurrencesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Deletes the given `Occurrence` from the system. Use this when
      /// an `Occurrence` is no longer applicable for the given resource.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Protobuf.WellKnownTypes.Empty> DeleteOccurrence(global::Google.Devtools.Containeranalysis.V1Alpha1.DeleteOccurrenceRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Creates a new `Occurrence`. Use this method to create `Occurrences`
      /// for a resource.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Devtools.Containeranalysis.V1Alpha1.Occurrence> CreateOccurrence(global::Google.Devtools.Containeranalysis.V1Alpha1.CreateOccurrenceRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Updates an existing occurrence.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Devtools.Containeranalysis.V1Alpha1.Occurrence> UpdateOccurrence(global::Google.Devtools.Containeranalysis.V1Alpha1.UpdateOccurrenceRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Gets the `Note` attached to the given `Occurrence`.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Devtools.Containeranalysis.V1Alpha1.Note> GetOccurrenceNote(global::Google.Devtools.Containeranalysis.V1Alpha1.GetOccurrenceNoteRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Returns the requested `Note`.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Devtools.Containeranalysis.V1Alpha1.Note> GetNote(global::Google.Devtools.Containeranalysis.V1Alpha1.GetNoteRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Lists all `Notes` for a given project.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Devtools.Containeranalysis.V1Alpha1.ListNotesResponse> ListNotes(global::Google.Devtools.Containeranalysis.V1Alpha1.ListNotesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Deletes the given `Note` from the system.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Protobuf.WellKnownTypes.Empty> DeleteNote(global::Google.Devtools.Containeranalysis.V1Alpha1.DeleteNoteRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Creates a new `Note`.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Devtools.Containeranalysis.V1Alpha1.Note> CreateNote(global::Google.Devtools.Containeranalysis.V1Alpha1.CreateNoteRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Updates an existing `Note`.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Devtools.Containeranalysis.V1Alpha1.Note> UpdateNote(global::Google.Devtools.Containeranalysis.V1Alpha1.UpdateNoteRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Lists `Occurrences` referencing the specified `Note`. Use this method to
      /// get all occurrences referencing your `Note` across all your customer
      /// projects.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Devtools.Containeranalysis.V1Alpha1.ListNoteOccurrencesResponse> ListNoteOccurrences(global::Google.Devtools.Containeranalysis.V1Alpha1.ListNoteOccurrencesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Gets a summary of the number and severity of occurrences.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Devtools.Containeranalysis.V1Alpha1.GetVulnzOccurrencesSummaryResponse> GetVulnzOccurrencesSummary(global::Google.Devtools.Containeranalysis.V1Alpha1.GetVulnzOccurrencesSummaryRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Sets the access control policy on the specified `Note` or `Occurrence`.
      /// Requires `containeranalysis.notes.setIamPolicy` or
      /// `containeranalysis.occurrences.setIamPolicy` permission if the resource is
      /// a `Note` or an `Occurrence`, respectively.
      /// Attempting to call this method without these permissions will result in a `
      /// `PERMISSION_DENIED` error.
      /// Attempting to call this method on a non-existent resource will result in a
      /// `NOT_FOUND` error if the user has `containeranalysis.notes.list` permission
      /// on a `Note` or `containeranalysis.occurrences.list` on an `Occurrence`, or
      /// a `PERMISSION_DENIED` error otherwise. The resource takes the following
      /// formats: `projects/{projectid}/occurrences/{occurrenceid}` for occurrences
      /// and projects/{projectid}/notes/{noteid} for notes
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Iam.V1.Policy> SetIamPolicy(global::Google.Cloud.Iam.V1.SetIamPolicyRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Gets the access control policy for a note or an `Occurrence` resource.
      /// Requires `containeranalysis.notes.setIamPolicy` or
      /// `containeranalysis.occurrences.setIamPolicy` permission if the resource is
      /// a note or occurrence, respectively.
      /// Attempting to call this method on a resource without the required
      /// permission will result in a `PERMISSION_DENIED` error. Attempting to call
      /// this method on a non-existent resource will result in a `NOT_FOUND` error
      /// if the user has list permission on the project, or a `PERMISSION_DENIED`
      /// error otherwise. The resource takes the following formats:
      /// `projects/{PROJECT_ID}/occurrences/{OCCURRENCE_ID}` for occurrences and
      /// projects/{PROJECT_ID}/notes/{NOTE_ID} for notes
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Iam.V1.Policy> GetIamPolicy(global::Google.Cloud.Iam.V1.GetIamPolicyRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Returns the permissions that a caller has on the specified note or
      /// occurrence resource. Requires list permission on the project (for example,
      /// "storage.objects.list" on the containing bucket for testing permission of
      /// an object). Attempting to call this method on a non-existent resource will
      /// result in a `NOT_FOUND` error if the user has list permission on the
      /// project, or a `PERMISSION_DENIED` error otherwise. The resource takes the
      /// following formats: `projects/{PROJECT_ID}/occurrences/{OCCURRENCE_ID}` for
      /// `Occurrences` and `projects/{PROJECT_ID}/notes/{NOTE_ID}` for `Notes`
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Iam.V1.TestIamPermissionsResponse> TestIamPermissions(global::Google.Cloud.Iam.V1.TestIamPermissionsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Creates a new `Operation`.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> CreateOperation(global::Google.Devtools.Containeranalysis.V1Alpha1.CreateOperationRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Updates an existing operation returns an error if operation
      ///  does not exist. The only valid operations are to update mark the done bit
      /// change the result.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> UpdateOperation(global::Google.Devtools.Containeranalysis.V1Alpha1.UpdateOperationRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Gets a specific scan configuration for a project.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Devtools.Containeranalysis.V1Alpha1.ScanConfig> GetScanConfig(global::Google.Devtools.Containeranalysis.V1Alpha1.GetScanConfigRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Lists scan configurations for a project.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Devtools.Containeranalysis.V1Alpha1.ListScanConfigsResponse> ListScanConfigs(global::Google.Devtools.Containeranalysis.V1Alpha1.ListScanConfigsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Updates the scan configuration to a new value.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Devtools.Containeranalysis.V1Alpha1.ScanConfig> UpdateScanConfig(global::Google.Devtools.Containeranalysis.V1Alpha1.UpdateScanConfigRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for ContainerAnalysis</summary>
    public partial class ContainerAnalysisClient : grpc::ClientBase<ContainerAnalysisClient>
    {
      /// <summary>Creates a new client for ContainerAnalysis</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public ContainerAnalysisClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for ContainerAnalysis that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public ContainerAnalysisClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected ContainerAnalysisClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected ContainerAnalysisClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Returns the requested `Occurrence`.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Devtools.Containeranalysis.V1Alpha1.Occurrence GetOccurrence(global::Google.Devtools.Containeranalysis.V1Alpha1.GetOccurrenceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetOccurrence(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns the requested `Occurrence`.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Devtools.Containeranalysis.V1Alpha1.Occurrence GetOccurrence(global::Google.Devtools.Containeranalysis.V1Alpha1.GetOccurrenceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetOccurrence, null, options, request);
      }
      /// <summary>
      /// Returns the requested `Occurrence`.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Devtools.Containeranalysis.V1Alpha1.Occurrence> GetOccurrenceAsync(global::Google.Devtools.Containeranalysis.V1Alpha1.GetOccurrenceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetOccurrenceAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns the requested `Occurrence`.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Devtools.Containeranalysis.V1Alpha1.Occurrence> GetOccurrenceAsync(global::Google.Devtools.Containeranalysis.V1Alpha1.GetOccurrenceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetOccurrence, null, options, request);
      }
      /// <summary>
      /// Lists active `Occurrences` for a given project matching the filters.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Devtools.Containeranalysis.V1Alpha1.ListOccurrencesResponse ListOccurrences(global::Google.Devtools.Containeranalysis.V1Alpha1.ListOccurrencesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListOccurrences(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists active `Occurrences` for a given project matching the filters.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Devtools.Containeranalysis.V1Alpha1.ListOccurrencesResponse ListOccurrences(global::Google.Devtools.Containeranalysis.V1Alpha1.ListOccurrencesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListOccurrences, null, options, request);
      }
      /// <summary>
      /// Lists active `Occurrences` for a given project matching the filters.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Devtools.Containeranalysis.V1Alpha1.ListOccurrencesResponse> ListOccurrencesAsync(global::Google.Devtools.Containeranalysis.V1Alpha1.ListOccurrencesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListOccurrencesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists active `Occurrences` for a given project matching the filters.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Devtools.Containeranalysis.V1Alpha1.ListOccurrencesResponse> ListOccurrencesAsync(global::Google.Devtools.Containeranalysis.V1Alpha1.ListOccurrencesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListOccurrences, null, options, request);
      }
      /// <summary>
      /// Deletes the given `Occurrence` from the system. Use this when
      /// an `Occurrence` is no longer applicable for the given resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Protobuf.WellKnownTypes.Empty DeleteOccurrence(global::Google.Devtools.Containeranalysis.V1Alpha1.DeleteOccurrenceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteOccurrence(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes the given `Occurrence` from the system. Use this when
      /// an `Occurrence` is no longer applicable for the given resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Protobuf.WellKnownTypes.Empty DeleteOccurrence(global::Google.Devtools.Containeranalysis.V1Alpha1.DeleteOccurrenceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteOccurrence, null, options, request);
      }
      /// <summary>
      /// Deletes the given `Occurrence` from the system. Use this when
      /// an `Occurrence` is no longer applicable for the given resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> DeleteOccurrenceAsync(global::Google.Devtools.Containeranalysis.V1Alpha1.DeleteOccurrenceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteOccurrenceAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes the given `Occurrence` from the system. Use this when
      /// an `Occurrence` is no longer applicable for the given resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> DeleteOccurrenceAsync(global::Google.Devtools.Containeranalysis.V1Alpha1.DeleteOccurrenceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteOccurrence, null, options, request);
      }
      /// <summary>
      /// Creates a new `Occurrence`. Use this method to create `Occurrences`
      /// for a resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Devtools.Containeranalysis.V1Alpha1.Occurrence CreateOccurrence(global::Google.Devtools.Containeranalysis.V1Alpha1.CreateOccurrenceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateOccurrence(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a new `Occurrence`. Use this method to create `Occurrences`
      /// for a resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Devtools.Containeranalysis.V1Alpha1.Occurrence CreateOccurrence(global::Google.Devtools.Containeranalysis.V1Alpha1.CreateOccurrenceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateOccurrence, null, options, request);
      }
      /// <summary>
      /// Creates a new `Occurrence`. Use this method to create `Occurrences`
      /// for a resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Devtools.Containeranalysis.V1Alpha1.Occurrence> CreateOccurrenceAsync(global::Google.Devtools.Containeranalysis.V1Alpha1.CreateOccurrenceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateOccurrenceAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a new `Occurrence`. Use this method to create `Occurrences`
      /// for a resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Devtools.Containeranalysis.V1Alpha1.Occurrence> CreateOccurrenceAsync(global::Google.Devtools.Containeranalysis.V1Alpha1.CreateOccurrenceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateOccurrence, null, options, request);
      }
      /// <summary>
      /// Updates an existing occurrence.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Devtools.Containeranalysis.V1Alpha1.Occurrence UpdateOccurrence(global::Google.Devtools.Containeranalysis.V1Alpha1.UpdateOccurrenceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateOccurrence(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates an existing occurrence.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Devtools.Containeranalysis.V1Alpha1.Occurrence UpdateOccurrence(global::Google.Devtools.Containeranalysis.V1Alpha1.UpdateOccurrenceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateOccurrence, null, options, request);
      }
      /// <summary>
      /// Updates an existing occurrence.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Devtools.Containeranalysis.V1Alpha1.Occurrence> UpdateOccurrenceAsync(global::Google.Devtools.Containeranalysis.V1Alpha1.UpdateOccurrenceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateOccurrenceAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates an existing occurrence.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Devtools.Containeranalysis.V1Alpha1.Occurrence> UpdateOccurrenceAsync(global::Google.Devtools.Containeranalysis.V1Alpha1.UpdateOccurrenceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateOccurrence, null, options, request);
      }
      /// <summary>
      /// Gets the `Note` attached to the given `Occurrence`.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Devtools.Containeranalysis.V1Alpha1.Note GetOccurrenceNote(global::Google.Devtools.Containeranalysis.V1Alpha1.GetOccurrenceNoteRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetOccurrenceNote(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets the `Note` attached to the given `Occurrence`.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Devtools.Containeranalysis.V1Alpha1.Note GetOccurrenceNote(global::Google.Devtools.Containeranalysis.V1Alpha1.GetOccurrenceNoteRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetOccurrenceNote, null, options, request);
      }
      /// <summary>
      /// Gets the `Note` attached to the given `Occurrence`.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Devtools.Containeranalysis.V1Alpha1.Note> GetOccurrenceNoteAsync(global::Google.Devtools.Containeranalysis.V1Alpha1.GetOccurrenceNoteRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetOccurrenceNoteAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets the `Note` attached to the given `Occurrence`.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Devtools.Containeranalysis.V1Alpha1.Note> GetOccurrenceNoteAsync(global::Google.Devtools.Containeranalysis.V1Alpha1.GetOccurrenceNoteRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetOccurrenceNote, null, options, request);
      }
      /// <summary>
      /// Returns the requested `Note`.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Devtools.Containeranalysis.V1Alpha1.Note GetNote(global::Google.Devtools.Containeranalysis.V1Alpha1.GetNoteRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetNote(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns the requested `Note`.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Devtools.Containeranalysis.V1Alpha1.Note GetNote(global::Google.Devtools.Containeranalysis.V1Alpha1.GetNoteRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetNote, null, options, request);
      }
      /// <summary>
      /// Returns the requested `Note`.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Devtools.Containeranalysis.V1Alpha1.Note> GetNoteAsync(global::Google.Devtools.Containeranalysis.V1Alpha1.GetNoteRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetNoteAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns the requested `Note`.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Devtools.Containeranalysis.V1Alpha1.Note> GetNoteAsync(global::Google.Devtools.Containeranalysis.V1Alpha1.GetNoteRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetNote, null, options, request);
      }
      /// <summary>
      /// Lists all `Notes` for a given project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Devtools.Containeranalysis.V1Alpha1.ListNotesResponse ListNotes(global::Google.Devtools.Containeranalysis.V1Alpha1.ListNotesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListNotes(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists all `Notes` for a given project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Devtools.Containeranalysis.V1Alpha1.ListNotesResponse ListNotes(global::Google.Devtools.Containeranalysis.V1Alpha1.ListNotesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListNotes, null, options, request);
      }
      /// <summary>
      /// Lists all `Notes` for a given project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Devtools.Containeranalysis.V1Alpha1.ListNotesResponse> ListNotesAsync(global::Google.Devtools.Containeranalysis.V1Alpha1.ListNotesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListNotesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists all `Notes` for a given project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Devtools.Containeranalysis.V1Alpha1.ListNotesResponse> ListNotesAsync(global::Google.Devtools.Containeranalysis.V1Alpha1.ListNotesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListNotes, null, options, request);
      }
      /// <summary>
      /// Deletes the given `Note` from the system.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Protobuf.WellKnownTypes.Empty DeleteNote(global::Google.Devtools.Containeranalysis.V1Alpha1.DeleteNoteRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteNote(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes the given `Note` from the system.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Protobuf.WellKnownTypes.Empty DeleteNote(global::Google.Devtools.Containeranalysis.V1Alpha1.DeleteNoteRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteNote, null, options, request);
      }
      /// <summary>
      /// Deletes the given `Note` from the system.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> DeleteNoteAsync(global::Google.Devtools.Containeranalysis.V1Alpha1.DeleteNoteRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteNoteAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes the given `Note` from the system.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> DeleteNoteAsync(global::Google.Devtools.Containeranalysis.V1Alpha1.DeleteNoteRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteNote, null, options, request);
      }
      /// <summary>
      /// Creates a new `Note`.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Devtools.Containeranalysis.V1Alpha1.Note CreateNote(global::Google.Devtools.Containeranalysis.V1Alpha1.CreateNoteRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateNote(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a new `Note`.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Devtools.Containeranalysis.V1Alpha1.Note CreateNote(global::Google.Devtools.Containeranalysis.V1Alpha1.CreateNoteRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateNote, null, options, request);
      }
      /// <summary>
      /// Creates a new `Note`.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Devtools.Containeranalysis.V1Alpha1.Note> CreateNoteAsync(global::Google.Devtools.Containeranalysis.V1Alpha1.CreateNoteRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateNoteAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a new `Note`.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Devtools.Containeranalysis.V1Alpha1.Note> CreateNoteAsync(global::Google.Devtools.Containeranalysis.V1Alpha1.CreateNoteRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateNote, null, options, request);
      }
      /// <summary>
      /// Updates an existing `Note`.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Devtools.Containeranalysis.V1Alpha1.Note UpdateNote(global::Google.Devtools.Containeranalysis.V1Alpha1.UpdateNoteRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateNote(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates an existing `Note`.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Devtools.Containeranalysis.V1Alpha1.Note UpdateNote(global::Google.Devtools.Containeranalysis.V1Alpha1.UpdateNoteRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateNote, null, options, request);
      }
      /// <summary>
      /// Updates an existing `Note`.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Devtools.Containeranalysis.V1Alpha1.Note> UpdateNoteAsync(global::Google.Devtools.Containeranalysis.V1Alpha1.UpdateNoteRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateNoteAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates an existing `Note`.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Devtools.Containeranalysis.V1Alpha1.Note> UpdateNoteAsync(global::Google.Devtools.Containeranalysis.V1Alpha1.UpdateNoteRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateNote, null, options, request);
      }
      /// <summary>
      /// Lists `Occurrences` referencing the specified `Note`. Use this method to
      /// get all occurrences referencing your `Note` across all your customer
      /// projects.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Devtools.Containeranalysis.V1Alpha1.ListNoteOccurrencesResponse ListNoteOccurrences(global::Google.Devtools.Containeranalysis.V1Alpha1.ListNoteOccurrencesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListNoteOccurrences(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists `Occurrences` referencing the specified `Note`. Use this method to
      /// get all occurrences referencing your `Note` across all your customer
      /// projects.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Devtools.Containeranalysis.V1Alpha1.ListNoteOccurrencesResponse ListNoteOccurrences(global::Google.Devtools.Containeranalysis.V1Alpha1.ListNoteOccurrencesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListNoteOccurrences, null, options, request);
      }
      /// <summary>
      /// Lists `Occurrences` referencing the specified `Note`. Use this method to
      /// get all occurrences referencing your `Note` across all your customer
      /// projects.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Devtools.Containeranalysis.V1Alpha1.ListNoteOccurrencesResponse> ListNoteOccurrencesAsync(global::Google.Devtools.Containeranalysis.V1Alpha1.ListNoteOccurrencesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListNoteOccurrencesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists `Occurrences` referencing the specified `Note`. Use this method to
      /// get all occurrences referencing your `Note` across all your customer
      /// projects.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Devtools.Containeranalysis.V1Alpha1.ListNoteOccurrencesResponse> ListNoteOccurrencesAsync(global::Google.Devtools.Containeranalysis.V1Alpha1.ListNoteOccurrencesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListNoteOccurrences, null, options, request);
      }
      /// <summary>
      /// Gets a summary of the number and severity of occurrences.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Devtools.Containeranalysis.V1Alpha1.GetVulnzOccurrencesSummaryResponse GetVulnzOccurrencesSummary(global::Google.Devtools.Containeranalysis.V1Alpha1.GetVulnzOccurrencesSummaryRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetVulnzOccurrencesSummary(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets a summary of the number and severity of occurrences.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Devtools.Containeranalysis.V1Alpha1.GetVulnzOccurrencesSummaryResponse GetVulnzOccurrencesSummary(global::Google.Devtools.Containeranalysis.V1Alpha1.GetVulnzOccurrencesSummaryRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetVulnzOccurrencesSummary, null, options, request);
      }
      /// <summary>
      /// Gets a summary of the number and severity of occurrences.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Devtools.Containeranalysis.V1Alpha1.GetVulnzOccurrencesSummaryResponse> GetVulnzOccurrencesSummaryAsync(global::Google.Devtools.Containeranalysis.V1Alpha1.GetVulnzOccurrencesSummaryRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetVulnzOccurrencesSummaryAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets a summary of the number and severity of occurrences.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Devtools.Containeranalysis.V1Alpha1.GetVulnzOccurrencesSummaryResponse> GetVulnzOccurrencesSummaryAsync(global::Google.Devtools.Containeranalysis.V1Alpha1.GetVulnzOccurrencesSummaryRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetVulnzOccurrencesSummary, null, options, request);
      }
      /// <summary>
      /// Sets the access control policy on the specified `Note` or `Occurrence`.
      /// Requires `containeranalysis.notes.setIamPolicy` or
      /// `containeranalysis.occurrences.setIamPolicy` permission if the resource is
      /// a `Note` or an `Occurrence`, respectively.
      /// Attempting to call this method without these permissions will result in a `
      /// `PERMISSION_DENIED` error.
      /// Attempting to call this method on a non-existent resource will result in a
      /// `NOT_FOUND` error if the user has `containeranalysis.notes.list` permission
      /// on a `Note` or `containeranalysis.occurrences.list` on an `Occurrence`, or
      /// a `PERMISSION_DENIED` error otherwise. The resource takes the following
      /// formats: `projects/{projectid}/occurrences/{occurrenceid}` for occurrences
      /// and projects/{projectid}/notes/{noteid} for notes
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Iam.V1.Policy SetIamPolicy(global::Google.Cloud.Iam.V1.SetIamPolicyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetIamPolicy(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Sets the access control policy on the specified `Note` or `Occurrence`.
      /// Requires `containeranalysis.notes.setIamPolicy` or
      /// `containeranalysis.occurrences.setIamPolicy` permission if the resource is
      /// a `Note` or an `Occurrence`, respectively.
      /// Attempting to call this method without these permissions will result in a `
      /// `PERMISSION_DENIED` error.
      /// Attempting to call this method on a non-existent resource will result in a
      /// `NOT_FOUND` error if the user has `containeranalysis.notes.list` permission
      /// on a `Note` or `containeranalysis.occurrences.list` on an `Occurrence`, or
      /// a `PERMISSION_DENIED` error otherwise. The resource takes the following
      /// formats: `projects/{projectid}/occurrences/{occurrenceid}` for occurrences
      /// and projects/{projectid}/notes/{noteid} for notes
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Iam.V1.Policy SetIamPolicy(global::Google.Cloud.Iam.V1.SetIamPolicyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SetIamPolicy, null, options, request);
      }
      /// <summary>
      /// Sets the access control policy on the specified `Note` or `Occurrence`.
      /// Requires `containeranalysis.notes.setIamPolicy` or
      /// `containeranalysis.occurrences.setIamPolicy` permission if the resource is
      /// a `Note` or an `Occurrence`, respectively.
      /// Attempting to call this method without these permissions will result in a `
      /// `PERMISSION_DENIED` error.
      /// Attempting to call this method on a non-existent resource will result in a
      /// `NOT_FOUND` error if the user has `containeranalysis.notes.list` permission
      /// on a `Note` or `containeranalysis.occurrences.list` on an `Occurrence`, or
      /// a `PERMISSION_DENIED` error otherwise. The resource takes the following
      /// formats: `projects/{projectid}/occurrences/{occurrenceid}` for occurrences
      /// and projects/{projectid}/notes/{noteid} for notes
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Iam.V1.Policy> SetIamPolicyAsync(global::Google.Cloud.Iam.V1.SetIamPolicyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetIamPolicyAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Sets the access control policy on the specified `Note` or `Occurrence`.
      /// Requires `containeranalysis.notes.setIamPolicy` or
      /// `containeranalysis.occurrences.setIamPolicy` permission if the resource is
      /// a `Note` or an `Occurrence`, respectively.
      /// Attempting to call this method without these permissions will result in a `
      /// `PERMISSION_DENIED` error.
      /// Attempting to call this method on a non-existent resource will result in a
      /// `NOT_FOUND` error if the user has `containeranalysis.notes.list` permission
      /// on a `Note` or `containeranalysis.occurrences.list` on an `Occurrence`, or
      /// a `PERMISSION_DENIED` error otherwise. The resource takes the following
      /// formats: `projects/{projectid}/occurrences/{occurrenceid}` for occurrences
      /// and projects/{projectid}/notes/{noteid} for notes
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Iam.V1.Policy> SetIamPolicyAsync(global::Google.Cloud.Iam.V1.SetIamPolicyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SetIamPolicy, null, options, request);
      }
      /// <summary>
      /// Gets the access control policy for a note or an `Occurrence` resource.
      /// Requires `containeranalysis.notes.setIamPolicy` or
      /// `containeranalysis.occurrences.setIamPolicy` permission if the resource is
      /// a note or occurrence, respectively.
      /// Attempting to call this method on a resource without the required
      /// permission will result in a `PERMISSION_DENIED` error. Attempting to call
      /// this method on a non-existent resource will result in a `NOT_FOUND` error
      /// if the user has list permission on the project, or a `PERMISSION_DENIED`
      /// error otherwise. The resource takes the following formats:
      /// `projects/{PROJECT_ID}/occurrences/{OCCURRENCE_ID}` for occurrences and
      /// projects/{PROJECT_ID}/notes/{NOTE_ID} for notes
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Iam.V1.Policy GetIamPolicy(global::Google.Cloud.Iam.V1.GetIamPolicyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetIamPolicy(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets the access control policy for a note or an `Occurrence` resource.
      /// Requires `containeranalysis.notes.setIamPolicy` or
      /// `containeranalysis.occurrences.setIamPolicy` permission if the resource is
      /// a note or occurrence, respectively.
      /// Attempting to call this method on a resource without the required
      /// permission will result in a `PERMISSION_DENIED` error. Attempting to call
      /// this method on a non-existent resource will result in a `NOT_FOUND` error
      /// if the user has list permission on the project, or a `PERMISSION_DENIED`
      /// error otherwise. The resource takes the following formats:
      /// `projects/{PROJECT_ID}/occurrences/{OCCURRENCE_ID}` for occurrences and
      /// projects/{PROJECT_ID}/notes/{NOTE_ID} for notes
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Iam.V1.Policy GetIamPolicy(global::Google.Cloud.Iam.V1.GetIamPolicyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetIamPolicy, null, options, request);
      }
      /// <summary>
      /// Gets the access control policy for a note or an `Occurrence` resource.
      /// Requires `containeranalysis.notes.setIamPolicy` or
      /// `containeranalysis.occurrences.setIamPolicy` permission if the resource is
      /// a note or occurrence, respectively.
      /// Attempting to call this method on a resource without the required
      /// permission will result in a `PERMISSION_DENIED` error. Attempting to call
      /// this method on a non-existent resource will result in a `NOT_FOUND` error
      /// if the user has list permission on the project, or a `PERMISSION_DENIED`
      /// error otherwise. The resource takes the following formats:
      /// `projects/{PROJECT_ID}/occurrences/{OCCURRENCE_ID}` for occurrences and
      /// projects/{PROJECT_ID}/notes/{NOTE_ID} for notes
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Iam.V1.Policy> GetIamPolicyAsync(global::Google.Cloud.Iam.V1.GetIamPolicyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetIamPolicyAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets the access control policy for a note or an `Occurrence` resource.
      /// Requires `containeranalysis.notes.setIamPolicy` or
      /// `containeranalysis.occurrences.setIamPolicy` permission if the resource is
      /// a note or occurrence, respectively.
      /// Attempting to call this method on a resource without the required
      /// permission will result in a `PERMISSION_DENIED` error. Attempting to call
      /// this method on a non-existent resource will result in a `NOT_FOUND` error
      /// if the user has list permission on the project, or a `PERMISSION_DENIED`
      /// error otherwise. The resource takes the following formats:
      /// `projects/{PROJECT_ID}/occurrences/{OCCURRENCE_ID}` for occurrences and
      /// projects/{PROJECT_ID}/notes/{NOTE_ID} for notes
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Iam.V1.Policy> GetIamPolicyAsync(global::Google.Cloud.Iam.V1.GetIamPolicyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetIamPolicy, null, options, request);
      }
      /// <summary>
      /// Returns the permissions that a caller has on the specified note or
      /// occurrence resource. Requires list permission on the project (for example,
      /// "storage.objects.list" on the containing bucket for testing permission of
      /// an object). Attempting to call this method on a non-existent resource will
      /// result in a `NOT_FOUND` error if the user has list permission on the
      /// project, or a `PERMISSION_DENIED` error otherwise. The resource takes the
      /// following formats: `projects/{PROJECT_ID}/occurrences/{OCCURRENCE_ID}` for
      /// `Occurrences` and `projects/{PROJECT_ID}/notes/{NOTE_ID}` for `Notes`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Iam.V1.TestIamPermissionsResponse TestIamPermissions(global::Google.Cloud.Iam.V1.TestIamPermissionsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return TestIamPermissions(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns the permissions that a caller has on the specified note or
      /// occurrence resource. Requires list permission on the project (for example,
      /// "storage.objects.list" on the containing bucket for testing permission of
      /// an object). Attempting to call this method on a non-existent resource will
      /// result in a `NOT_FOUND` error if the user has list permission on the
      /// project, or a `PERMISSION_DENIED` error otherwise. The resource takes the
      /// following formats: `projects/{PROJECT_ID}/occurrences/{OCCURRENCE_ID}` for
      /// `Occurrences` and `projects/{PROJECT_ID}/notes/{NOTE_ID}` for `Notes`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Iam.V1.TestIamPermissionsResponse TestIamPermissions(global::Google.Cloud.Iam.V1.TestIamPermissionsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_TestIamPermissions, null, options, request);
      }
      /// <summary>
      /// Returns the permissions that a caller has on the specified note or
      /// occurrence resource. Requires list permission on the project (for example,
      /// "storage.objects.list" on the containing bucket for testing permission of
      /// an object). Attempting to call this method on a non-existent resource will
      /// result in a `NOT_FOUND` error if the user has list permission on the
      /// project, or a `PERMISSION_DENIED` error otherwise. The resource takes the
      /// following formats: `projects/{PROJECT_ID}/occurrences/{OCCURRENCE_ID}` for
      /// `Occurrences` and `projects/{PROJECT_ID}/notes/{NOTE_ID}` for `Notes`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Iam.V1.TestIamPermissionsResponse> TestIamPermissionsAsync(global::Google.Cloud.Iam.V1.TestIamPermissionsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return TestIamPermissionsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns the permissions that a caller has on the specified note or
      /// occurrence resource. Requires list permission on the project (for example,
      /// "storage.objects.list" on the containing bucket for testing permission of
      /// an object). Attempting to call this method on a non-existent resource will
      /// result in a `NOT_FOUND` error if the user has list permission on the
      /// project, or a `PERMISSION_DENIED` error otherwise. The resource takes the
      /// following formats: `projects/{PROJECT_ID}/occurrences/{OCCURRENCE_ID}` for
      /// `Occurrences` and `projects/{PROJECT_ID}/notes/{NOTE_ID}` for `Notes`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Iam.V1.TestIamPermissionsResponse> TestIamPermissionsAsync(global::Google.Cloud.Iam.V1.TestIamPermissionsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_TestIamPermissions, null, options, request);
      }
      /// <summary>
      /// Creates a new `Operation`.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.LongRunning.Operation CreateOperation(global::Google.Devtools.Containeranalysis.V1Alpha1.CreateOperationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateOperation(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a new `Operation`.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.LongRunning.Operation CreateOperation(global::Google.Devtools.Containeranalysis.V1Alpha1.CreateOperationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateOperation, null, options, request);
      }
      /// <summary>
      /// Creates a new `Operation`.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> CreateOperationAsync(global::Google.Devtools.Containeranalysis.V1Alpha1.CreateOperationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateOperationAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a new `Operation`.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> CreateOperationAsync(global::Google.Devtools.Containeranalysis.V1Alpha1.CreateOperationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateOperation, null, options, request);
      }
      /// <summary>
      /// Updates an existing operation returns an error if operation
      ///  does not exist. The only valid operations are to update mark the done bit
      /// change the result.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.LongRunning.Operation UpdateOperation(global::Google.Devtools.Containeranalysis.V1Alpha1.UpdateOperationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateOperation(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates an existing operation returns an error if operation
      ///  does not exist. The only valid operations are to update mark the done bit
      /// change the result.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.LongRunning.Operation UpdateOperation(global::Google.Devtools.Containeranalysis.V1Alpha1.UpdateOperationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateOperation, null, options, request);
      }
      /// <summary>
      /// Updates an existing operation returns an error if operation
      ///  does not exist. The only valid operations are to update mark the done bit
      /// change the result.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> UpdateOperationAsync(global::Google.Devtools.Containeranalysis.V1Alpha1.UpdateOperationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateOperationAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates an existing operation returns an error if operation
      ///  does not exist. The only valid operations are to update mark the done bit
      /// change the result.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> UpdateOperationAsync(global::Google.Devtools.Containeranalysis.V1Alpha1.UpdateOperationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateOperation, null, options, request);
      }
      /// <summary>
      /// Gets a specific scan configuration for a project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Devtools.Containeranalysis.V1Alpha1.ScanConfig GetScanConfig(global::Google.Devtools.Containeranalysis.V1Alpha1.GetScanConfigRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetScanConfig(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets a specific scan configuration for a project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Devtools.Containeranalysis.V1Alpha1.ScanConfig GetScanConfig(global::Google.Devtools.Containeranalysis.V1Alpha1.GetScanConfigRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetScanConfig, null, options, request);
      }
      /// <summary>
      /// Gets a specific scan configuration for a project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Devtools.Containeranalysis.V1Alpha1.ScanConfig> GetScanConfigAsync(global::Google.Devtools.Containeranalysis.V1Alpha1.GetScanConfigRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetScanConfigAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets a specific scan configuration for a project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Devtools.Containeranalysis.V1Alpha1.ScanConfig> GetScanConfigAsync(global::Google.Devtools.Containeranalysis.V1Alpha1.GetScanConfigRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetScanConfig, null, options, request);
      }
      /// <summary>
      /// Lists scan configurations for a project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Devtools.Containeranalysis.V1Alpha1.ListScanConfigsResponse ListScanConfigs(global::Google.Devtools.Containeranalysis.V1Alpha1.ListScanConfigsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListScanConfigs(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists scan configurations for a project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Devtools.Containeranalysis.V1Alpha1.ListScanConfigsResponse ListScanConfigs(global::Google.Devtools.Containeranalysis.V1Alpha1.ListScanConfigsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListScanConfigs, null, options, request);
      }
      /// <summary>
      /// Lists scan configurations for a project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Devtools.Containeranalysis.V1Alpha1.ListScanConfigsResponse> ListScanConfigsAsync(global::Google.Devtools.Containeranalysis.V1Alpha1.ListScanConfigsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListScanConfigsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists scan configurations for a project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Devtools.Containeranalysis.V1Alpha1.ListScanConfigsResponse> ListScanConfigsAsync(global::Google.Devtools.Containeranalysis.V1Alpha1.ListScanConfigsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListScanConfigs, null, options, request);
      }
      /// <summary>
      /// Updates the scan configuration to a new value.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Devtools.Containeranalysis.V1Alpha1.ScanConfig UpdateScanConfig(global::Google.Devtools.Containeranalysis.V1Alpha1.UpdateScanConfigRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateScanConfig(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates the scan configuration to a new value.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Devtools.Containeranalysis.V1Alpha1.ScanConfig UpdateScanConfig(global::Google.Devtools.Containeranalysis.V1Alpha1.UpdateScanConfigRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateScanConfig, null, options, request);
      }
      /// <summary>
      /// Updates the scan configuration to a new value.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Devtools.Containeranalysis.V1Alpha1.ScanConfig> UpdateScanConfigAsync(global::Google.Devtools.Containeranalysis.V1Alpha1.UpdateScanConfigRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateScanConfigAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates the scan configuration to a new value.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Devtools.Containeranalysis.V1Alpha1.ScanConfig> UpdateScanConfigAsync(global::Google.Devtools.Containeranalysis.V1Alpha1.UpdateScanConfigRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateScanConfig, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override ContainerAnalysisClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new ContainerAnalysisClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(ContainerAnalysisBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_GetOccurrence, serviceImpl.GetOccurrence)
          .AddMethod(__Method_ListOccurrences, serviceImpl.ListOccurrences)
          .AddMethod(__Method_DeleteOccurrence, serviceImpl.DeleteOccurrence)
          .AddMethod(__Method_CreateOccurrence, serviceImpl.CreateOccurrence)
          .AddMethod(__Method_UpdateOccurrence, serviceImpl.UpdateOccurrence)
          .AddMethod(__Method_GetOccurrenceNote, serviceImpl.GetOccurrenceNote)
          .AddMethod(__Method_GetNote, serviceImpl.GetNote)
          .AddMethod(__Method_ListNotes, serviceImpl.ListNotes)
          .AddMethod(__Method_DeleteNote, serviceImpl.DeleteNote)
          .AddMethod(__Method_CreateNote, serviceImpl.CreateNote)
          .AddMethod(__Method_UpdateNote, serviceImpl.UpdateNote)
          .AddMethod(__Method_ListNoteOccurrences, serviceImpl.ListNoteOccurrences)
          .AddMethod(__Method_GetVulnzOccurrencesSummary, serviceImpl.GetVulnzOccurrencesSummary)
          .AddMethod(__Method_SetIamPolicy, serviceImpl.SetIamPolicy)
          .AddMethod(__Method_GetIamPolicy, serviceImpl.GetIamPolicy)
          .AddMethod(__Method_TestIamPermissions, serviceImpl.TestIamPermissions)
          .AddMethod(__Method_CreateOperation, serviceImpl.CreateOperation)
          .AddMethod(__Method_UpdateOperation, serviceImpl.UpdateOperation)
          .AddMethod(__Method_GetScanConfig, serviceImpl.GetScanConfig)
          .AddMethod(__Method_ListScanConfigs, serviceImpl.ListScanConfigs)
          .AddMethod(__Method_UpdateScanConfig, serviceImpl.UpdateScanConfig).Build();
    }

    /// <summary>Register service method implementations with a service binder. Useful when customizing the service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, ContainerAnalysisBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_GetOccurrence, serviceImpl.GetOccurrence);
      serviceBinder.AddMethod(__Method_ListOccurrences, serviceImpl.ListOccurrences);
      serviceBinder.AddMethod(__Method_DeleteOccurrence, serviceImpl.DeleteOccurrence);
      serviceBinder.AddMethod(__Method_CreateOccurrence, serviceImpl.CreateOccurrence);
      serviceBinder.AddMethod(__Method_UpdateOccurrence, serviceImpl.UpdateOccurrence);
      serviceBinder.AddMethod(__Method_GetOccurrenceNote, serviceImpl.GetOccurrenceNote);
      serviceBinder.AddMethod(__Method_GetNote, serviceImpl.GetNote);
      serviceBinder.AddMethod(__Method_ListNotes, serviceImpl.ListNotes);
      serviceBinder.AddMethod(__Method_DeleteNote, serviceImpl.DeleteNote);
      serviceBinder.AddMethod(__Method_CreateNote, serviceImpl.CreateNote);
      serviceBinder.AddMethod(__Method_UpdateNote, serviceImpl.UpdateNote);
      serviceBinder.AddMethod(__Method_ListNoteOccurrences, serviceImpl.ListNoteOccurrences);
      serviceBinder.AddMethod(__Method_GetVulnzOccurrencesSummary, serviceImpl.GetVulnzOccurrencesSummary);
      serviceBinder.AddMethod(__Method_SetIamPolicy, serviceImpl.SetIamPolicy);
      serviceBinder.AddMethod(__Method_GetIamPolicy, serviceImpl.GetIamPolicy);
      serviceBinder.AddMethod(__Method_TestIamPermissions, serviceImpl.TestIamPermissions);
      serviceBinder.AddMethod(__Method_CreateOperation, serviceImpl.CreateOperation);
      serviceBinder.AddMethod(__Method_UpdateOperation, serviceImpl.UpdateOperation);
      serviceBinder.AddMethod(__Method_GetScanConfig, serviceImpl.GetScanConfig);
      serviceBinder.AddMethod(__Method_ListScanConfigs, serviceImpl.ListScanConfigs);
      serviceBinder.AddMethod(__Method_UpdateScanConfig, serviceImpl.UpdateScanConfig);
    }

  }
}
#endregion
