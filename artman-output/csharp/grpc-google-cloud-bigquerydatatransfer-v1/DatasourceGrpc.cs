// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: google/cloud/bigquery/datatransfer/v1/datasource.proto
// </auto-generated>
// Original file comments:
// Copyright 2019 Google LLC.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
//
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Google.Cloud.BigQuery.DataTransfer.V1 {
  /// <summary>
  /// The Google BigQuery Data Transfer API allows BigQuery users to
  /// configure transfer of their data from other Google Products into BigQuery.
  /// This service exposes methods that should be used by data source backend.
  /// </summary>
  public static partial class DataSourceService
  {
    static readonly string __ServiceName = "google.cloud.bigquery.datatransfer.v1.DataSourceService";

    static readonly grpc::Marshaller<global::Google.Cloud.BigQuery.DataTransfer.V1.UpdateTransferRunRequest> __Marshaller_google_cloud_bigquery_datatransfer_v1_UpdateTransferRunRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.BigQuery.DataTransfer.V1.UpdateTransferRunRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.BigQuery.DataTransfer.V1.TransferRun> __Marshaller_google_cloud_bigquery_datatransfer_v1_TransferRun = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.BigQuery.DataTransfer.V1.TransferRun.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.BigQuery.DataTransfer.V1.LogTransferRunMessagesRequest> __Marshaller_google_cloud_bigquery_datatransfer_v1_LogTransferRunMessagesRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.BigQuery.DataTransfer.V1.LogTransferRunMessagesRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Protobuf.WellKnownTypes.Empty> __Marshaller_google_protobuf_Empty = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Protobuf.WellKnownTypes.Empty.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.BigQuery.DataTransfer.V1.StartBigQueryJobsRequest> __Marshaller_google_cloud_bigquery_datatransfer_v1_StartBigQueryJobsRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.BigQuery.DataTransfer.V1.StartBigQueryJobsRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.BigQuery.DataTransfer.V1.FinishRunRequest> __Marshaller_google_cloud_bigquery_datatransfer_v1_FinishRunRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.BigQuery.DataTransfer.V1.FinishRunRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.BigQuery.DataTransfer.V1.CreateDataSourceDefinitionRequest> __Marshaller_google_cloud_bigquery_datatransfer_v1_CreateDataSourceDefinitionRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.BigQuery.DataTransfer.V1.CreateDataSourceDefinitionRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.BigQuery.DataTransfer.V1.DataSourceDefinition> __Marshaller_google_cloud_bigquery_datatransfer_v1_DataSourceDefinition = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.BigQuery.DataTransfer.V1.DataSourceDefinition.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.BigQuery.DataTransfer.V1.UpdateDataSourceDefinitionRequest> __Marshaller_google_cloud_bigquery_datatransfer_v1_UpdateDataSourceDefinitionRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.BigQuery.DataTransfer.V1.UpdateDataSourceDefinitionRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.BigQuery.DataTransfer.V1.DeleteDataSourceDefinitionRequest> __Marshaller_google_cloud_bigquery_datatransfer_v1_DeleteDataSourceDefinitionRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.BigQuery.DataTransfer.V1.DeleteDataSourceDefinitionRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.BigQuery.DataTransfer.V1.GetDataSourceDefinitionRequest> __Marshaller_google_cloud_bigquery_datatransfer_v1_GetDataSourceDefinitionRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.BigQuery.DataTransfer.V1.GetDataSourceDefinitionRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.BigQuery.DataTransfer.V1.ListDataSourceDefinitionsRequest> __Marshaller_google_cloud_bigquery_datatransfer_v1_ListDataSourceDefinitionsRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.BigQuery.DataTransfer.V1.ListDataSourceDefinitionsRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.BigQuery.DataTransfer.V1.ListDataSourceDefinitionsResponse> __Marshaller_google_cloud_bigquery_datatransfer_v1_ListDataSourceDefinitionsResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.BigQuery.DataTransfer.V1.ListDataSourceDefinitionsResponse.Parser.ParseFrom);

    static readonly grpc::Method<global::Google.Cloud.BigQuery.DataTransfer.V1.UpdateTransferRunRequest, global::Google.Cloud.BigQuery.DataTransfer.V1.TransferRun> __Method_UpdateTransferRun = new grpc::Method<global::Google.Cloud.BigQuery.DataTransfer.V1.UpdateTransferRunRequest, global::Google.Cloud.BigQuery.DataTransfer.V1.TransferRun>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateTransferRun",
        __Marshaller_google_cloud_bigquery_datatransfer_v1_UpdateTransferRunRequest,
        __Marshaller_google_cloud_bigquery_datatransfer_v1_TransferRun);

    static readonly grpc::Method<global::Google.Cloud.BigQuery.DataTransfer.V1.LogTransferRunMessagesRequest, global::Google.Protobuf.WellKnownTypes.Empty> __Method_LogTransferRunMessages = new grpc::Method<global::Google.Cloud.BigQuery.DataTransfer.V1.LogTransferRunMessagesRequest, global::Google.Protobuf.WellKnownTypes.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "LogTransferRunMessages",
        __Marshaller_google_cloud_bigquery_datatransfer_v1_LogTransferRunMessagesRequest,
        __Marshaller_google_protobuf_Empty);

    static readonly grpc::Method<global::Google.Cloud.BigQuery.DataTransfer.V1.StartBigQueryJobsRequest, global::Google.Protobuf.WellKnownTypes.Empty> __Method_StartBigQueryJobs = new grpc::Method<global::Google.Cloud.BigQuery.DataTransfer.V1.StartBigQueryJobsRequest, global::Google.Protobuf.WellKnownTypes.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "StartBigQueryJobs",
        __Marshaller_google_cloud_bigquery_datatransfer_v1_StartBigQueryJobsRequest,
        __Marshaller_google_protobuf_Empty);

    static readonly grpc::Method<global::Google.Cloud.BigQuery.DataTransfer.V1.FinishRunRequest, global::Google.Protobuf.WellKnownTypes.Empty> __Method_FinishRun = new grpc::Method<global::Google.Cloud.BigQuery.DataTransfer.V1.FinishRunRequest, global::Google.Protobuf.WellKnownTypes.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "FinishRun",
        __Marshaller_google_cloud_bigquery_datatransfer_v1_FinishRunRequest,
        __Marshaller_google_protobuf_Empty);

    static readonly grpc::Method<global::Google.Cloud.BigQuery.DataTransfer.V1.CreateDataSourceDefinitionRequest, global::Google.Cloud.BigQuery.DataTransfer.V1.DataSourceDefinition> __Method_CreateDataSourceDefinition = new grpc::Method<global::Google.Cloud.BigQuery.DataTransfer.V1.CreateDataSourceDefinitionRequest, global::Google.Cloud.BigQuery.DataTransfer.V1.DataSourceDefinition>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateDataSourceDefinition",
        __Marshaller_google_cloud_bigquery_datatransfer_v1_CreateDataSourceDefinitionRequest,
        __Marshaller_google_cloud_bigquery_datatransfer_v1_DataSourceDefinition);

    static readonly grpc::Method<global::Google.Cloud.BigQuery.DataTransfer.V1.UpdateDataSourceDefinitionRequest, global::Google.Cloud.BigQuery.DataTransfer.V1.DataSourceDefinition> __Method_UpdateDataSourceDefinition = new grpc::Method<global::Google.Cloud.BigQuery.DataTransfer.V1.UpdateDataSourceDefinitionRequest, global::Google.Cloud.BigQuery.DataTransfer.V1.DataSourceDefinition>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateDataSourceDefinition",
        __Marshaller_google_cloud_bigquery_datatransfer_v1_UpdateDataSourceDefinitionRequest,
        __Marshaller_google_cloud_bigquery_datatransfer_v1_DataSourceDefinition);

    static readonly grpc::Method<global::Google.Cloud.BigQuery.DataTransfer.V1.DeleteDataSourceDefinitionRequest, global::Google.Protobuf.WellKnownTypes.Empty> __Method_DeleteDataSourceDefinition = new grpc::Method<global::Google.Cloud.BigQuery.DataTransfer.V1.DeleteDataSourceDefinitionRequest, global::Google.Protobuf.WellKnownTypes.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteDataSourceDefinition",
        __Marshaller_google_cloud_bigquery_datatransfer_v1_DeleteDataSourceDefinitionRequest,
        __Marshaller_google_protobuf_Empty);

    static readonly grpc::Method<global::Google.Cloud.BigQuery.DataTransfer.V1.GetDataSourceDefinitionRequest, global::Google.Cloud.BigQuery.DataTransfer.V1.DataSourceDefinition> __Method_GetDataSourceDefinition = new grpc::Method<global::Google.Cloud.BigQuery.DataTransfer.V1.GetDataSourceDefinitionRequest, global::Google.Cloud.BigQuery.DataTransfer.V1.DataSourceDefinition>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetDataSourceDefinition",
        __Marshaller_google_cloud_bigquery_datatransfer_v1_GetDataSourceDefinitionRequest,
        __Marshaller_google_cloud_bigquery_datatransfer_v1_DataSourceDefinition);

    static readonly grpc::Method<global::Google.Cloud.BigQuery.DataTransfer.V1.ListDataSourceDefinitionsRequest, global::Google.Cloud.BigQuery.DataTransfer.V1.ListDataSourceDefinitionsResponse> __Method_ListDataSourceDefinitions = new grpc::Method<global::Google.Cloud.BigQuery.DataTransfer.V1.ListDataSourceDefinitionsRequest, global::Google.Cloud.BigQuery.DataTransfer.V1.ListDataSourceDefinitionsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListDataSourceDefinitions",
        __Marshaller_google_cloud_bigquery_datatransfer_v1_ListDataSourceDefinitionsRequest,
        __Marshaller_google_cloud_bigquery_datatransfer_v1_ListDataSourceDefinitionsResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Google.Cloud.BigQuery.DataTransfer.V1.DatasourceReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of DataSourceService</summary>
    public abstract partial class DataSourceServiceBase
    {
      /// <summary>
      /// Update a transfer run. If successful, resets
      /// data_source.update_deadline_seconds timer.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.BigQuery.DataTransfer.V1.TransferRun> UpdateTransferRun(global::Google.Cloud.BigQuery.DataTransfer.V1.UpdateTransferRunRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Log messages for a transfer run. If successful (at least 1 message), resets
      /// data_source.update_deadline_seconds timer.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Protobuf.WellKnownTypes.Empty> LogTransferRunMessages(global::Google.Cloud.BigQuery.DataTransfer.V1.LogTransferRunMessagesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Notify the Data Transfer Service that data is ready for loading.
      /// The Data Transfer Service will start and monitor multiple BigQuery Load
      /// jobs for a transfer run. Monitored jobs will be automatically retried
      /// and produce log messages when starting and finishing a job.
      /// Can be called multiple times for the same transfer run.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Protobuf.WellKnownTypes.Empty> StartBigQueryJobs(global::Google.Cloud.BigQuery.DataTransfer.V1.StartBigQueryJobsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Notify the Data Transfer Service that the data source is done processing
      /// the run. No more status updates or requests to start/monitor jobs will be
      /// accepted. The run will be finalized by the Data Transfer Service when all
      /// monitored jobs are completed.
      /// Does not need to be called if the run is set to FAILED.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Protobuf.WellKnownTypes.Empty> FinishRun(global::Google.Cloud.BigQuery.DataTransfer.V1.FinishRunRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Creates a data source definition.  Calling this method will automatically
      /// use your credentials to create the following Google Cloud resources in
      /// YOUR Google Cloud project.
      /// 1. OAuth client
      /// 2. Pub/Sub Topics and Subscriptions in each supported_location_ids. e.g.,
      /// projects/{project_id}/{topics|subscriptions}/bigquerydatatransfer.{data_source_id}.{location_id}.run
      /// The field data_source.client_id should be left empty in the input request,
      /// as the API will create a new OAuth client on behalf of the caller. On the
      /// other hand data_source.scopes usually need to be set when there are OAuth
      /// scopes that need to be granted by end users.
      /// 3. We need a longer deadline due to the 60 seconds SLO from Pub/Sub admin
      /// Operations. This also applies to update and delete data source definition.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.BigQuery.DataTransfer.V1.DataSourceDefinition> CreateDataSourceDefinition(global::Google.Cloud.BigQuery.DataTransfer.V1.CreateDataSourceDefinitionRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Updates an existing data source definition. If changing
      /// supported_location_ids, triggers same effects as mentioned in "Create a
      /// data source definition."
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.BigQuery.DataTransfer.V1.DataSourceDefinition> UpdateDataSourceDefinition(global::Google.Cloud.BigQuery.DataTransfer.V1.UpdateDataSourceDefinitionRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Deletes a data source definition, all of the transfer configs associated
      /// with this data source definition (if any) must be deleted first by the user
      /// in ALL regions, in order to delete the data source definition.
      /// This method is primarily meant for deleting data sources created during
      /// testing stage.
      /// If the data source is referenced by transfer configs in the region
      /// specified in the request URL, the method will fail immediately. If in the
      /// current region (e.g., US) it's not used by any transfer configs, but in
      /// another region (e.g., EU) it is, then although the method will succeed in
      /// region US, but it will fail when the deletion operation is replicated to
      /// region EU. And eventually, the system will replicate the data source
      /// definition back from EU to US, in order to bring all regions to
      /// consistency. The final effect is that the data source appears to be
      /// 'undeleted' in the US region.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Protobuf.WellKnownTypes.Empty> DeleteDataSourceDefinition(global::Google.Cloud.BigQuery.DataTransfer.V1.DeleteDataSourceDefinitionRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves an existing data source definition.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.BigQuery.DataTransfer.V1.DataSourceDefinition> GetDataSourceDefinition(global::Google.Cloud.BigQuery.DataTransfer.V1.GetDataSourceDefinitionRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Lists supported data source definitions.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.BigQuery.DataTransfer.V1.ListDataSourceDefinitionsResponse> ListDataSourceDefinitions(global::Google.Cloud.BigQuery.DataTransfer.V1.ListDataSourceDefinitionsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for DataSourceService</summary>
    public partial class DataSourceServiceClient : grpc::ClientBase<DataSourceServiceClient>
    {
      /// <summary>Creates a new client for DataSourceService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public DataSourceServiceClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for DataSourceService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public DataSourceServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected DataSourceServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected DataSourceServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Update a transfer run. If successful, resets
      /// data_source.update_deadline_seconds timer.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.BigQuery.DataTransfer.V1.TransferRun UpdateTransferRun(global::Google.Cloud.BigQuery.DataTransfer.V1.UpdateTransferRunRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateTransferRun(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Update a transfer run. If successful, resets
      /// data_source.update_deadline_seconds timer.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.BigQuery.DataTransfer.V1.TransferRun UpdateTransferRun(global::Google.Cloud.BigQuery.DataTransfer.V1.UpdateTransferRunRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateTransferRun, null, options, request);
      }
      /// <summary>
      /// Update a transfer run. If successful, resets
      /// data_source.update_deadline_seconds timer.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.BigQuery.DataTransfer.V1.TransferRun> UpdateTransferRunAsync(global::Google.Cloud.BigQuery.DataTransfer.V1.UpdateTransferRunRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateTransferRunAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Update a transfer run. If successful, resets
      /// data_source.update_deadline_seconds timer.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.BigQuery.DataTransfer.V1.TransferRun> UpdateTransferRunAsync(global::Google.Cloud.BigQuery.DataTransfer.V1.UpdateTransferRunRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateTransferRun, null, options, request);
      }
      /// <summary>
      /// Log messages for a transfer run. If successful (at least 1 message), resets
      /// data_source.update_deadline_seconds timer.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Protobuf.WellKnownTypes.Empty LogTransferRunMessages(global::Google.Cloud.BigQuery.DataTransfer.V1.LogTransferRunMessagesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return LogTransferRunMessages(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Log messages for a transfer run. If successful (at least 1 message), resets
      /// data_source.update_deadline_seconds timer.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Protobuf.WellKnownTypes.Empty LogTransferRunMessages(global::Google.Cloud.BigQuery.DataTransfer.V1.LogTransferRunMessagesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_LogTransferRunMessages, null, options, request);
      }
      /// <summary>
      /// Log messages for a transfer run. If successful (at least 1 message), resets
      /// data_source.update_deadline_seconds timer.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> LogTransferRunMessagesAsync(global::Google.Cloud.BigQuery.DataTransfer.V1.LogTransferRunMessagesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return LogTransferRunMessagesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Log messages for a transfer run. If successful (at least 1 message), resets
      /// data_source.update_deadline_seconds timer.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> LogTransferRunMessagesAsync(global::Google.Cloud.BigQuery.DataTransfer.V1.LogTransferRunMessagesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_LogTransferRunMessages, null, options, request);
      }
      /// <summary>
      /// Notify the Data Transfer Service that data is ready for loading.
      /// The Data Transfer Service will start and monitor multiple BigQuery Load
      /// jobs for a transfer run. Monitored jobs will be automatically retried
      /// and produce log messages when starting and finishing a job.
      /// Can be called multiple times for the same transfer run.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Protobuf.WellKnownTypes.Empty StartBigQueryJobs(global::Google.Cloud.BigQuery.DataTransfer.V1.StartBigQueryJobsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return StartBigQueryJobs(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Notify the Data Transfer Service that data is ready for loading.
      /// The Data Transfer Service will start and monitor multiple BigQuery Load
      /// jobs for a transfer run. Monitored jobs will be automatically retried
      /// and produce log messages when starting and finishing a job.
      /// Can be called multiple times for the same transfer run.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Protobuf.WellKnownTypes.Empty StartBigQueryJobs(global::Google.Cloud.BigQuery.DataTransfer.V1.StartBigQueryJobsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_StartBigQueryJobs, null, options, request);
      }
      /// <summary>
      /// Notify the Data Transfer Service that data is ready for loading.
      /// The Data Transfer Service will start and monitor multiple BigQuery Load
      /// jobs for a transfer run. Monitored jobs will be automatically retried
      /// and produce log messages when starting and finishing a job.
      /// Can be called multiple times for the same transfer run.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> StartBigQueryJobsAsync(global::Google.Cloud.BigQuery.DataTransfer.V1.StartBigQueryJobsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return StartBigQueryJobsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Notify the Data Transfer Service that data is ready for loading.
      /// The Data Transfer Service will start and monitor multiple BigQuery Load
      /// jobs for a transfer run. Monitored jobs will be automatically retried
      /// and produce log messages when starting and finishing a job.
      /// Can be called multiple times for the same transfer run.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> StartBigQueryJobsAsync(global::Google.Cloud.BigQuery.DataTransfer.V1.StartBigQueryJobsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_StartBigQueryJobs, null, options, request);
      }
      /// <summary>
      /// Notify the Data Transfer Service that the data source is done processing
      /// the run. No more status updates or requests to start/monitor jobs will be
      /// accepted. The run will be finalized by the Data Transfer Service when all
      /// monitored jobs are completed.
      /// Does not need to be called if the run is set to FAILED.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Protobuf.WellKnownTypes.Empty FinishRun(global::Google.Cloud.BigQuery.DataTransfer.V1.FinishRunRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return FinishRun(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Notify the Data Transfer Service that the data source is done processing
      /// the run. No more status updates or requests to start/monitor jobs will be
      /// accepted. The run will be finalized by the Data Transfer Service when all
      /// monitored jobs are completed.
      /// Does not need to be called if the run is set to FAILED.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Protobuf.WellKnownTypes.Empty FinishRun(global::Google.Cloud.BigQuery.DataTransfer.V1.FinishRunRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_FinishRun, null, options, request);
      }
      /// <summary>
      /// Notify the Data Transfer Service that the data source is done processing
      /// the run. No more status updates or requests to start/monitor jobs will be
      /// accepted. The run will be finalized by the Data Transfer Service when all
      /// monitored jobs are completed.
      /// Does not need to be called if the run is set to FAILED.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> FinishRunAsync(global::Google.Cloud.BigQuery.DataTransfer.V1.FinishRunRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return FinishRunAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Notify the Data Transfer Service that the data source is done processing
      /// the run. No more status updates or requests to start/monitor jobs will be
      /// accepted. The run will be finalized by the Data Transfer Service when all
      /// monitored jobs are completed.
      /// Does not need to be called if the run is set to FAILED.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> FinishRunAsync(global::Google.Cloud.BigQuery.DataTransfer.V1.FinishRunRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_FinishRun, null, options, request);
      }
      /// <summary>
      /// Creates a data source definition.  Calling this method will automatically
      /// use your credentials to create the following Google Cloud resources in
      /// YOUR Google Cloud project.
      /// 1. OAuth client
      /// 2. Pub/Sub Topics and Subscriptions in each supported_location_ids. e.g.,
      /// projects/{project_id}/{topics|subscriptions}/bigquerydatatransfer.{data_source_id}.{location_id}.run
      /// The field data_source.client_id should be left empty in the input request,
      /// as the API will create a new OAuth client on behalf of the caller. On the
      /// other hand data_source.scopes usually need to be set when there are OAuth
      /// scopes that need to be granted by end users.
      /// 3. We need a longer deadline due to the 60 seconds SLO from Pub/Sub admin
      /// Operations. This also applies to update and delete data source definition.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.BigQuery.DataTransfer.V1.DataSourceDefinition CreateDataSourceDefinition(global::Google.Cloud.BigQuery.DataTransfer.V1.CreateDataSourceDefinitionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateDataSourceDefinition(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a data source definition.  Calling this method will automatically
      /// use your credentials to create the following Google Cloud resources in
      /// YOUR Google Cloud project.
      /// 1. OAuth client
      /// 2. Pub/Sub Topics and Subscriptions in each supported_location_ids. e.g.,
      /// projects/{project_id}/{topics|subscriptions}/bigquerydatatransfer.{data_source_id}.{location_id}.run
      /// The field data_source.client_id should be left empty in the input request,
      /// as the API will create a new OAuth client on behalf of the caller. On the
      /// other hand data_source.scopes usually need to be set when there are OAuth
      /// scopes that need to be granted by end users.
      /// 3. We need a longer deadline due to the 60 seconds SLO from Pub/Sub admin
      /// Operations. This also applies to update and delete data source definition.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.BigQuery.DataTransfer.V1.DataSourceDefinition CreateDataSourceDefinition(global::Google.Cloud.BigQuery.DataTransfer.V1.CreateDataSourceDefinitionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateDataSourceDefinition, null, options, request);
      }
      /// <summary>
      /// Creates a data source definition.  Calling this method will automatically
      /// use your credentials to create the following Google Cloud resources in
      /// YOUR Google Cloud project.
      /// 1. OAuth client
      /// 2. Pub/Sub Topics and Subscriptions in each supported_location_ids. e.g.,
      /// projects/{project_id}/{topics|subscriptions}/bigquerydatatransfer.{data_source_id}.{location_id}.run
      /// The field data_source.client_id should be left empty in the input request,
      /// as the API will create a new OAuth client on behalf of the caller. On the
      /// other hand data_source.scopes usually need to be set when there are OAuth
      /// scopes that need to be granted by end users.
      /// 3. We need a longer deadline due to the 60 seconds SLO from Pub/Sub admin
      /// Operations. This also applies to update and delete data source definition.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.BigQuery.DataTransfer.V1.DataSourceDefinition> CreateDataSourceDefinitionAsync(global::Google.Cloud.BigQuery.DataTransfer.V1.CreateDataSourceDefinitionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateDataSourceDefinitionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a data source definition.  Calling this method will automatically
      /// use your credentials to create the following Google Cloud resources in
      /// YOUR Google Cloud project.
      /// 1. OAuth client
      /// 2. Pub/Sub Topics and Subscriptions in each supported_location_ids. e.g.,
      /// projects/{project_id}/{topics|subscriptions}/bigquerydatatransfer.{data_source_id}.{location_id}.run
      /// The field data_source.client_id should be left empty in the input request,
      /// as the API will create a new OAuth client on behalf of the caller. On the
      /// other hand data_source.scopes usually need to be set when there are OAuth
      /// scopes that need to be granted by end users.
      /// 3. We need a longer deadline due to the 60 seconds SLO from Pub/Sub admin
      /// Operations. This also applies to update and delete data source definition.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.BigQuery.DataTransfer.V1.DataSourceDefinition> CreateDataSourceDefinitionAsync(global::Google.Cloud.BigQuery.DataTransfer.V1.CreateDataSourceDefinitionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateDataSourceDefinition, null, options, request);
      }
      /// <summary>
      /// Updates an existing data source definition. If changing
      /// supported_location_ids, triggers same effects as mentioned in "Create a
      /// data source definition."
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.BigQuery.DataTransfer.V1.DataSourceDefinition UpdateDataSourceDefinition(global::Google.Cloud.BigQuery.DataTransfer.V1.UpdateDataSourceDefinitionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateDataSourceDefinition(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates an existing data source definition. If changing
      /// supported_location_ids, triggers same effects as mentioned in "Create a
      /// data source definition."
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.BigQuery.DataTransfer.V1.DataSourceDefinition UpdateDataSourceDefinition(global::Google.Cloud.BigQuery.DataTransfer.V1.UpdateDataSourceDefinitionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateDataSourceDefinition, null, options, request);
      }
      /// <summary>
      /// Updates an existing data source definition. If changing
      /// supported_location_ids, triggers same effects as mentioned in "Create a
      /// data source definition."
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.BigQuery.DataTransfer.V1.DataSourceDefinition> UpdateDataSourceDefinitionAsync(global::Google.Cloud.BigQuery.DataTransfer.V1.UpdateDataSourceDefinitionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateDataSourceDefinitionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates an existing data source definition. If changing
      /// supported_location_ids, triggers same effects as mentioned in "Create a
      /// data source definition."
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.BigQuery.DataTransfer.V1.DataSourceDefinition> UpdateDataSourceDefinitionAsync(global::Google.Cloud.BigQuery.DataTransfer.V1.UpdateDataSourceDefinitionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateDataSourceDefinition, null, options, request);
      }
      /// <summary>
      /// Deletes a data source definition, all of the transfer configs associated
      /// with this data source definition (if any) must be deleted first by the user
      /// in ALL regions, in order to delete the data source definition.
      /// This method is primarily meant for deleting data sources created during
      /// testing stage.
      /// If the data source is referenced by transfer configs in the region
      /// specified in the request URL, the method will fail immediately. If in the
      /// current region (e.g., US) it's not used by any transfer configs, but in
      /// another region (e.g., EU) it is, then although the method will succeed in
      /// region US, but it will fail when the deletion operation is replicated to
      /// region EU. And eventually, the system will replicate the data source
      /// definition back from EU to US, in order to bring all regions to
      /// consistency. The final effect is that the data source appears to be
      /// 'undeleted' in the US region.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Protobuf.WellKnownTypes.Empty DeleteDataSourceDefinition(global::Google.Cloud.BigQuery.DataTransfer.V1.DeleteDataSourceDefinitionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteDataSourceDefinition(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes a data source definition, all of the transfer configs associated
      /// with this data source definition (if any) must be deleted first by the user
      /// in ALL regions, in order to delete the data source definition.
      /// This method is primarily meant for deleting data sources created during
      /// testing stage.
      /// If the data source is referenced by transfer configs in the region
      /// specified in the request URL, the method will fail immediately. If in the
      /// current region (e.g., US) it's not used by any transfer configs, but in
      /// another region (e.g., EU) it is, then although the method will succeed in
      /// region US, but it will fail when the deletion operation is replicated to
      /// region EU. And eventually, the system will replicate the data source
      /// definition back from EU to US, in order to bring all regions to
      /// consistency. The final effect is that the data source appears to be
      /// 'undeleted' in the US region.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Protobuf.WellKnownTypes.Empty DeleteDataSourceDefinition(global::Google.Cloud.BigQuery.DataTransfer.V1.DeleteDataSourceDefinitionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteDataSourceDefinition, null, options, request);
      }
      /// <summary>
      /// Deletes a data source definition, all of the transfer configs associated
      /// with this data source definition (if any) must be deleted first by the user
      /// in ALL regions, in order to delete the data source definition.
      /// This method is primarily meant for deleting data sources created during
      /// testing stage.
      /// If the data source is referenced by transfer configs in the region
      /// specified in the request URL, the method will fail immediately. If in the
      /// current region (e.g., US) it's not used by any transfer configs, but in
      /// another region (e.g., EU) it is, then although the method will succeed in
      /// region US, but it will fail when the deletion operation is replicated to
      /// region EU. And eventually, the system will replicate the data source
      /// definition back from EU to US, in order to bring all regions to
      /// consistency. The final effect is that the data source appears to be
      /// 'undeleted' in the US region.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> DeleteDataSourceDefinitionAsync(global::Google.Cloud.BigQuery.DataTransfer.V1.DeleteDataSourceDefinitionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteDataSourceDefinitionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes a data source definition, all of the transfer configs associated
      /// with this data source definition (if any) must be deleted first by the user
      /// in ALL regions, in order to delete the data source definition.
      /// This method is primarily meant for deleting data sources created during
      /// testing stage.
      /// If the data source is referenced by transfer configs in the region
      /// specified in the request URL, the method will fail immediately. If in the
      /// current region (e.g., US) it's not used by any transfer configs, but in
      /// another region (e.g., EU) it is, then although the method will succeed in
      /// region US, but it will fail when the deletion operation is replicated to
      /// region EU. And eventually, the system will replicate the data source
      /// definition back from EU to US, in order to bring all regions to
      /// consistency. The final effect is that the data source appears to be
      /// 'undeleted' in the US region.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> DeleteDataSourceDefinitionAsync(global::Google.Cloud.BigQuery.DataTransfer.V1.DeleteDataSourceDefinitionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteDataSourceDefinition, null, options, request);
      }
      /// <summary>
      /// Retrieves an existing data source definition.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.BigQuery.DataTransfer.V1.DataSourceDefinition GetDataSourceDefinition(global::Google.Cloud.BigQuery.DataTransfer.V1.GetDataSourceDefinitionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetDataSourceDefinition(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves an existing data source definition.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.BigQuery.DataTransfer.V1.DataSourceDefinition GetDataSourceDefinition(global::Google.Cloud.BigQuery.DataTransfer.V1.GetDataSourceDefinitionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetDataSourceDefinition, null, options, request);
      }
      /// <summary>
      /// Retrieves an existing data source definition.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.BigQuery.DataTransfer.V1.DataSourceDefinition> GetDataSourceDefinitionAsync(global::Google.Cloud.BigQuery.DataTransfer.V1.GetDataSourceDefinitionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetDataSourceDefinitionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves an existing data source definition.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.BigQuery.DataTransfer.V1.DataSourceDefinition> GetDataSourceDefinitionAsync(global::Google.Cloud.BigQuery.DataTransfer.V1.GetDataSourceDefinitionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetDataSourceDefinition, null, options, request);
      }
      /// <summary>
      /// Lists supported data source definitions.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.BigQuery.DataTransfer.V1.ListDataSourceDefinitionsResponse ListDataSourceDefinitions(global::Google.Cloud.BigQuery.DataTransfer.V1.ListDataSourceDefinitionsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListDataSourceDefinitions(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists supported data source definitions.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.BigQuery.DataTransfer.V1.ListDataSourceDefinitionsResponse ListDataSourceDefinitions(global::Google.Cloud.BigQuery.DataTransfer.V1.ListDataSourceDefinitionsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListDataSourceDefinitions, null, options, request);
      }
      /// <summary>
      /// Lists supported data source definitions.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.BigQuery.DataTransfer.V1.ListDataSourceDefinitionsResponse> ListDataSourceDefinitionsAsync(global::Google.Cloud.BigQuery.DataTransfer.V1.ListDataSourceDefinitionsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListDataSourceDefinitionsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists supported data source definitions.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.BigQuery.DataTransfer.V1.ListDataSourceDefinitionsResponse> ListDataSourceDefinitionsAsync(global::Google.Cloud.BigQuery.DataTransfer.V1.ListDataSourceDefinitionsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListDataSourceDefinitions, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override DataSourceServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new DataSourceServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(DataSourceServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_UpdateTransferRun, serviceImpl.UpdateTransferRun)
          .AddMethod(__Method_LogTransferRunMessages, serviceImpl.LogTransferRunMessages)
          .AddMethod(__Method_StartBigQueryJobs, serviceImpl.StartBigQueryJobs)
          .AddMethod(__Method_FinishRun, serviceImpl.FinishRun)
          .AddMethod(__Method_CreateDataSourceDefinition, serviceImpl.CreateDataSourceDefinition)
          .AddMethod(__Method_UpdateDataSourceDefinition, serviceImpl.UpdateDataSourceDefinition)
          .AddMethod(__Method_DeleteDataSourceDefinition, serviceImpl.DeleteDataSourceDefinition)
          .AddMethod(__Method_GetDataSourceDefinition, serviceImpl.GetDataSourceDefinition)
          .AddMethod(__Method_ListDataSourceDefinitions, serviceImpl.ListDataSourceDefinitions).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, DataSourceServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_UpdateTransferRun, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.BigQuery.DataTransfer.V1.UpdateTransferRunRequest, global::Google.Cloud.BigQuery.DataTransfer.V1.TransferRun>(serviceImpl.UpdateTransferRun));
      serviceBinder.AddMethod(__Method_LogTransferRunMessages, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.BigQuery.DataTransfer.V1.LogTransferRunMessagesRequest, global::Google.Protobuf.WellKnownTypes.Empty>(serviceImpl.LogTransferRunMessages));
      serviceBinder.AddMethod(__Method_StartBigQueryJobs, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.BigQuery.DataTransfer.V1.StartBigQueryJobsRequest, global::Google.Protobuf.WellKnownTypes.Empty>(serviceImpl.StartBigQueryJobs));
      serviceBinder.AddMethod(__Method_FinishRun, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.BigQuery.DataTransfer.V1.FinishRunRequest, global::Google.Protobuf.WellKnownTypes.Empty>(serviceImpl.FinishRun));
      serviceBinder.AddMethod(__Method_CreateDataSourceDefinition, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.BigQuery.DataTransfer.V1.CreateDataSourceDefinitionRequest, global::Google.Cloud.BigQuery.DataTransfer.V1.DataSourceDefinition>(serviceImpl.CreateDataSourceDefinition));
      serviceBinder.AddMethod(__Method_UpdateDataSourceDefinition, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.BigQuery.DataTransfer.V1.UpdateDataSourceDefinitionRequest, global::Google.Cloud.BigQuery.DataTransfer.V1.DataSourceDefinition>(serviceImpl.UpdateDataSourceDefinition));
      serviceBinder.AddMethod(__Method_DeleteDataSourceDefinition, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.BigQuery.DataTransfer.V1.DeleteDataSourceDefinitionRequest, global::Google.Protobuf.WellKnownTypes.Empty>(serviceImpl.DeleteDataSourceDefinition));
      serviceBinder.AddMethod(__Method_GetDataSourceDefinition, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.BigQuery.DataTransfer.V1.GetDataSourceDefinitionRequest, global::Google.Cloud.BigQuery.DataTransfer.V1.DataSourceDefinition>(serviceImpl.GetDataSourceDefinition));
      serviceBinder.AddMethod(__Method_ListDataSourceDefinitions, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.BigQuery.DataTransfer.V1.ListDataSourceDefinitionsRequest, global::Google.Cloud.BigQuery.DataTransfer.V1.ListDataSourceDefinitionsResponse>(serviceImpl.ListDataSourceDefinitions));
    }

  }
}
#endregion
